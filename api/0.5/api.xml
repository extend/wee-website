<?xml version="1.0" encoding="UTF-8"?>
<docu><classes><class name="AuthenticationException" module="wee/auth" filename="wee/auth/AuthenticationException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when an authentication attempt fails.</comment></class><class name="BadXMLException" module="wee/exceptions/logic" filename="wee/exceptions/logic/BadXMLException.class.php" startline="28" endline="52" parent="LogicException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" startline="37" endline="51" visibility="public"><params numrequired="1"><param name="sMessage" null="null" type="string">The message of the exception.</param><param name="oError" null="null" default="NULL" type="object" hint="LibXmlError">The libxml error associated to the exception.</param></params><comment>Initialize a new BadXMLException instance.</comment></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when an error concerning XML handling occurs.</comment></class><class name="CacheException" module="wee/cache" filename="wee/cache/CacheException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when a cache-related error occurs.</comment></class><class name="ComparisonTestException" module="wee/tests" filename="wee/tests/ComparisonTestException.class.php" startline="28" endline="79" parent="UnitTestException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" startline="50" endline="56" visibility="public"><params numrequired="3"><param name="mExpected" null="null" type="mixed">The expected value.</param><param name="mActual" null="null" type="mixed">The actual value returned by the test.</param><param name="sMessage" null="null" type="string">The message of the exception.</param></params><comment>Constructs a new ComparisonTestException.</comment></method><method name="__toString" visibility="public" internal="internal"/><method name="getActual" startline="64" endline="67" visibility="public"><return type="mixed">The actual value returned by the test.</return><comment>Returns the actual value returned by the test.</comment></method><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getExpected" startline="75" endline="78" visibility="public"><return type="mixed">The expected value.</return><comment>Returns the expected value.</comment></method><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="mActual" visibility="protected"><comment>The actual value returned by the test.</comment></property><property name="message" visibility="protected"/><property name="mExpected" visibility="protected"><comment>The expected value.</comment></property></properties><comment>Exception thrown when a comparison test fails in a unit test case.</comment></class><class name="ConfigurationException" module="wee/exceptions/runtime" filename="wee/exceptions/runtime/ConfigurationException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when a configuration requirement is not met.</comment></class><class name="DatabaseException" module="wee/exceptions/runtime" filename="wee/exceptions/runtime/DatabaseException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when there is a database error.</comment></class><class name="DoubleFaultException" module="wee/exceptions/logic" filename="wee/exceptions/logic/DoubleFaultException.class.php" startline="28" endline="30" parent="LogicException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown in the exception handling code.</comment></class><class name="EndOfFileException" module="wee/exceptions/runtime" filename="wee/exceptions/runtime/EndOfFileException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when an end of file is reached.</comment></class><class name="FileNotFoundException" module="wee/exceptions/logic" filename="wee/exceptions/logic/FileNotFoundException.class.php" startline="28" endline="30" parent="LogicException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when a required file is missing.</comment></class><class name="FirePHP" module="wee/vendor/FirePHPCore" filename="wee/vendor/FirePHPCore/FirePHP.class.php" startline="58" endline="1375"><consts><const name="VERSION" value="0.2.1"/><const name="LOG" value="LOG"/><const name="INFO" value="INFO"/><const name="WARN" value="WARN"/><const name="ERROR" value="ERROR"/><const name="DUMP" value="DUMP"/><const name="TRACE" value="TRACE"/><const name="EXCEPTION" value="EXCEPTION"/><const name="TABLE" value="TABLE"/><const name="GROUP_START" value="GROUP_START"/><const name="GROUP_END" value="GROUP_END"/></consts><methods><method name="__construct" startline="192" endline="197" visibility="public"><comment>The object constructor</comment></method><method name="__sleep" startline="204" endline="206" visibility="public"><comment>When the object gets serialized only include specific object members.
 
   * @return array</comment></method><method name="_escapeTrace" startline="748" endline="759" visibility="protected"><params numrequired="1"><param name="Trace" null="null"/></params><comment>Escape trace path for windows systems

   * @param array $Trace
   * @return array</comment></method><method name="_escapeTraceFile" startline="767" endline="777" visibility="protected"><params numrequired="1"><param name="File" null="null"/></params><comment>Escape file information of trace for windows systems

   * @param string $File
   * @return string</comment></method><method name="_standardizePath" startline="738" endline="740" visibility="protected"><params numrequired="1"><param name="Path" null="null"/></params><comment>Standardizes path for windows systems.

   * @param string $Path
   * @return string</comment></method><method name="detectClientExtension" startline="472" endline="479" visibility="public"><comment>Check if FirePHP is installed on client

   * @return boolean</comment></method><method name="dump" startline="438" endline="440" visibility="public"><params numrequired="2"><param name="Key" null="null"/><param name="Variable" null="null"/></params><comment>Dumps key and variable to firebug server panel

   * @see FirePHP::DUMP
   * @param string $Key
   * @param mixed $Variable
   * @return true
   * @throws Exception</comment></method><method name="encodeObject" startline="858" endline="988" visibility="protected"><params numrequired="1"><param name="Object" null="null"/><param name="ObjectDepth" null="null" default="1"/><param name="ArrayDepth" null="null" default="1"/></params><comment>Encodes an object including members with
 protected and private visibility
 
   * @param Object $Object The object to be encoded
   * @param int $Depth The current traversal depth
   * @return array All members of the object</comment></method><method name="encodeTable" startline="838" endline="848" visibility="protected"><params numrequired="1"><param name="Table" null="null"/></params><comment>Encodes a table by encoding each row and column with encodeObject()
 
   * @param array $Table The table to be encoded
   * @return array</comment></method><method name="error" startline="425" endline="427" visibility="public"><params numrequired="1"><param name="Object" null="null"/><param name="Label" null="null" default="NULL"/></params><comment>Log object with label to firebug console

   * @see FirePHP::ERROR
   * @param mixes $Object
   * @param string $Label
   * @return true
   * @throws Exception</comment></method><method name="errorHandler" startline="304" endline="314" visibility="public"><params numrequired="5"><param name="errno" null="null" type="exception"/><param name="errstr" null="null" type="exception"/><param name="errfile" null="null" type="exception"/><param name="errline" null="null" type="exception"/><param name="errcontext" null="null" type="exception"/></params><comment>FirePHP's error handler
 
 Throws exception for each php error that will occur.

   * @param int $errno
   * @param string $errstr
   * @param string $errfile
   * @param int $errline
   * @param array $errcontext</comment></method><method name="exceptionHandler" startline="332" endline="334" visibility="public"><params numrequired="1"><param name="Exception" null="null"/></params><comment>FirePHP's exception handler
 
 Logs all exceptions to your firebug console and then stops the script.

   * @param Exception $Exception
   * @throws Exception</comment></method><method name="fb" startline="489" endline="730" visibility="public"><params numrequired="1"><param name="Object" null="null"/></params><comment>Log varible to Firebug
 
   * @see http://www.firephp.org/Wiki/Reference/Fb
   * @param mixed $Object The variable to be logged
   * @return true Return TRUE if message was added to headers, FALSE otherwise
   * @throws Exception</comment></method><method name="getEnabled" startline="245" endline="247" visibility="public"><comment>Check if logging is enabled
 
   * @return boolean TRUE if enabled</comment></method><method name="getInstance" startline="214" endline="219" type="static" visibility="public"><params numrequired="0"><param name="AutoCreate" null="null" default="false"/></params><comment>Gets singleton instance of FirePHP

   * @param boolean $AutoCreate
   * @return FirePHP</comment></method><method name="getUserAgent" startline="794" endline="797" visibility="protected"><comment>Get user agent

   * @return string|false</comment></method><method name="group" startline="363" endline="365" visibility="public"><params numrequired="1"><param name="Name" null="null"/></params><comment>Start a group for following messages

   * @param string $Name
   * @return true
   * @throws Exception</comment></method><method name="groupEnd" startline="373" endline="375" visibility="public"><comment>Ends a group you have started before

   * @return true
   * @throws Exception</comment></method><method name="info" startline="399" endline="401" visibility="public"><params numrequired="1"><param name="Object" null="null"/><param name="Label" null="null" default="NULL"/></params><comment>Log object with label to firebug console

   * @see FirePHP::INFO
   * @param mixes $Object
   * @param string $Label
   * @return true
   * @throws Exception</comment></method><method name="init" startline="226" endline="228" type="static" visibility="public"><comment>Creates FirePHP object and stores it for singleton access

   * @return FirePHP</comment></method><method name="is_utf8" startline="996" endline="1020" type="static" visibility="protected"><params numrequired="1"><param name="str" null="null" type="string"/></params><comment>Returns true if $string is valid UTF-8 and false otherwise.

   * @param mixed $str String to be tested
   * @return boolean</comment></method><method name="json_encode" startline="1140" endline="1344" visibility="private"><params numrequired="1"><param name="var" null="null"/></params><comment>encodes an arbitrary variable into JSON format

  * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.
                           see argument 1 to Services_JSON() above for array-parsing behavior.
                           if var is a strng, note that encode() always expects it
                           to be in ASCII or UTF-8 format!

  * @return   mixed   JSON string representation of input var or an error if a problem occurs
  * @access   public</comment></method><method name="json_name_value" startline="1355" endline="1374" visibility="private"><params numrequired="2"><param name="name" null="null"/><param name="value" null="null"/></params><comment>array-walking function for use in generating JSON-formatted name-value pairs

  * @param    string  $name   name of key to use
  * @param    mixed   $value  reference to an array element to be encoded

  * @return   string  JSON-formatted name-value pair, like '&quot;name&quot;:value'
  * @access   private</comment></method><method name="json_utf82utf16" startline="1096" endline="1127" visibility="private"><params numrequired="1"><param name="utf8" null="null"/></params><comment>convert a string from one UTF-8 char to one UTF-16 char

 Normally should be handled by mb_convert_encoding, but
 provides a slower PHP-only method for installations
 that lack the multibye string extension.

  * @param    string  $utf8   UTF-8 character
  * @return   string  UTF-16 character
  * @access   private</comment></method><method name="jsonEncode" startline="817" endline="830" visibility="public"><params numrequired="1"><param name="Object" null="null"/><param name="skipObjectEncode" null="null" default="false" type="string"/></params><comment>Encode an object into a JSON string
 
 Uses PHP's jeson_encode() if available
 
   * @param object $Object The object to be encoded
   * @return string The JSON string</comment></method><method name="log" startline="386" endline="388" visibility="public"><params numrequired="1"><param name="Object" null="null"/><param name="Label" null="null" default="NULL"/></params><comment>Log object with label to firebug console

   * @see FirePHP::LOG
   * @param mixes $Object
   * @param string $Label
   * @return true
   * @throws Exception</comment></method><method name="newException" startline="805" endline="807" visibility="protected"><params numrequired="1"><param name="Message" null="null"/></params><comment>Returns a new exception

   * @param string $Message
   * @return Exception</comment></method><method name="registerErrorHandler" startline="283" endline="291" visibility="public"><comment>Register FirePHP as your error handler
 
 Will throw exceptions for each php error.</comment></method><method name="registerExceptionHandler" startline="319" endline="322" visibility="public"><comment>Register FirePHP as your exception handler</comment></method><method name="setEnabled" startline="236" endline="238" visibility="public"><params numrequired="1"><param name="Enabled" null="null"/></params><comment>Enable and disable logging to Firebug
 
   * @param boolean $Enabled TRUE to enable, FALSE to disable
   * @return void</comment></method><method name="setHeader" startline="785" endline="787" visibility="protected"><params numrequired="2"><param name="Name" null="null"/><param name="Value" null="null"/></params><comment>Send header

   * @param string $Name
   * @param string_type $Value</comment></method><method name="setObjectFilter" startline="258" endline="260" visibility="public"><params numrequired="2"><param name="Class" null="null"/><param name="Filter" null="null"/></params><comment>Specify a filter to be used when encoding an object
 
 Filters are used to exclude object members.
 
   * @param string $Class The class name of the object
   * @param array $Filter An array or members to exclude
   * @return void</comment></method><method name="setOptions" startline="274" endline="276" visibility="public"><params numrequired="1"><param name="Options" null="null"/></params><comment>Set some options for the library
 
 Options:
  - maxObjectDepth: The maximum depth to traverse objects (default: 10)
  - maxArrayDepth: The maximum depth to traverse arrays (default: 20)
  - useNativeJsonEncode: If true will use json_encode() (default: true)
  - includeLineNumbers: If true will include line numbers and filenames (default: true)
 
   * @param array $Options The options to be set
   * @return void</comment></method><method name="setProcessorUrl" startline="341" endline="344" visibility="public"><params numrequired="1"><param name="URL" null="null"/></params><comment>Set custom processor url for FirePHP

   * @param string $URL</comment></method><method name="setRendererUrl" startline="351" endline="354" visibility="public"><params numrequired="1"><param name="URL" null="null"/></params><comment>Set custom renderer url for FirePHP

   * @param string $URL</comment></method><method name="table" startline="463" endline="465" visibility="public"><params numrequired="2"><param name="Label" null="null"/><param name="Table" null="null"/></params><comment>Log a table in the firebug console

   * @see FirePHP::TABLE
   * @param string $Label
   * @param string $Table
   * @return true
   * @throws Exception</comment></method><method name="trace" startline="450" endline="452" visibility="public"><params numrequired="1"><param name="Label" null="null"/></params><comment>Log a trace in the firebug console

   * @see FirePHP::TRACE
   * @param string $Label
   * @return true
   * @throws Exception</comment></method><method name="warn" startline="412" endline="414" visibility="public"><params numrequired="1"><param name="Object" null="null"/><param name="Label" null="null" default="NULL"/></params><comment>Log object with label to firebug console

   * @see FirePHP::WARN
   * @param mixes $Object
   * @param string $Label
   * @return true
   * @throws Exception</comment></method></methods><properties><property name="enabled" visibility="protected"><comment>Flag to enable/disable logging
 
   * @var boolean</comment></property><property name="instance" visibility="protected" static="static"><comment>Singleton instance of FirePHP

   * @var FirePHP</comment></property><property name="json_objectStack" visibility="private"><comment>Keep a list of objects as we descend into the array so we can detect recursion.</comment></property><property name="messageIndex" visibility="protected"><comment>Wildfire protocol message index

   * @var int</comment></property><property name="objectFilters" visibility="protected"><comment>Filters used to exclude object members when encoding
 
   * @var array</comment></property><property name="objectStack" visibility="protected"><comment>A stack of objects used to detect recursion during object encoding
 
   * @var object</comment></property><property name="options" visibility="protected"><comment>Options for the library
 
   * @var array</comment></property></properties><comment>Sends the given data to the FirePHP Firefox Extension.
 The data can be displayed in the Firebug Console or in the
 &quot;Server&quot; request tab.
 
 For more information see: http://www.firephp.org/
 
 * @copyright   Copyright (C) 2007-2008 Christoph Dorn
 * @author      Christoph Dorn &lt;christoph@christophdorn.com&gt;
 * @license     http://www.opensource.org/licenses/bsd-license.php
 * @package     FirePHP</comment></class><class name="FormValidationException" module="wee/form" filename="wee/form/FormValidationException.class.php" startline="28" endline="84" parent="RuntimeException"><implements><implement>Mappable</implement><implement>Printable</implement></implements><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="addError" startline="43" endline="46" visibility="public"><params numrequired="2"><param name="sWidget" null="null" type="string">The name of the widget where the error occured.</param><param name="sMsg" null="null" type="string">The error message.</param></params><comment>Add an error associated to the given widget.</comment></method><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/><method name="hasErrors" startline="52" endline="55" visibility="public"><comment>Return whether any error was given.</comment></method><method name="toArray" startline="63" endline="66" visibility="public"><return type="array">The errors as an array.</return><comment>Return all the errors as an array.</comment></method><method name="toString" startline="74" endline="83" visibility="public"><return type="string">The errors as a string.</return><comment>Return all the errors as a line break separated string.</comment></method></methods><properties><property name="aErrors" visibility="protected"><comment>Error messages for each widgets of the form.</comment></property><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when a form validation fails.</comment></class><class name="IllegalStateException" module="wee/exceptions/logic" filename="wee/exceptions/logic/IllegalStateException.class.php" startline="28" endline="30" parent="LogicException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when a method is called and the object isn't in the right state (example: not initialized).</comment></class><class name="LDAPException" module="wee/ldap" filename="wee/ldap/LDAPException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when there is a ldap error.</comment></class><class name="Mappable" module="wee" filename="wee/wee.php" startline="378" endline="381" type="interface"><methods><method name="toArray" startline="380" endline="380" type="abstract" visibility="public"/></methods><comment>Interface for mappable objects.
Mappable are objects that can be mapped to an array using the toArray method.</comment></class><class name="NotPermittedException" module="wee/exceptions/runtime" filename="wee/exceptions/runtime/NotPermittedException.class.php" startline="28" endline="30" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when permission requirements are not met.</comment></class><class name="Printable" module="wee" filename="wee/wee.php" startline="390" endline="393" type="interface"><methods><method name="toString" startline="392" endline="392" type="abstract" visibility="public"/></methods><comment>Interface for printable objects.
Printable objects are objects that can be converted to string using the toString method.

We have to use this instead of __toString since we can't throw any exception in __toString...</comment></class><class name="RouteNotFoundException" module="wee/app" filename="wee/app/RouteNotFoundException.class.php" startline="28" endline="29" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception used when the route cannot be found.</comment></class><class name="SkipTestException" module="wee/tests" filename="wee/tests/SkipTestException.class.php" startline="30" endline="32" parent="Exception"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when an unit test is skipped.
Test can be skipped when all conditions required to run the test
are not fulfilled. Example: impossible to connect to a database.</comment></class><class name="UnauthorizedAccessException" module="wee/app" filename="wee/app/UnauthorizedAccessException.class.php" startline="28" endline="29" parent="NotPermittedException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception used to denote an unauthorized access to a frame/event.</comment></class><class name="UnhandledTypeException" module="wee/db/meta" filename="wee/db/meta/UnhandledTypeException.class.php" startline="28" endline="29" parent="RuntimeException"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when dbmeta encounters a type which it does not know how to handle it.</comment></class><class name="UnitTestException" module="wee/tests" filename="wee/tests/UnitTestException.class.php" startline="28" endline="30" parent="Exception"><methods><method name="__clone" type="final" visibility="private" internal="internal"/><method name="__construct" visibility="public" internal="internal"><params numrequired="0"><param name="message"/><param name="code"/></params></method><method name="__toString" visibility="public" internal="internal"/><method name="getCode" type="final" visibility="public" internal="internal"/><method name="getFile" type="final" visibility="public" internal="internal"/><method name="getLine" type="final" visibility="public" internal="internal"/><method name="getMessage" type="final" visibility="public" internal="internal"/><method name="getTrace" type="final" visibility="public" internal="internal"/><method name="getTraceAsString" type="final" visibility="public" internal="internal"/></methods><properties><property name="code" visibility="protected"/><property name="file" visibility="protected"/><property name="line" visibility="protected"/><property name="message" visibility="protected"/></properties><comment>Exception thrown when an unit test fails.</comment></class><class name="weeAPC" module="wee/cache" filename="wee/cache/weeAPC.class.php" startline="30" endline="194"><implements><implement>ArrayAccess</implement><implement>weeCache</implement></implements><sees><see>http://php.net/apc</see></sees><methods><method name="__construct" startline="46" endline="48" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">Parameters used to configure the driver.</param></params><comment>Initialize the cache driver.
The APC caching driver has no parameter.</comment></method><method name="clear" startline="54" endline="60" visibility="public"><comment>Clear the cache.</comment></method><method name="create" startline="70" endline="76" visibility="public"><params numrequired="2"><param name="sKey" null="null" type="string">The key to create.</param><param name="mValue" null="null" type="mixed">The value that will be cached.</param><param name="iTTL" null="null" type="int">Time to live, in seconds.</param></params><comment>Store a value only if it doesn't already exists and fail otherwise.</comment></method><method name="getMulti" startline="85" endline="97" visibility="public"><params numrequired="1"><param name="aKeys" null="null" type="array">The keys to retrieve.</param></params><return type="array">The associative array containing the values retrieved.</return><comment>Retrieve multiple keys simultaneously.</comment></method><method name="offsetExists" startline="107" endline="121" visibility="public"><params numrequired="1"><param name="sKey" null="null" type="string">The key to check.</param></params><return type="bool">Whether the key exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether the key exists in the cache.</comment></method><method name="offsetGet" startline="131" endline="149" visibility="public"><params numrequired="1"><param name="sKey" null="null" type="string">The key to retrieve.</param></params><return type="mixed">Value retrieved from the cache.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Retrieve the value for the given key.</comment></method><method name="offsetSet" startline="159" endline="162" visibility="public"><params numrequired="2"><param name="sKey" null="null" type="string">The key to store.</param><param name="mValue" null="null" type="mixed">The value that will be cached.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Store a value. Overwrite the existing one if any.</comment></method><method name="offsetUnset" startline="171" endline="177" visibility="public"><params numrequired="1"><param name="sKey" null="null" type="string">The key to delete.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Delete a key.</comment></method><method name="store" startline="187" endline="193" visibility="public"><params numrequired="2"><param name="sKey" null="null" type="string">The key to store.</param><param name="mValue" null="null" type="mixed">The value that will be cached.</param><param name="iTTL" null="null" type="int">Time to live, in seconds.</param></params><comment>Store a value. Overwrite the existing one if any.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>Process-specific cache. All operations are cached
in this array to prevent querying the cache if not necessary.</comment></property></properties><comment>APC caching driver.</comment></class><class name="weeApplication" module="wee/app" filename="wee/app/weeApplication.class.php" startline="39" endline="452"><methods><method name="__clone" startline="129" endline="131" type="final" visibility="private"><comment>Because there can only be one application object, we disable cloning.</comment></method><method name="__construct" startline="71" endline="123" visibility="protected"><comment>Load the configuration file WEE_CONF_FILE and initialize
automatically the various components of the application.</comment></method><method name="__get" startline="140" endline="153" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string"/></params><return type="object">The driver object</return><comment>Return the given driver. The driver will first be loaded if it wasn't yet.</comment></method><method name="cnf" startline="162" endline="165" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">Name of the configuration parameter</param></params><return type="mixed">Value of this configuration parameter</return><comment>Get a configuration value.</comment></method><method name="cnfArray" startline="178" endline="189" visibility="public"><params numrequired="1"><param name="sPattern" null="null" type="string">Pattern to look for.</param></params><return type="array">Array containing the resulting matches.</return><comment>Get all matching configuration values.

This method lets you get an array from the configuration file.
The match is done on the beginning of the name path. As an example,
if you need to retrieve all db.* values, you would pass 'db' as parameter.</comment></method><method name="dispatchEvent" startline="207" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Dispatch an event to its respective frame.

Event information can contain the following parameters:
	* context: either cli, http or xmlhttprequest
	* frame: name of the destination frame
	* method: request method used to access the event (e.g. get, post)
	* name: name of the event
	* get: $_GET array for this event
	* post: $_POST array for this event
	* pathinfo: the PATH_INFO if any
	* noframechange: if defined and true, the frame of this event won't be displayed</comment></method><method name="getFrame" startline="223" endline="226" visibility="public"><return type="weeFrame">The frame being processed</return><comment>Returns the frame currently being processed.</comment></method><method name="getPathInfo" startline="236" endline="276" type="static" visibility="public"><return type="string">The path information</return><comment>Returns the path information with some path translation.
The path information is the text after the file and before the query string in an URI.
Example: http://example.com/my.php/This_is_the_path_info/Another_level/One_more?query_string</comment></method><method name="instance" startline="286" endline="301" type="static" visibility="public"><return type="weeApplication">The weeApplication object for this process</return><comment>Returns an instance of the weeApplication singleton.

At the time of the first call of this method, a shortcut function to this method called weeApp is created.</comment></method><method name="loadFrame" startline="311" endline="317" visibility="protected"><params numrequired="1"><param name="sFrame" null="null" type="string">Frame's class name</param></params><return type="weeFrame">The frame created</return><throws><throw>UnexpectedValueException	The frame class does not exist or is not a subclass of weeFrame</throw></throws><comment>Load and initialize the specified frame.</comment></method><method name="main" startline="327" endline="344" visibility="public"><comment>Entry point for a wee application.

It translates the event sent by the browser,
then dispatch it to the frame and finally
orders the frame to render the resulting view.</comment></method><method name="translateEvent" startline="353" endline="402" visibility="protected"><return type="array">Event information</return><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Translate the event sent by the browser.</comment></method><method name="translateRoute" startline="425" endline="451" visibility="protected"><params numrequired="2"><param name="sPathInfo" null="null" type="string">The pathinfo before routing</param><param name="aGet" ref="ref" null="null" type="array">The GET array this method will write to if additional parameters are found after translating</param></params><return type="string">The pathinfo after the routing translation</return><comment>Apply custom routing.

All the routes defined in the configuration file are tested in their given order.
The translated route is returned as soon as there is a match.

Note that this method is not called if the pathinfo is empty.

If there is a new query string as a result of the custom routing,
we parse it and add its values to the $aGet array.
Note that values already present in the $aGet array will be overwritten
if they share the same name as these new parameters

A RouteNotFoundException is thrown when the route cannot be found
and the configuration variable 'routing.strict' is true.</comment></method></methods><properties><property name="aConfig" visibility="protected"><comment>Configuration for this application.</comment></property><property name="aDrivers" visibility="protected"><comment>Drivers loaded by the application.</comment></property><property name="oFrame" visibility="protected"><comment>The frame object that will be displayed.</comment></property><property name="oSingleton" visibility="protected" static="static"><comment>Instance of the current singleton.
There can only be one.</comment></property></properties><comment>Main class of a wee application.

This class basically translate events and redirect them.
It also loads a configuration file and acts as a central point
for various application components, like database and session.</comment></class><class name="weeAtomFeed" module="wee/feed" filename="wee/feed/weeAtomFeed.class.php" startline="28" endline="157" parent="weeFeed"><implements><implement>Printable</implement></implements><methods><method name="__call" filename="wee/feed/weeFeed.class.php" startline="61" endline="71" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string"/><param name="aArgs" null="null" type="array"/></params><overloads><overload func="author($aAuthor">Sets the feed author informations. The array can(TODO) have the following keys: name, email and TODO:uri.</overload><overload func="category($sCategory">Sets the category for all entries.</overload><overload func="link($sURL">Sets the link to the corresponding entry. TODO:check url</overload><overload func="logo($sIRI TODO:IRI">Sets the logo location.</overload><overload func="rights($sCopyright">Sets the feed copyright.</overload><overload func="subtitle($sSubTitle">Sets a small descriptive subtitle.</overload><overload func="title($sTitle">Sets the feed title.</overload><overload func="updated($sDate">Sets the feed build date. TODO:format</overload></overloads><comment>A few elements are required for each feed.
The following overloaded functions are defined for all the feed classes.

TODO:id
TODO:generator?</comment></method><method name="create" startline="36" endline="39" type="static" visibility="public"><return type="weeAtomFeed">A new weeAtomFeed object.</return><comment>Convenience function for creating atom feeds in one line.</comment></method><method name="encodeIRI" startline="108" endline="114" visibility="public"><params numrequired="1"><param name="sIRI" null="null" type="string">Unencoded IRI address.</param></params><return type="string">Encoded IRI address.</return><comment>Encode the IRI address.</comment></method><method name="entries" filename="wee/feed/weeFeed.class.php" startline="80" endline="86" visibility="public"><params numrequired="1"><param name="aEntries" null="null" type="array">The entries to add.</param></params><return type="$this"/><comment>Adds multiple entries.</comment></method><method name="entry" filename="wee/feed/weeFeed.class.php" startline="106" endline="117" visibility="public"><params numrequired="1"><param name="aEntry" null="null" type="array">The entry data.</param></params><return type="$this"/><comment>Adds an entry.

Each entry can have one of the following keys:
	* author
	* category
	* link
	* summary
	* title
	* updated
	* TODO:id

//TODO:validates each entry elements</comment></method><method name="isElementValid" filename="wee/feed/weeFeed.class.php" startline="126" endline="141" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given feed-related element is valid.</comment></method><method name="isEntryElementValid" filename="wee/feed/weeFeed.class.php" startline="150" endline="163" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given entry-related element is valid.</comment></method><method name="render" startline="121" endline="125" visibility="public"><comment>Output the feed as application/atom+xml.
This method sends the required header automatically.</comment></method><method name="toString" startline="133" endline="156" visibility="public"><return type="string">The XML for this feed.</return><comment>Returns the feed in XML format.</comment></method><method name="writeElement" startline="52" endline="99" visibility="protected"><params numrequired="3"><param name="oXMLWriter" type="object" hint="XMLWriter"/><param name="sName" null="null" type="string">The name of the element.</param><param name="mValue" null="null" type="mixed"/></params><return type="string">The XML element created according to the given name.</return><comment>Converts an element to its XML equivalent.
Called when generating the feed's XML.


TODO:there must be a better way for this</comment></method></methods><properties><property name="aEntries" visibility="protected"><comment>Contains the entry-related data.
Each element of this array is an entry.</comment></property><property name="aFeed" visibility="protected"><comment>Contains the feed-related data.</comment></property></properties><comment>Class for Atom feeds generation.</comment></class><class name="weeAuth" module="wee/auth" filename="wee/auth/weeAuth.class.php" startline="28" endline="92" type="abstract"><methods><method name="__construct" startline="45" endline="54" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">List of parameters to authenticate against.</param></params><comment>Create a new weeAuth object and stores the paramters.

Parameters:
	* hash_treatment: The callback to use to hash passwords stored client-side. Defaults to 'sha1'.</comment></method><method name="authenticate" startline="63" endline="63" type="abstract" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="array">Data retrieved while authenticating. Contents depends on the driver.</return><comment>Authenticate using the provided credentials.</comment></method><method name="authenticateHash" startline="75" endline="75" type="abstract" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="array">Data retrieved while authenticating. Contents depends on the driver.</return><comment>Authenticate using the provided credentials.
The provided password was previously hashed using weeAuth::hash.

Use this function along with weeAuth::hash when you need to store credentials client-side.</comment></method><method name="hash" startline="84" endline="91" visibility="public"><params numrequired="1"><param name="sPassword" null="null" type="string">Password to be hashed.</param></params><return type="string">Hashed password.</return><comment>Hash a password in order to store it client-side.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Contains the target for authentication along with any other parameter.</comment></property></properties><comment>Base class for authentication mechanisms.</comment></class><class name="weeAuthDbTable" module="wee/auth" filename="wee/auth/weeAuthDbTable.class.php" startline="28" endline="150" parent="weeAuth"><methods><method name="__construct" startline="44" endline="62" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">List of parameters to authenticate against.</param></params><comment>Create a new weeAuthDbTable object and stores the paramters.

Parameters:
	* db:					The weeDatabase object to authenticate against.
	* table:				The table containing the credentials to authenticate against.
	* identifier_field:		The field containing the identifiers.
	* password_field:		The field containing the passwords hashed with 'password_treatment'.
	* password_treatment:	The callback applied to each passwords stored in the 'password_field' field. Defaults to 'sha1'.
	* hash_treatment:		The callback to use to hash passwords stored client-side. Defaults to 'sha1'.</comment></method><method name="authenticate" startline="75" endline="97" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="array">Data retrieved while authenticating. Contains the whole row retrieved from the database.</return><comment>Authenticate using the provided credentials.

Parameters:
	* identifier:	The credentials identifier (like an username or an email).
	* password:		The credentials password.</comment></method><method name="authenticateHash" startline="113" endline="138" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="array">Data retrieved while authenticating. Contains the whole row retrieved from the database.</return><comment>Authenticate using the provided credentials.
The provided password was previously hashed using weeAuth::hash.

Use this function along with weeAuth::hash when you need to store credentials client-side.

Parameters:
	* identifier:	The credentials identifier (like an username or an email).
	* password:		The credentials password.</comment></method><method name="getDb" startline="146" endline="149" visibility="public"><return type="weeDatabase">The database associated to this authentication driver.</return><comment>Returns the database associated to this authentication driver.</comment></method><method name="hash" filename="wee/auth/weeAuth.class.php" startline="84" endline="91" visibility="public"><params numrequired="1"><param name="sPassword" null="null" type="string">Password to be hashed.</param></params><return type="string">Hashed password.</return><comment>Hash a password in order to store it client-side.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Contains the target for authentication along with any other parameter.</comment></property></properties><comment>Authentication mechanisms against a table stored in a database.</comment></class><class name="weeAuthLDAP" module="wee/auth" filename="wee/auth/weeAuthLDAP.class.php" startline="28" endline="123" parent="weeAuth"><methods><method name="__construct" startline="41" endline="49" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">List of parameters to authenticate against.</param></params><comment>Create a new weeAuthLDAP object and store the paramters.

Parameters:
	* ldap: The weeLDAP object getted after authentication to the LDAP server.
	* base_dn: The base DN for making search.
	* hash_treatment: The callback to use to hash passwords stored client-side. Defaults to 'sha1'.</comment></method><method name="authenticate" startline="62" endline="84" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="weeLDAPEntry">Data retrieved while authenticating. Contains the attributes and values of the specified cn.</return><comment>Authenticate using the provided credentials.

Parameters:
	* identifier:	The credentials identifier (cn).
	* password:		The credentials password.</comment></method><method name="authenticateHash" startline="100" endline="122" visibility="public"><params numrequired="1"><param name="aCredentials" null="null" type="array">Credentials used for authentication.</param></params><return type="weeLDAPEntry">Data retrieved while authenticating. Contains the attributes and values of the specified cn.</return><comment>Authenticate using the provided credentials.
The provided password was previously hashed using weeAuth::hash.

Use this function along with weeAuth::hash when you need to store credentials client-side.

Parameters:
	* identifier: The credentials identifier (cn).
	* password: The credentials password.</comment></method><method name="hash" filename="wee/auth/weeAuth.class.php" startline="84" endline="91" visibility="public"><params numrequired="1"><param name="sPassword" null="null" type="string">Password to be hashed.</param></params><return type="string">Hashed password.</return><comment>Hash a password in order to store it client-side.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Contains the target for authentication along with any other parameter.</comment></property></properties><comment>Authentication for LDAP servers.</comment></class><class name="weeAutoload" module="wee" filename="wee/weeAutoload.class.php" startline="43" endline="142" type="final"><methods><method name="__construct" startline="62" endline="64" visibility="private"><comment>Namespace.</comment></method><method name="addPath" startline="80" endline="95" type="static" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The path to autoload from.</param></params><comment>Adds a path to autoload from.

You must tell weeAutoload which paths contains the files to autoload.
This function will stores all the filenames ending with CLASS_EXT, for later use.

When the path is already loaded, this function will not reload it.
If you are in a development environment and the cache is activated
(by defining WEE_AUTOLOAD_CACHE) in your project, you can make the
WEE_AUTOLOAD_CACHE file read-protected to prevent the use of the cache.</comment></method><method name="loadClass" startline="104" endline="108" type="static" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class to autoload.</param></params><comment>Autoloads the specified class, if it's in the autoload paths.
You should never need to call this function yourself.</comment></method><method name="loadFromCache" startline="117" endline="120" type="static" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">The autoload cache filename.</param></params><comment>Load the autoload data from the specified cache file.
Overwrites any existing autoload data.</comment></method><method name="saveToCache" startline="131" endline="141" type="static" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">The autoload cache filename.</param></params><comment>Save the autoload data to the specified cache file.

The cache file is just PHP code that will get executed at load.
It contains code to set the values to weeAutoload::$aPaths and weeAutoload::$aPathsLoaded.</comment></method></methods><properties><property name="aPaths" visibility="protected" static="static"><comment>Maps all the classes to their filenames.</comment></property><property name="aPathsLoaded" visibility="protected" static="static"><comment>List of paths already loaded.
Contains the $sPath argument given to weeAutoload::addPath.</comment></property></properties><comment>Namespace for class autoloading.

When using caching by configuring WEE_AUTOLOAD_CACHE, please ensure that you give
the complete path to the file, as the file is saved in a shutdown function and
under certain servers (e.g. Apache), the working directory can change at that point.

For example, instead of using:
{{{
define('WEE_AUTOLOAD_CACHE', 'app/tmp/autoload.php');
}}}
Use:
{{{
define('WEE_AUTOLOAD_CACHE', getcwd() . '/app/tmp/autoload.php');
}}}

The cache file is disabled in DEBUG mode.</comment></class><class name="weeBigNumberValidator" module="wee/validators" filename="wee/validators/weeBigNumberValidator.class.php" startline="40" endline="252" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="71" endline="93" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><throws><throw>DomainException				The `format` argument is invalid.</throw><throw>DomainException				The `max` argument is invalid.</throw><throw>DomainException				The `min` argument is invalid.</throw><throw>InvalidArgumentException	The `min` and `max` arguments do not form a valid number range.</throw></throws><comment>Initialises a new number validator.</comment></method><method name="compare" startline="106" endline="153" visibility="protected"><params numrequired="2"><param name="sLeft" null="null" type="string">The left value.</param><param name="sRight" null="null" type="string">The right value.</param></params><return type="int">The result of the comparison.</return><comment>Compares two big numbers.

Returns an integer negative if $mLeft is less than $mRight, positive if $mLeft is greater
than $mRight and 0 if $mLeft and $mRight are equal.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="162" endline="192" visibility="protected"><params numrequired="1"><param name="sInput" null="null" type="string">The input.</param></params><return type="bool">Whether the given input is a valid number.</return><comment>Returns whether a given input is a valid number.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="204" endline="219" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="229" endline="233" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="239" endline="251" visibility="protected"><comment>Validates a number.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A big number validator.

Otherwise the comparisons for the `min` and `max` parameters will be performed using
string functions.

This validator accepts the following arguments:
 * format:			The format of the number to validate, can be either 'int' or 'float', defaults to 'int'.
 * int_error:		The error message used if not a valid integer representation and the requested `format` is 'int'.
 * max:				The upper bound of the range of the valid numbers.
 * max_error:		The error message used if the number is greater than the `max` argument.
 * min:				The lower bound of the range of the valid numbers.
 * min_error:		The error message used if the number is smaller than the `min` argument.
 * invalid_error:	The error message used if the input is not numeric.</comment></class><class name="weeBreadcrumbsUI" module="wee/ui" filename="wee/ui/weeBreadcrumbsUI.class.php" startline="30" endline="90" parent="weeUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><sees><see>http://developer.yahoo.com/ypatterns/pattern.php?pattern=breadcrumbs</see></sees><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="defaultEvent" startline="51" endline="63" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Sets a default path based on the request received if none were provided,
and then sends the path to the template.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeUI.class.php" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" filename="wee/ui/weeUI.class.php" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" filename="wee/ui/weeUI.class.php" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setPath" startline="74" endline="89" visibility="public"><params numrequired="1"><param name="mPath" null="null" type="mixed"/></params><comment>Sets the path rendered by the breadcrumbs UI component.

The path can either be an array of 'URI' =&gt; 'label' pairs,
or a path string like 'this/is/a/breadcrumbs/path'.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aPath" visibility="protected"><comment>Breadcrumbs path as an array of 'URI' =&gt; 'label'.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Breadcrumbs UI frame.</comment></class><class name="weeCache" module="wee/cache" filename="wee/cache/weeCache.class.php" startline="28" endline="72" type="interface"><implements><implement>ArrayAccess</implement></implements><methods><method name="__construct" startline="36" endline="36" type="abstract" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">Parameters used to configure the driver.</param></params><comment>Initialize the cache driver.</comment></method><method name="clear" startline="42" endline="42" type="abstract" visibility="public"><comment>Clear the cache.</comment></method><method name="create" startline="52" endline="52" type="abstract" visibility="public"><params numrequired="2"><param name="sKey" null="null" type="string">The key to create.</param><param name="mValue" null="null" type="mixed">The value that will be cached.</param><param name="iTTL" null="null" type="int">Time to live, in seconds.</param></params><comment>Store a value only if it doesn't already exists and fail otherwise.</comment></method><method name="getMulti" startline="61" endline="61" type="abstract" visibility="public"><params numrequired="1"><param name="aKeys" null="null" type="array">The keys to retrieve.</param></params><return type="array">The associative array containing the values retrieved.</return><comment>Retrieve multiple keys simultaneously.</comment></method><method name="offsetExists" type="abstract" visibility="public" internal="internal"><params numrequired="1"><param name="offset"/></params></method><method name="offsetGet" type="abstract" visibility="public" internal="internal"><params numrequired="1"><param name="offset"/></params></method><method name="offsetSet" type="abstract" visibility="public" internal="internal"><params numrequired="2"><param name="offset"/><param name="value"/></params></method><method name="offsetUnset" type="abstract" visibility="public" internal="internal"><params numrequired="1"><param name="offset"/></params></method><method name="store" startline="71" endline="71" type="abstract" visibility="public"><params numrequired="2"><param name="sKey" null="null" type="string">The key to store.</param><param name="mValue" null="null" type="mixed">The value that will be cached.</param><param name="iTTL" null="null" type="int">Time to live, in seconds.</param></params><comment>Store a value. Overwrite the existing one if any.</comment></method></methods><comment>Interface for caching drivers.</comment></class><class name="weeConfigFile" module="wee/app" filename="wee/app/weeConfigFile.class.php" startline="30" endline="276"><implements><implement>Mappable</implement></implements><sees><see>share/conf/sample.cnf for an example configuration file</see></sees><methods><method name="__construct" startline="52" endline="55" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">Path and filename to the configuration file</param></params><comment>Load the specified configuration file.</comment></method><method name="getIncludeFilename" startline="68" endline="79" visibility="protected"><params numrequired="1"><param name="sPath" null="null" type="string">The path of the configuration file.</param></params><return type="string">The filename of the configuration file.</return><comment>Return the filename of the configuration file which is to be included.

If the path of the configuration file begins with {{{ &quot;//&quot; }}} the path is relative to ROOT_PATH,
if it begins with &quot;./&quot;, then it is relative to the current file being parsed,
otherwise the standard behaviour is adopted, working directory being the one of the process.</comment></method><method name="getTargetFunctions" startline="87" endline="99" visibility="protected"><return type="array">The table of the functions supported by the class in targets.</return><comment>Return the table of target functions.</comment></method><method name="isTargetedSystem" startline="125" endline="191" visibility="protected"><params numrequired="1"><param name="sInstruction" null="null" type="string">The 'instruction' string</param></params><return type="bool">Whether this system is the targeted system</return><todos><todo>More targets</todo></todos><warnings><warning>The function name must not have spaces</warning></warnings><comment>Check if the system targeted is the same as the one currently used.

Configuration lines can begin with a $(instruction). command.
The 'instruction' is a list of words, following this schema:
	* function [param1] [param2] [...] target

With function one of these:
	* os:		Operating System name, e.g. NetBSD.
	* host:	Hostname, like localhost.example.com.
	* phpver:	PHP version.
	* extver:	PHP extension version. Needs one parameter: the extension's name.
	* sapi:	Type of interface between web server and PHP.

And target is the value wanted.

If you need to group some words to form the parameters, surround them with double quotes.</comment></method><method name="parseFile" startline="199" endline="216" visibility="protected"><params numrequired="1"><param name="sFilename" null="null" type="string">Path and filename to the configuration file.</param></params><comment>Parse the specified configuration file.</comment></method><method name="parseLine" startline="224" endline="264" visibility="protected"><params numrequired="1"><param name="sLine" null="null" type="string">The configuration line.</param></params><comment>Parse a configuration line.</comment></method><method name="toArray" startline="272" endline="275" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeConfigFile to retrieve the array's data.</comment></method></methods><properties><property name="aConfig" visibility="protected"><comment>Contains the configuration data.</comment></property><property name="aFilesStack" visibility="protected"><comment>The stack of the files being currently parsed.

Used to .include other configuration files inside themselves.</comment></property></properties><comment>Loader of Web:Extend's .cnf configuration files.</comment></class><class name="weeConfirmValidator" module="wee/validators" filename="wee/validators/weeConfirmValidator.class.php" startline="37" endline="103" parent="weeFormValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="56" endline="63" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><throws><throw>InvalidArgumentException	The argument `with` is missing.</throw></throws><comment>Initialises a new option validator.

$mValue must be either a scalar, an instance of Printable or an object castable to string.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="72" endline="75" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed">The input.</param></params><return type="bool">Whether the given value is confirmed.</return><comment>Returns whether the given value is confirmed in the form data.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setFormData" filename="wee/validators/weeFormValidator.class.php" startline="67" endline="75" visibility="public"><params numrequired="2"><param name="oWidget" type="object" hint="SimpleXMLElement">The widget to validate.</param><param name="aData" type="array" hint="array">The data to check, if applicable.</param></params><throws><throw>IllegalStateException	The validator has already been attached to a form widget.</throw></throws><todos><todo>Check that the given SimpleXMLElement is a 'widget' element.</todo></todos><comment>Sets the widget and complete data passed to the weeForm object.
Usually either $_POST or $_GET.</comment></method><method name="setValue" startline="87" endline="102" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attaches a value to the validator.

$mValue must be either a scalar, an instance of Printable or an object castable to string.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" filename="wee/validators/weeFormValidator.class.php" startline="48" endline="55" visibility="public"><throws><throw>IllegalStateException	The validator is not attached to a form widget.</throw></throws><comment>Validates the given input.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aData" visibility="protected"><comment>The data of the form.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="oWidget" visibility="protected"><comment>The widget to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A form confirmation validator.

This validator checks if the value given match the value of the confirmation element.

Useful to check if a password entered when registering is valid, for example.
The user types it two times, and this validator checks if it's correctly entered.

This validator accepts the following arguments:
 * invalid_error:	The error message used if the input is not confirmed in the form data.
 * with:			The name of the widget which value must be confirmed by the validator (mandatory).</comment></class><class name="weeContainerUI" module="wee/ui" filename="wee/ui/weeContainerUI.class.php" startline="34" endline="163" parent="weeUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><todos><todo>eventTaconite</todo></todos><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="addFrame" startline="59" endline="67" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string">Identifier for the given frame.</param><param name="oFrame" null="null" type="object">Frame to be added to the container.</param></params><comment>Add an UI frame to the container.

Keep in mind though that if the frame doesn't implement weeFailSafeRouting,
there might be an exception triggered when the event doesn't exist in it.</comment></method><method name="child" startline="76" endline="79" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">Identifier for the given frame.</param></params><return type="weeUI">UI frame.</return><comment>Return a child UI frame.</comment></method><method name="defaultEvent" startline="87" endline="93" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Dispatch the event to all contained frames before sending them to the template.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getChildIdPrefix" startline="101" endline="104" visibility="protected"><return type="Prefix">for child frame identifiers.</return><comment>Return the prefix for the child frame identifiers.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" startline="112" endline="129" visibility="public"><comment>Return the taconite object for this frame and all its children.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noChildTaconite" startline="136" endline="140" visibility="public"><comment>Tells the child frames to not use taconite.
Use this when you want to return the rendered template in your taconite response.</comment></method><method name="noTaconite" startline="146" endline="150" visibility="public"><comment>Tells this frame and all its children to not use taconite.</comment></method><method name="render" startline="156" endline="162" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aFrames" visibility="protected"><comment>List of frames this container handles.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.
If not defined its value will be the name of the frame's class.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Container UI frame.

This class is to be used as the parent class for frames that use UI components.
It implements mechanisms to redirect events to all UI frames that can then be
rendered directly in the template.</comment></class><class name="weeCookies" module="wee/http" filename="wee/http/weeCookies.class.php" startline="31" endline="159"><implements><implement>ArrayAccess</implement></implements><methods><method name="__construct" startline="48" endline="51" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">A list of parameters to configure the cookies class.</param></params><comment>Initialize the cookies class.

An optional single parameter is allowed:
* path: cookie path used when setting or deleting the cookies</comment></method><method name="getDefaultPath" startline="63" endline="79" visibility="protected"><return type="Default">cookie path.</return><todos><todo>This might be nice at a later time to just have APP_PATH use this form and use it directly.</todo></todos><comment>Return the default cookie path.

This method will return APP_PATH if a custom APP_PATH has been defined.
Otherwise it will return the full path to the application.</comment></method><method name="offsetExists" startline="89" endline="92" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Return whether offset exists.</comment></method><method name="offsetGet" startline="102" endline="107" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="mixed">Value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Return value at given offset.</comment></method><method name="offsetSet" startline="121" endline="124" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Send a cookie to the browser.

This aliases weeCookies::set with a default 3rd parameter.
This do NOT add the value directly in the cookies array.
The value is only accessible on the next request from this user.</comment></method><method name="offsetUnset" startline="136" endline="142" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Delete the specified cookie.

This do NOT remove the value directly from the cookies array.
The value will be deleted on the next request from this user.</comment></method><method name="set" startline="152" endline="158" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string">Name of the cookie.</param><param name="sValue" null="null" type="string">Value of the cookie.</param><param name="iExpire" null="null" type="int">Expiration time (UNIX timestamp, in seconds).</param></params><comment>Send a cookie to the browser.</comment></method></methods><properties><property name="sCookiePath" visibility="protected"><comment>Path used when setting or deleting cookies.</comment></property></properties><comment>Wrapper around the $_COOKIE array.

Allows you to retrieve cookies from the array or to set and delete cookies.
The class can be used as an array, with a few nuances when unsetting or setting cookies.</comment></class><class name="weeCRUDUI" module="wee/ui" filename="wee/ui/weeCRUDUI.class.php" startline="31" endline="223" parent="weeContainerUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="addFrame" filename="wee/ui/weeContainerUI.class.php" startline="59" endline="67" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string">Identifier for the given frame.</param><param name="oFrame" null="null" type="object">Frame to be added to the container.</param></params><comment>Add an UI frame to the container.

Keep in mind though that if the frame doesn't implement weeFailSafeRouting,
there might be an exception triggered when the event doesn't exist in it.</comment></method><method name="child" filename="wee/ui/weeContainerUI.class.php" startline="76" endline="79" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">Identifier for the given frame.</param></params><return type="weeUI">UI frame.</return><comment>Return a child UI frame.</comment></method><method name="defaultEvent" startline="45" endline="100" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Displays a list of all items in the set and gives links to the Create, Update and Delete events.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="doFormEvent" startline="109" endline="123" visibility="protected"><params numrequired="2"><param name="aEvent" null="null" type="array">Event information.</param><param name="sSubmitCallback" null="null" type="string"/></params><comment>Perform a form event. Common method for Create and Update.</comment></method><method name="eventAdd" startline="131" endline="134" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Handles a form used to add an item to the set.</comment></method><method name="eventDelete" startline="142" endline="153" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Deletes an item from the set.</comment></method><method name="eventUpdate" startline="161" endline="164" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Handles a form used to update an item in the set.</comment></method><method name="getChildIdPrefix" filename="wee/ui/weeContainerUI.class.php" startline="101" endline="104" visibility="protected"><return type="Prefix">for child frame identifiers.</return><comment>Return the prefix for the child frame identifiers.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeContainerUI.class.php" startline="112" endline="129" visibility="public"><comment>Return the taconite object for this frame and all its children.</comment></method><method name="insertRecordCallback" startline="173" endline="176" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Data to be inserted.</param></params><comment>Default callback for the 'add' event.
Insert an item into the set.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noChildTaconite" filename="wee/ui/weeContainerUI.class.php" startline="136" endline="140" visibility="public"><comment>Tells the child frames to not use taconite.
Use this when you want to return the rendered template in your taconite response.</comment></method><method name="noTaconite" filename="wee/ui/weeContainerUI.class.php" startline="146" endline="150" visibility="public"><comment>Tells this frame and all its children to not use taconite.</comment></method><method name="render" filename="wee/ui/weeContainerUI.class.php" startline="156" endline="162" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" startline="189" endline="195" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* columns:		Columns to display in the list. Columns use the format 'label' =&gt; 'name', with 'label' optional.
	* countperpage:	Number of items per page in the list for the default event. Defaults to 25.
	* set:			The set where all the CRUD operations will be performed.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" startline="204" endline="208" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method><method name="updateRecordCallback" startline="217" endline="222" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Updated data.</param></params><comment>Default callback for the 'update' event.
Update an item in the set.</comment></method></methods><properties><property name="aFrames" visibility="protected"><comment>List of frames this container handles.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.
If not defined its value will be the name of the frame's class.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>UI frame for standard CRUD operations.

CRUD stands for Create, Retrieve, Update, Delete.
This frame defines events for all of these operations applicable on a given set.</comment></class><class name="weeDatabase" module="wee/db" filename="wee/db/weeDatabase.class.php" startline="29" endline="353" type="abstract"><methods><method name="__clone" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="50" endline="50" type="abstract" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">Arguments for database connection, identification, and class initialization</param></params><comment>Initialize the driver and connects to the database.
The arguments available may change between drivers.</comment></method><method name="batchQueries" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="133" endline="133" type="abstract" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the database-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="142" endline="142" type="abstract" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Execute an SQL query.</comment></method><method name="escape" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="179" endline="179" type="abstract" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape</param></params><return type="string">The escaped identifier, wrapped around adequate quotes</return><comment>Escapes the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="187" endline="190" visibility="public"><comment>Returns the name of the dbmeta class associated with this driver.</comment></method><method name="getPKId" startline="201" endline="201" type="abstract" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The primary key index name, if needed</param></params><return type="integer">The primary key index value</return><comment>Returns the primary key index value.
Useful when you need to retrieve the row primary key value you just inserted.
This function may work a bit differently in each drivers.</comment></method><method name="is" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="249" endline="249" type="abstract" visibility="public"><return type="integer">The number of affected rows in the last query</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="258" endline="258" type="abstract" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weeDatabaseStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS.</comment></property></properties><comment>Base class for database handling.
Defines the required elements for all the database drivers.</comment></class><class name="weeDatabaseDummyResult" module="wee/db" filename="wee/db/weeDatabaseDummyResult.class.php" startline="29" endline="102" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="43" endline="46" visibility="public"><params numrequired="1"><param name="aRows" type="array" hint="array">The rows of the result set.</param></params><comment>Initialises a new oracle result set.</comment></method><method name="count" startline="54" endline="57" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="65" endline="70" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="76" endline="79" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" startline="93" endline="101" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="aRows" visibility="protected"><comment>The rows of the result set.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>A dummy database result to use with drivers where we directly store the rows
of the result set in a PHP array, such as Oracle and PDO.</comment></class><class name="weeDatabaseDummyStatement" module="wee/db" filename="wee/db/weeDatabaseDummyStatement.class.php" startline="35" endline="142" parent="weeDatabaseStatement" type="abstract"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="82" endline="100" visibility="public"><params numrequired="2"><param name="oDb" type="object" hint="weeDatabase">The database to use.</param><param name="sQuery" null="null" type="string">The query.</param></params><comment>Initialises a new dummy prepared statement with a given query.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="108" endline="111" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the database-dependent work to bind the parameters to the statement.</comment></method><method name="doQuery" startline="120" endline="120" type="abstract" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeDatabaseResult">A result set for SELECT queries.</return><comment>Does the database-dependent work of the execute method.</comment></method><method name="execute" startline="128" endline="141" visibility="public"><return type="mixed">An instance of weeDatabaseResult if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" filename="wee/db/weeDatabaseStatement.class.php" startline="100" endline="100" type="abstract" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><properties><property name="aExtraParts" visibility="protected"><comment>The extra parts of the query.</comment></property><property name="aParameters" visibility="protected"><comment>The parameters to bind to the prepared statement.</comment></property><property name="aParametersMap" visibility="protected"><comment>The parameters map.

This array maps query parts indexes to parameters names.</comment></property><property name="iExtraPartsCount" visibility="protected"><comment>The number of extra parts.</comment></property><property name="oDb" visibility="protected"><comment>The database object.</comment></property><property name="sFirstPart" visibility="protected"><comment>The first part of the query.</comment></property></properties><comment>A dummy prepared statement object for database drivers which does not support
this feature.

Using this class does not increase the speed on database side,
but it does reduce the overhead induced by the weeDatabase::query method.

Instances of this class are returned by weeDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeDatabaseResult" module="wee/db" filename="wee/db/weeDatabaseResult.class.php" startline="31" endline="226" parent="weeDataSource" type="abstract"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="count" type="abstract" visibility="public" internal="internal"/><method name="current" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="83" endline="83" type="abstract" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="89" endline="89" type="abstract" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" startline="124" endline="127" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Base class for database query results handling.

Instances of this class are returned by weeDatabase's query method and
should not be instantiated manually.</comment></class><class name="weeDatabaseRow" module="wee/db" filename="wee/db/weeDatabaseRow.class.php" startline="29" endline="165" parent="weeDataSource" type="abstract"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__construct" startline="49" endline="53" visibility="public"><params numrequired="1"><param name="aRow" null="null" type="array">The row data.</param></params><comment>Initialize the row data.</comment></method><method name="current" startline="61" endline="64" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="key" startline="72" endline="75" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" startline="83" endline="85" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" startline="95" endline="98" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" startline="108" endline="116" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" startline="126" endline="129" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" startline="138" endline="141" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="rewind" startline="149" endline="152" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="valid" startline="160" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key of the current iterated element.</comment></property><property name="aRow" visibility="protected"><comment>The values returned by the database for this row.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property></properties><comment>Base class for database result items.
Values can be accessed like an array.</comment></class><class name="weeDatabaseStatement" module="wee/db" filename="wee/db/weeDatabaseStatement.class.php" startline="31" endline="101" type="abstract"><methods><method name="__clone" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="bind" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="51" endline="51" type="abstract" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the database-dependent work to bind the parameters to the statement.

The parameters are given as an associative array matching either index or
names to parameters values, depending on whether the query is using
interrogation marks placeholders.</comment></method><method name="execute" startline="90" endline="90" type="abstract" visibility="public"><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="100" endline="100" type="abstract" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><comment>Base class for prepared statements.

Instances of this class are returned by weeDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeDataSource" module="wee" filename="wee/weeDataSource.class.php" startline="31" endline="50" type="abstract"><methods><method name="encodeData" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property></properties><comment>Base class for data source objects.
These object are required to encode the data when needed.

Use weeOutput::instance()-&gt;encode or weeOutput::instance()-&gt;encodeArray to encode it.</comment></class><class name="weeDateValidator" module="wee/validators" filename="wee/validators/weeDateValidator.class.php" startline="40" endline="175" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="61" endline="85" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><throws><throw>DomainException				The `max` argument is invalid.</throw><throw>DomainException				The `min` argument is invalid.</throw><throw>InvalidArgumentException	The `min` and `max` arguments do not form a valid date range.</throw></throws><comment>Initialises a new date validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="94" endline="106" visibility="protected"><params numrequired="1"><param name="sInput" null="null" type="string">The input.</param></params><return type="bool">Whether the given input is a valid date.</return><comment>Returns whether a given input is a valid date.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="118" endline="133" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="143" endline="147" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="153" endline="174" visibility="protected"><comment>Validates a date.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>The default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A date validator.

The input to validate must be a date as specified in the SQL standard, e.g. 1987-29-10 for october 29th, 1987.

This validator accepts the following arguments:
 * max:				The upper bound of the range of the valid dates.
 * max_error:		The error message used if the date is after the date specified in the `max` argument.
 * min:				The lower bound of the range of the valid dates.
 * min_error:		The error message used if the date is before the date specified in the `min` argument.
 * invalid_error:	The error message used if the input is not a date.

 `max` and `min` arguments both accept 'current' as a special value, this special value represents
 the current date at the time of the validation.</comment></class><class name="weeDbMeta" module="wee/db/meta" filename="wee/db/meta/weeDbMeta.class.php" startline="28" endline="117" type="abstract"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="db" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="getTableClass" startline="78" endline="78" type="abstract" visibility="public"><return type="string">The name of the table class.</return><comment>Returns the name of the table class.</comment></method><method name="queryTables" startline="116" endline="116" type="abstract" visibility="protected"><return type="weeDatabaseResult">The data of all the tables of the database.</return><comment>Queries all the tables of the database.</comment></method><method name="table" filename="wee/db/meta/interfaces/weeDbMetaTableProvider.class.php" startline="37" endline="37" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeDbMetaTable">The table.</return><comment>Returns a table of a given name in the database.</comment></method><method name="tableExists" filename="wee/db/meta/interfaces/weeDbMetaTableProvider.class.php" startline="46" endline="46" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Returns whether a table of a given name exists in the database.</comment></method><method name="tables" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class.

Can be either a string or an array of strings.</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>Class used to query meta data about databases and their objects.</comment></class><class name="weeDbMetaColumn" module="wee/db/meta" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="28" endline="110" parent="weeDbMetaTableObject" type="abstract"><methods><method name="__construct" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="47" endline="51" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The table object data.</param><param name="oTable" type="object" hint="weeDbMetaTable"/></params><comment>Initializes a new table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMetaTable.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="44" endline="44" type="abstract" visibility="public"><return type="string">The default value of the column.</return><comment>Returns the default value of the column.</comment></method><method name="doGetValidator" startline="54" endline="54" type="abstract" visibility="protected"><return type="mixed">A validator appropriate for the column or null.</return><comment>Does the database-dependent logic of getValidator.

This method should return null if the column type is not handled by DbMeta.</comment></method><method name="getValidator" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="77" endline="77" type="abstract" visibility="public"><return type="bool">Whether the column has a default value.</return><comment>Returns whether the column has a default value.</comment></method><method name="hasValidator" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="98" endline="98" type="abstract" visibility="public"><return type="bool">Whether the column can contain null values.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>Class used to query meta data about columns and their objects.</comment></class><class name="weeDbMetaCommentable" module="wee/db/meta/interfaces" filename="wee/db/meta/interfaces/weeDbMetaCommentable.class.php" startline="31" endline="40" type="interface"><methods><method name="comment" startline="39" endline="39" type="abstract" visibility="public"><return type="string">The comment.</return><comment>Returns the comment of the database object.</comment></method></methods><comment>Interface implemented by database objects which are commentable.

weeDbMetaObject implementations of this interface should also accept the comment offset
in their alter() methods.</comment></class><class name="weeDbMetaForeignKey" module="wee/db/meta" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="28" endline="56" parent="weeDbMetaTableObject" type="abstract"><methods><method name="__construct" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="47" endline="51" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The table object data.</param><param name="oTable" type="object" hint="weeDbMetaTable"/></params><comment>Initializes a new table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMetaTable.</comment></method><method name="columnsNames" startline="36" endline="36" type="abstract" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Returns the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="44" endline="44" type="abstract" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Returns the referenced columns of the foreign key.</comment></method><method name="referencedTableName" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Class used to query meta data about foreign keys.</comment></class><class name="weeDbMetaForeignKeyProvider" module="wee/db/meta/interfaces" filename="wee/db/meta/interfaces/weeDbMetaForeignKeyProvider.class.php" startline="28" endline="63" type="interface"><methods><method name="foreignKey" startline="45" endline="45" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weeDbMetaPrimaryKey">The foreign key.</return><comment>Returns a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="54" endline="54" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Returns whether a foreign key of a given name exists.</comment></method><method name="foreignKeys" startline="62" endline="62" type="abstract" visibility="public"><return type="array(weeDbMetaPrimaryKey)">The array of foreign keys.</return><comment>Returns all the foreign keys.</comment></method><method name="getForeignKeyClass" startline="36" endline="36" type="abstract" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Returns the name of the foreign key class.</comment></method></methods><comment>Interface implemented by dbmeta tables which driver supports foreign keys.</comment></class><class name="weeDbMetaForm" module="wee/form" filename="wee/form/weeDbMetaForm.class.php" startline="30" endline="248" parent="weeForm"><implements><implement>Printable</implement></implements><todos><todo>::toXML for easy replacement with a custom form?</todo></todos><methods><method name="__construct" startline="55" endline="81" visibility="public"><params numrequired="1"><param name="oSet" null="null" type="object">The set to build the form for.</param><param name="aOptions" null="null" default="array()" type="array">Options to control the building of the form.</param></params><comment>Initializes the form.

Options include:
* action:				The action to be performed by the form. Either 'add' or 'update'. Defaults to 'add'.
* formkey:				Whether the form key mechanism should be used for added security. Defaults to true.
* label-from-comment:	Use the columns comment as the field's label. Defaults to true.
* method:				Method of submission of the form. Usually 'get' or 'post'. Defaults to 'post'.
* show-pkey:			Whether to show primary key fields. By default, only a hidden field is output for the 'update' action.
* uri:					The form URI. Defaults to $_SERVER['REQUEST_URI'].</comment></method><method name="addWidget" startline="90" endline="109" visibility="protected"><params numrequired="2"><param name="sType" null="null" type="string">Widget's type.</param><param name="oCol" null="null" type="object">Column's metadata information.</param></params><comment>Add a widget to the form.</comment></method><method name="buildXSLStylesheet" filename="wee/form/weeForm.class.php" startline="111" endline="130" visibility="protected"><return type="string">The built XSL stylesheet.</return><comment>Load and parse the XSL stylesheet and return it.

This method loads every available stylesheets and include them in the resulting file.
System stylesheets are first &quot;imported&quot; followed by user stylesheets getting &quot;included&quot;.

The form key is given to the stylesheet if any.</comment></method><method name="fill" filename="wee/form/weeForm.class.php" startline="139" endline="148" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data used to fill the form's widgets values.</param></params><comment>Provide values to each widgets of the form.
When a value has no corresponding widget, it is discarded.</comment></method><method name="fillErrors" filename="wee/form/weeForm.class.php" startline="157" endline="166" visibility="public"><params numrequired="1"><param name="aErrors" null="null" type="array"/></params><comment>Provide error messages to each widgets of the form.
When a message has no corresponding widget, it is discarded.</comment></method><method name="filter" startline="121" endline="131" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data used to fill the form's widgets values.</param></params><comment>Provide values to each widgets of the form.

When a value has no corresponding widget, it is discarded.
When a value is an empty string '', it is replaced by null.
However, when an array contains an empty string, it is left as-is.</comment></method><method name="helper" filename="wee/form/weeForm.class.php" startline="212" endline="218" visibility="public"><params numrequired="2"><param name="sHelper" null="null" type="string">Class name of the helper you want to create.</param><param name="sWidget" null="null" type="string">Widget name in the XML, which is then selected using XPath.</param></params><return type="object">The helper of the type requested.</return><comment>Create and initialize an helper for the specified widget.</comment></method><method name="loadExternals" filename="wee/form/weeForm.class.php" startline="228" endline="242" visibility="protected"><sees><see>weeForm::loadExternalsFromSet</see></sees><todos><todo>Write unit tests.</todo></todos><comment>Load external sources.

Currently the only external source type available is the 'set' source type.</comment></method><method name="loadExternalsFromSet" filename="wee/form/weeForm.class.php" startline="254" endline="282" visibility="protected"><params numrequired="1"><param name="oNode" null="null" type="object">The external node.</param></params><comment>Load external definitions for the set source type.

The 'set' source type is using the format class::method and will instantiate
the class before calling the method (it's not a static call!). This source
type allows adding option groups and items directly taken from a set.</comment></method><method name="loadFromSet" startline="139" endline="194" visibility="protected"><params numrequired="1"><param name="oSet" null="null" type="object">The set to build the form for.</param></params><comment>Create the form from a set metadata. Called by the class' constructor.</comment></method><method name="loadRefSets" startline="203" endline="234" visibility="protected"><params numrequired="1"><param name="oSet" null="null" type="object">The base set from which to load the reference sets.</param></params><return type="array">An associative array mapping column names to their respective reference sets.</return><comment>Load reference sets and return the ones we can use to build selectable widgets.</comment></method><method name="loadSetExternalsFromArray" filename="wee/form/weeForm.class.php" startline="291" endline="312" visibility="protected"><params numrequired="2"><param name="oExternal" null="null" type="object">Load the items into this node.</param><param name="aItems" null="null" type="array">The items to load.</param></params><comment>Load the array returned by the external source set.</comment></method><method name="removeNodes" filename="wee/form/weeForm.class.php" startline="320" endline="330" visibility="public"><params numrequired="1"><param name="sXPath" null="null" type="string">the XPath query.</param></params><comment>Remove every node of the form XML returned by the given XPath query.</comment></method><method name="setUserStylesheetsPath" filename="wee/form/weeForm.class.php" startline="338" endline="341" visibility="public"><params numrequired="1"><param name="sUserStylesheetsPath" null="null" type="string">Path to the stylesheets to include.</param></params><comment>Set the user stylesheets path used to override default stylesheets.</comment></method><method name="toString" filename="wee/form/weeForm.class.php" startline="349" endline="430" visibility="public"><return type="string">The resulting XHTML form.</return><comment>Output the form to string.</comment></method><method name="toXML" startline="242" endline="247" visibility="public"><return type="string">The form generated from the set in its .form XML file format.</return><comment>Output the form to XML.</comment></method><method name="validate" filename="wee/form/weeForm.class.php" startline="447" endline="522" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data to check (usually either $_GET or $_POST).</param></params><throws><throw>FormValidationException</throw></throws><comment>Validates the data against the form validators.

This method first checks if the form key is valid.
If it's not, it stops the validation and indicates there is an error.

If an error is found an exception FormValidationException is triggered.
Use this object to retrieve all the error messages and output them.
You can also give the array of errors directly to the weeForm::fillErrors
method to output all the messages after each widget.</comment></method><method name="xml" filename="wee/form/weeForm.class.php" startline="530" endline="533" visibility="public"><return type="SimpleXML">SimpleXML object defining the form.</return><comment>Return the SimpleXML object for this form.</comment></method><method name="xpath" filename="wee/form/weeForm.class.php" startline="542" endline="545" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The XPath query to run.</param></params><return type="array">The XPath result.</return><comment>Performs an XPath query on the form XML.</comment></method><method name="xpathOne" filename="wee/form/weeForm.class.php" startline="555" endline="561" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The XPath query to run.</param></params><return type="SimpleXMLElement">The element retrieved by the query.</return><comment>Performs an XPath query on the form XML and retrieve exactly one result.
The result has to exist otherwise an UnexpectedValueException is thrown.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>Data used to fill the form when generating it.</comment></property><property name="aErrors" visibility="protected"><comment>Error messages shown after each widget if provided.</comment></property><property name="aOptions" visibility="protected"><sees><see>weeDbMetaForm::__construct</see></sees><comment>Options for this dbmeta form object.</comment></property><property name="oXML" visibility="protected"><comment>The SimpleXML object for this form.</comment></property><property name="sUserStylesheetsPath" visibility="protected"><comment>Path to user stylesheets.</comment></property></properties><comment>Generate a form from a database set using the dbmeta API.</comment></class><class name="weeDbMetaFormUI" module="wee/ui" filename="wee/ui/weeDbMetaFormUI.class.php" startline="28" endline="95" parent="weeFormUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="defaultEvent" filename="wee/ui/weeFormUI.class.php" startline="66" endline="91" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Process the event and if any data was sent, validate and submit it.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeUI.class.php" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" filename="wee/ui/weeUI.class.php" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" filename="wee/ui/weeUI.class.php" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setCallbacks" filename="wee/ui/weeFormUI.class.php" startline="103" endline="106" visibility="public"><params numrequired="0"><param name="aCallbacks" null="null" default="array()" type="array">Array containing (name =&gt; callback) associations.</param></params><comment>Set callback methods.

Possible callbacks are:
	* setup:	Called at the end of the method `setup`.
	* submit:	Called when valid data has been submitted.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" startline="39" endline="45" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* set: Set used for the form.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" startline="53" endline="74" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Setup the frame by creating the form and configuring it.</comment></method><method name="submit" startline="82" endline="94" visibility="protected"><params numrequired="1"><param name="aData" null="null" type="array">Data submitted using the form.</param></params><comment>Method called when data has been submitted and validated.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aCallbacks" visibility="protected"><comment>Callback methods associated with this frame.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oForm" visibility="protected"><comment>The form object.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sAction" visibility="protected"><comment>The action to be performed by the form (usually 'add', 'update' or 'delete').</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>UI frame encapsulating a weeDbMetaForm object.</comment></class><class name="weeDbMetaObject" module="wee/db/meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="28" endline="102" type="abstract"><methods><method name="__construct" startline="53" endline="57" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initializes a new database object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMeta
and the other classes of the dbmeta component.</comment></method><method name="db" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oMeta" visibility="private"><comment>The database to query.</comment></property></properties><comment>Base class used to query meta data about database objects.</comment></class><class name="weeDbMetaPrimaryKey" module="wee/db/meta" filename="wee/db/meta/weeDbMetaPrimaryKey.class.php" startline="28" endline="37" parent="weeDbMetaTableObject" type="abstract"><methods><method name="__construct" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="47" endline="51" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The table object data.</param><param name="oTable" type="object" hint="weeDbMetaTable"/></params><comment>Initializes a new table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMetaTable.</comment></method><method name="columnsNames" startline="36" endline="36" type="abstract" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Returns the names of the columns of the primary key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Class used to query meta data about primary keys.</comment></class><class name="weeDbMetaSchema" module="wee/db/meta" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="28" endline="69" parent="weeDbMetaObject" type="abstract"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMetaObject.class.php" startline="53" endline="57" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initializes a new database object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMeta
and the other classes of the dbmeta component.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="queryTables" startline="68" endline="68" type="abstract" visibility="protected"><return type="weeDatabaseResult">The data of all the tables in the schema.</return><comment>Queries all the tables in the schema.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/interfaces/weeDbMetaTableProvider.class.php" startline="37" endline="37" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeDbMetaTable">The table.</return><comment>Returns a table of a given name in the database.</comment></method><method name="tableExists" filename="wee/db/meta/interfaces/weeDbMetaTableProvider.class.php" startline="46" endline="46" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Returns whether a table of a given name exists in the database.</comment></method><method name="tables" startline="37" endline="45" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables in the schema.</comment></method><method name="tablesNames" startline="53" endline="60" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the schema.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>Class used to query meta data about schemas and their objects.</comment></class><class name="weeDbMetaSchemaForeignKey" module="wee/db/meta" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="28" endline="52" parent="weeDbMetaForeignKey" type="abstract"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="47" endline="51" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The table object data.</param><param name="oTable" type="object" hint="weeDbMetaTable"/></params><comment>Initializes a new table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMetaTable.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="36" endline="36" type="abstract" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Returns the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="44" endline="44" type="abstract" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Returns the referenced columns of the foreign key.</comment></method><method name="referencedSchemaName" startline="37" endline="40" visibility="public"><return type="string">The name of the referenced schema.</return><comment>Returns the name of the schema in which is the referenced table.</comment></method><method name="referencedTableName" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="schemaName" startline="48" endline="51" visibility="public"><return type="string">The name of the schema in which is the foreign key.</return><comment>Returns the name of the schema in which is the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Used to represent a foreign key which driver support schema objects.</comment></class><class name="weeDbMetaSchemaObject" module="wee/db/meta/interfaces" filename="wee/db/meta/interfaces/weeDbMetaSchemaObject.class.php" startline="28" endline="37" type="interface"><methods><method name="schemaName" startline="36" endline="36" type="abstract" visibility="public"><return type="string">The name of the schema.</return><comment>Returns the name of the schema of the database object.</comment></method></methods><comment>Interface implemented by database objects which are contained in schema.</comment></class><class name="weeDbMetaSchemaProvider" module="wee/db/meta/interfaces" filename="wee/db/meta/interfaces/weeDbMetaSchemaProvider.class.php" startline="28" endline="79" type="interface"><methods><method name="currentSchema" startline="36" endline="36" type="abstract" visibility="public"><return type="weeDbMetaSchema">The current schema.</return><comment>Returns the current schema of the database.</comment></method><method name="getSchemaClass" startline="44" endline="44" type="abstract" visibility="public"><return type="string">The name of the schema class.</return><comment>Returns the name of the schema class.</comment></method><method name="schema" startline="53" endline="53" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="weeDbMetaSchema">The schema.</return><comment>Returns a schema of a given name in the database.</comment></method><method name="schemaExists" startline="62" endline="62" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="bool">true if the schema exists in the database, false otherwise.</return><comment>Returns whether a schema of a given name exists in the database.</comment></method><method name="schemas" startline="70" endline="70" type="abstract" visibility="public"><return type="array(weeDbMetaSchema)">The array of schemas.</return><comment>Returns all the schemas of the database.</comment></method><method name="schemasNames" startline="78" endline="78" type="abstract" visibility="public"><return type="array(string)">The names of all the schemas.</return><comment>Returns the names of all the schemas of the database.</comment></method></methods><comment>Interface implemented by dbmeta objects which driver supports schemas.</comment></class><class name="weeDbMetaTable" module="wee/db/meta" filename="wee/db/meta/weeDbMetaTable.class.php" startline="28" endline="135" parent="weeDbMetaObject" type="abstract"><methods><method name="__construct" filename="wee/db/meta/weeDbMetaObject.class.php" startline="53" endline="57" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initializes a new database object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMeta
and the other classes of the dbmeta component.</comment></method><method name="column" startline="53" endline="53" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weeDbMetaColumn">The column.</return><comment>Returns a column of the table.</comment></method><method name="columnExists" startline="62" endline="62" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">true if the column exists, false otherwise.</return><comment>Returns whether a given column exists in the table.</comment></method><method name="columns" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="getColumnClass" startline="36" endline="36" type="abstract" visibility="public"><return type="string">The name of the column class.</return><comment>Returns the name of the column class.</comment></method><method name="getPrimaryKeyClass" startline="44" endline="44" type="abstract" visibility="public"><return type="string">The name of the primary key class.</return><comment>Returns the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="100" endline="100" type="abstract" visibility="public"><return type="bool">true if the table has a primary key, false otherwise.</return><comment>Returns whether the table has a primary key.</comment></method><method name="instantiateObject" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="126" endline="126" type="abstract" visibility="public"><return type="weeDbMetaPrimaryKey">The primary key of the table.</return><comment>Returns the primary key of the table.</comment></method><method name="queryColumns" startline="134" endline="134" type="abstract" visibility="protected"><return type="weeDatabaseResult">The data of all the columns of the table.</return><comment>Queries all the columns of the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>Class used to query meta data about tables and their objects.</comment></class><class name="weeDbMetaTableObject" module="wee/db/meta" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="28" endline="74" parent="weeDbMetaObject" type="abstract"><methods><method name="__construct" startline="47" endline="51" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The table object data.</param><param name="oTable" type="object" hint="weeDbMetaTable"/></params><comment>Initializes a new table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeDbMetaTable.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Base class for table objects like columns, table constraints and indexes</comment></class><class name="weeDbMetaTableProvider" module="wee/db/meta/interfaces" filename="wee/db/meta/interfaces/weeDbMetaTableProvider.class.php" startline="28" endline="63" type="interface"><methods><method name="table" startline="37" endline="37" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeDbMetaTable">The table.</return><comment>Returns a table of a given name in the database.</comment></method><method name="tableExists" startline="46" endline="46" type="abstract" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Returns whether a table of a given name exists in the database.</comment></method><method name="tables" startline="54" endline="54" type="abstract" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" startline="62" endline="62" type="abstract" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><comment>Interface implemented by dbmeta objects which driver supports tables.</comment></class><class name="weeDbModel" module="wee/model/db" filename="wee/model/db/weeDbModel.class.php" startline="28" endline="101" parent="weeModel" type="abstract"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" filename="wee/model/weeModel.class.php" startline="48" endline="51" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model with the data passed as parameter.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="getDb" startline="44" endline="51" visibility="public"><return type="weeDatabase">The database associated to this model.</return><throws><throw>IllegalStateException	No database has been associated to this model.</throw></throws><comment>Returns the database associated to this model.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="query" startline="64" endline="68" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">An instance of weeDatabaseResult or null.</return><sees><see>weeDatabase::query</see></sees><comment>Builds and executes a SQL query.</comment></method><method name="queryValue" startline="83" endline="87" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="queryValue($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="queryValue($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">The queried value.</return><sees><see>weeDatabase::queryValue</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to $this-&gt;getDb()-&gt;queryValue(...).</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="setDb" startline="96" endline="100" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database instance to associate to this model.</param></params><return type="$this">Used to chain methods.</return><comment>Associate a database to this model.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="oDatabase" visibility="protected"><comment>The database this model is associated to.
Defaults to weeApp()-&gt;db.</comment></property></properties><comment>Base class for defining a model for a database table.</comment></class><class name="weeDbModelScaffold" module="wee/model/db" filename="wee/model/db/weeDbModelScaffold.class.php" startline="30" endline="81" parent="weeDbModel" type="abstract"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" filename="wee/model/weeModel.class.php" startline="48" endline="51" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model with the data passed as parameter.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="getDb" filename="wee/model/db/weeDbModel.class.php" startline="44" endline="51" visibility="public"><return type="weeDatabase">The database associated to this model.</return><throws><throw>IllegalStateException	No database has been associated to this model.</throw></throws><comment>Returns the database associated to this model.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="query" filename="wee/model/db/weeDbModel.class.php" startline="64" endline="68" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">An instance of weeDatabaseResult or null.</return><sees><see>weeDatabase::query</see></sees><comment>Builds and executes a SQL query.</comment></method><method name="queryValue" filename="wee/model/db/weeDbModel.class.php" startline="83" endline="87" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="queryValue($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="queryValue($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">The queried value.</return><sees><see>weeDatabase::queryValue</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to $this-&gt;getDb()-&gt;queryValue(...).</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="setDb" filename="wee/model/db/weeDbModel.class.php" startline="96" endline="100" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database instance to associate to this model.</param></params><return type="$this">Used to chain methods.</return><comment>Associate a database to this model.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="update" startline="55" endline="80" visibility="public"><throws><throw>IllegalStateException The data was empty or the table has no primary key.</throw></throws><comment>Saves the data stored in this model to the database.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="aMeta" visibility="protected"><comment>The metadata for the table associated with this model.

The metadata contains information about:
* table:	The full table name, properly quoted.
* columns:	An array of all the columns names.
* primary:	An array of all the primary key columns names.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="oDatabase" visibility="protected"><comment>The database this model is associated to.
Defaults to weeApp()-&gt;db.</comment></property><property name="sSet" visibility="protected"><comment>Name of the weeDbSetScaffold class associated with this model.</comment></property></properties><comment>Scaffolding for database elements.

To use it, simply extend it and define the $sSet property to the name of the weeDbSetScaffold class.</comment></class><class name="weeDbSet" module="wee/model/db" filename="wee/model/db/weeDbSet.class.php" startline="28" endline="136" parent="weeSet" type="abstract"><methods><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="getDb" startline="43" endline="49" visibility="public"><return type="weeDatabase">The database associated to this set.</return><comment>Returns the database associated to this set.</comment></method><method name="getModelName" filename="wee/model/weeSet.class.php" startline="44" endline="50" visibility="public"><return type="string">The model class name.</return><comment>Returns the model name associated with this set.</comment></method><method name="query" startline="68" endline="76" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">An instance of weeDatabaseResult or null.</return><sees><see>weeDatabase::query</see></sees><comment>Builds and executes a SQL query.

This method is a shortcut to the following idiom:
	$this-&gt;getDb()-&gt;query(...)-&gt;rowClass($this-&gt;sModel);

If the query returned a result set, it is automatically associated to the model
of this class.</comment></method><method name="queryRow" startline="93" endline="103" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string.</param></params><overloads><overload func="queryRow($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters.</overload><overload func="queryRow($mQueryString, $aNamedParameters">Example of query call with named parameters.</overload></overloads><return type="object">An instance of the model of this set.</return><sees><see>weeDatabase::query</see></sees><throws><throw>UnexpectedValueException						The SQL query did not return a result set.</throw><throw>DatabaseException								The result set does not contain exactly one row.</throw></throws><comment>Fetches a row from the database.

This method executes a given SQL query and returns an instance of the model of this set.</comment></method><method name="queryValue" startline="118" endline="122" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="queryValue($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="queryValue($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">The queried value.</return><sees><see>weeDatabase::queryValue</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to $this-&gt;getDb()-&gt;queryValue(...).</comment></method><method name="setDb" startline="131" endline="135" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database instance to associate to this set.</param></params><return type="$this">Used to chain methods.</return><comment>Associate a database to this set.</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="oDatabase" visibility="protected"><comment>The database this set is associated to.
Defaults to weeApp()-&gt;db.</comment></property><property name="sModel" visibility="protected"><comment>Model associated with this set of elements.
This set will always return elements according to this model.</comment></property></properties><comment>Base class for defining a set of rows for a database table.</comment></class><class name="weeDbSetScaffold" module="wee/model/db" filename="wee/model/db/weeDbSetScaffold.class.php" startline="33" endline="505" parent="weeDbSet" type="abstract"><implements><implement>Countable</implement></implements><todos><todo>automatically fetch reference tables data</todo></todos><methods><method name="buildJoin" startline="102" endline="141" visibility="protected"><params numrequired="1"><param name="aMeta" null="null" type="array">The metadata for the table associated with this set.</param></params><return type="The">JOINs built according to the $aRefSets property.</return><throws><throw>InvalidArgumentException No set was given or the set's table doesn't have a primary key.</throw></throws><comment>Build various JOINs defined using the $aRefSets property.
To change the type of the JOIN, change the value of the $sJoinType property.</comment></method><method name="count" startline="150" endline="159" visibility="public"><return type="integer">The number of rows in the table.</return><comment>Count the number of rows that would be returned by a fetchAll query.
A JOIN is performed on the reference tables if any are provided.</comment></method><method name="delete" startline="170" endline="181" visibility="public"><params numrequired="1"><param name="mPrimaryKey" null="null" type="mixed">The primary key data. Can be either a scalar value or an associative array.</param></params><comment>Delete a row (identified by its primary key) from the table.

When the primary key is on only one column, simply pass the value of this column.
Otherwise, you need to pass an associative array with all the values.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" startline="193" endline="204" visibility="public"><params numrequired="1"><param name="mPrimaryKey" null="null" type="mixed">The primary key data. Can be either a scalar value or an associative array.</param></params><return type="object">An instance of the model of this set.</return><comment>Fetch a row (identified by its primary key) from the table.

When the primary key is on only one column, simply pass the value of this column.
Otherwise, you need to pass an associative array with all the values.</comment></method><method name="fetchAll" startline="210" endline="213" visibility="public"><comment>Alias of fetchSubset with default values. Fetch all rows in the table.</comment></method><method name="fetchSubset" startline="225" endline="241" visibility="public"><params numrequired="0"><param name="iOffset" null="null" type="int">Start fetching from this offset.</param><param name="iCount" null="null" type="int">The number of rows to fetch.</param></params><return type="mixed">An instance of weeDatabaseResult.</return><throws><throw>InvalidArgumentException $iOffset and $iCount must be integers.</throw><throw>InvalidArgumentException $iCount must be provided if $iOffset is given.</throw></throws><comment>Fetch a subset of the rows from the table.</comment></method><method name="filterPrimaryKey" startline="252" endline="264" visibility="protected"><params numrequired="2"><param name="mPrimaryKey" null="null" type="mixed">The primary key to prepare.</param><param name="aMeta" null="null" type="array">The metadata for this primary key's table.</param></params><return type="array">The primary key ready to be used.</return><throws><throw>InvalidArgumentException The primary key value is empty or missing columns.</throw></throws><comment>Check and prepare the primary key for use in the delete or fetch methods.</comment></method><method name="getDb" filename="wee/model/db/weeDbSet.class.php" startline="43" endline="49" visibility="public"><return type="weeDatabase">The database associated to this set.</return><comment>Returns the database associated to this set.</comment></method><method name="getMeta" startline="277" endline="290" visibility="public"><return type="array">The metadata for the table associated with this set.</return><comment>Get the metadata for the table associated with the set.

The metadata returned contains information about:
* table:	The full table name, properly quoted.
* columns:	An array of all the columns names.
* primary:	An array of all the primary key columns names.</comment></method><method name="getModelName" filename="wee/model/weeSet.class.php" startline="44" endline="50" visibility="public"><return type="string">The model class name.</return><comment>Returns the model name associated with this set.</comment></method><method name="getRefSets" startline="298" endline="301" visibility="public"><return type="array">The reference sets (the $aRefSets property).</return><comment>Return the reference sets associated with this one.</comment></method><method name="insert" startline="315" endline="334" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array"/></params><return type="The">model for the inserted row.</return><throws><throw>InvalidArgumentException The data given was empty.</throw></throws><comment>Insert a new row in the database, and return the model object for the inserted row.

The model returned do not contain any other value that could be assigned to the
row when doing the INSERT operation. If you need that kind of behavior, because
you have a table with a sequenced primary key for example, you need to extend this
method to retrieve the value. This usually means using $this-&gt;getDb()-&gt;getPKId().</comment></method><method name="orderBy" startline="350" endline="374" visibility="public"><params numrequired="0"><param name="mOrderBy" null="null" default="array()" type="mixed">The order in which the rows should be sorted.</param></params><return type="$this"/><throws><throw>InvalidArgumentException The ORDER BY modifier is not in the list of valid modifiers.</throw></throws><comment>Defines the order of the rows returned by the fetchAll, fetchSubset and search operations.

The parameter can be either a scalar value (for example, the name of the column to use for sorting)
or an associative array. When providing an array, you can give as many sort options as you want,
using the key as the field name and the value as the sort operation requested, which can be either
ASC or DESC currently. If only the value is provided without a key, it is used as the field name
and the order will default to ASC.</comment></method><method name="query" filename="wee/model/db/weeDbSet.class.php" startline="68" endline="76" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">An instance of weeDatabaseResult or null.</return><sees><see>weeDatabase::query</see></sees><comment>Builds and executes a SQL query.

This method is a shortcut to the following idiom:
	$this-&gt;getDb()-&gt;query(...)-&gt;rowClass($this-&gt;sModel);

If the query returned a result set, it is automatically associated to the model
of this class.</comment></method><method name="queryRow" filename="wee/model/db/weeDbSet.class.php" startline="93" endline="103" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string.</param></params><overloads><overload func="queryRow($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters.</overload><overload func="queryRow($mQueryString, $aNamedParameters">Example of query call with named parameters.</overload></overloads><return type="object">An instance of the model of this set.</return><sees><see>weeDatabase::query</see></sees><throws><throw>UnexpectedValueException						The SQL query did not return a result set.</throw><throw>DatabaseException								The result set does not contain exactly one row.</throw></throws><comment>Fetches a row from the database.

This method executes a given SQL query and returns an instance of the model of this set.</comment></method><method name="queryValue" filename="wee/model/db/weeDbSet.class.php" startline="118" endline="122" visibility="protected"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="queryValue($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="queryValue($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="mixed">The queried value.</return><sees><see>weeDatabase::queryValue</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to $this-&gt;getDb()-&gt;queryValue(...).</comment></method><method name="search" startline="402" endline="418" visibility="public"><params numrequired="1"><param name="aCriteria" null="null" type="array">The criteria to search for.</param><param name="iOffset" null="null" type="int">Start fetching from this offset.</param><param name="iCount" null="null" type="int">The number of rows to fetch.</param></params><return type="mixed">An instance of weeDatabaseResult.</return><throws><throw>InvalidArgumentException $iOffset and $iCount must be integers.</throw><throw>InvalidArgumentException $iCount must be provided if $iOffset is given.</throw></throws><comment>Search rows matching the given criteria.

The criteria must be an associative array with the keys being the field names
and the values the operation to perform. The operation can be either a single
value (the name of the operation), or an array containing the name of the operation
along with one or more values. Here is the representation of all the possible
forms of a single criteria:

{{{
$aCriteria = array(
	'field_1' =&gt; 'operation',
	'field_2' =&gt; array('operation'),
	'field_3' =&gt; array('operation', 'value'),
	'field_4' =&gt; array('operation', 'value', 'more values', ...),
);
}}}</comment></method><method name="searchBuildWhere" startline="443" endline="475" visibility="protected"><params numrequired="1"><param name="aCriteria" null="null" type="array">The criteria to search for.</param></params><return type="string">The body of the WHERE clause built according to the criteria.</return><throws><throw>InvalidArgumentException The criteria operation is not in the list of valid operations.</throw></throws><comment>Build the body of the WHERE clause based on the given criteria.

The criteria must be an associative array with the keys being the field names
and the values the operation to perform. The operation can be either a single
value (the name of the operation), or an array containing the name of the operation
along with one or more values. Here is the representation of all the possible
forms of a single criteria:

{{{
$aCriteria = array(
	'field_1' =&gt; 'operation',
	'field_2' =&gt; array('operation'),
	'field_3' =&gt; array('operation', 'value'),
	'field_4' =&gt; array('operation', 'value', 'more values', ...),
);
}}}</comment></method><method name="searchCount" startline="499" endline="504" visibility="public"><params numrequired="1"><param name="aCriteria" null="null" type="array">The criteria to search for.</param></params><return type="integer">The number of rows returned by a search using this criteria.</return><comment>Return the total count of rows returned by a search on the given criteria.

The criteria must be an associative array with the keys being the field names
and the values the operation to perform. The operation can be either a single
value (the name of the operation), or an array containing the name of the operation
along with one or more values. Here is the representation of all the possible
forms of a single criteria:

{{{
$aCriteria = array(
	'field_1' =&gt; 'operation',
	'field_2' =&gt; array('operation'),
	'field_3' =&gt; array('operation', 'value'),
	'field_4' =&gt; array('operation', 'value', 'more values', ...),
);
}}}</comment></method><method name="setDb" filename="wee/model/db/weeDbSet.class.php" startline="131" endline="135" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database instance to associate to this set.</param></params><return type="$this">Used to chain methods.</return><comment>Associate a database to this set.</comment></method></methods><properties><property name="aMeta" visibility="protected"><comment>The metadata for the table associated with this set.

The metadata contains information about:
* table:	The full table name, properly quoted.
* columns:	An array of all the columns names.
* primary:	An array of all the primary key columns names.</comment></property><property name="aRefSets" visibility="protected"><comment>Reference tables to fetch by doing a JOIN in SELECT queries.</comment></property><property name="aValidCriteriaOperators" visibility="protected"><comment>Valid criteria operators for use with the search methods.</comment></property><property name="aValidOrderByModifiers" visibility="protected"><comment>Valid modifiers for use with the orderBy method.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="oDatabase" visibility="protected"><comment>The database this set is associated to.
Defaults to weeApp()-&gt;db.</comment></property><property name="sJoinType" visibility="protected"><comment>Defines the type of JOIN to do when joining reference tables.</comment></property><property name="sModel" visibility="protected"><comment>Model associated with this set of elements.
This set will always return elements according to this model.</comment></property><property name="sOrderBy" visibility="protected"><comment>ORDER BY part of the SELECT queries.
Can be defined here or by using the orderBy method.</comment></property><property name="sTableName" visibility="protected"><comment>Name of the table in the database represented by this set.</comment></property></properties><comment>Scaffolding for database elements.

To use it, simply extend it and define the $sModel property to the name of the weeDbModelScaffold class,
and the $sTableName to the name of the table in the database represented by this set.</comment></class><class name="weeDocumentor" module="wee/documentor" filename="wee/documentor/weeDocumentor.class.php" startline="28" endline="597" type="abstract"><implements><implement>Mappable</implement><implement>Printable</implement></implements><methods><method name="docClass" startline="50" endline="174" visibility="public"><params numrequired="1"><param name="sClassName" null="null" type="string">The class to get data from.</param></params><return type="$this">For chained calls.</return><comment>Tells weeDocumentor to get data of the specified class.
The class must be declared before calling this method.</comment></method><method name="docClassFromPath" startline="183" endline="196" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The path to get class data from.</param></params><return type="$this">For chained calls.</return><comment>Loads all files in path with filename that finishes with CLASS_EXT, and get class data.</comment></method><method name="docFunc" startline="206" endline="249" visibility="public"><params numrequired="1"><param name="sFunctionName" null="null" type="string">The function to get data from.</param></params><return type="$this">For chained calls.</return><comment>Tells weeDocumentor to get data of the specified function.
The function must be declared before calling this method.</comment></method><method name="getParametersTypeHints" startline="258" endline="325" type="static" visibility="public"><params numrequired="1"><param name="oFunction" type="object" hint="ReflectionFunctionAbstract">The function to scan.</param></params><return type="array(string)">An associative array mapping parameters' names to their type-hint.</return><comment>Returns the type-hints of the parameters of a given function.</comment></method><method name="getVariableType" startline="335" endline="354" visibility="protected"><params numrequired="1"><param name="sVariable" null="null" type="string">The name of the variable.</param></params><return type="string">The type of the variable.</return><throws><throw>InvalidArgumentException	$sVariable is not a valid variable name.</throw></throws><comment>Returns the type of a variable from its name.</comment></method><method name="nameCmp" startline="364" endline="367" type="static" visibility="protected"><params numrequired="2"><param name="a1" null="null" type="array">The first array.</param><param name="a2" null="null" type="array">The second array.</param></params><return type="int">Returns &lt; 0 if a1['name'] is less than a2['name'] ; &gt; 0 if a1['name'] is greater than a2['name'] , and 0 if they are equal.</return><comment>Compare names like strcasecmp. Used internally to sort classes and functions.</comment></method><method name="parseDocComment" startline="376" endline="408" visibility="protected"><params numrequired="2"><param name="sDocComment" null="null" type="string">The docComment.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse docComments to retrieve the comment and the modifiers.</comment></method><method name="parseDocCommentBug" startline="417" endline="423" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @bug line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @bug line from the docComment.</comment></method><method name="parseDocCommentDeprecated" startline="432" endline="435" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @overload line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @deprecated line from the docComment.</comment></method><method name="parseDocCommentOverload" startline="444" endline="457" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @overload line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @overload line from the docComment.</comment></method><method name="parseDocCommentParam" startline="466" endline="476" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @param line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @param line from the docComment.</comment></method><method name="parseDocCommentReturn" startline="488" endline="496" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @return line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse the @return line from the docComment.

As opposed to other docComment modifiers, there can be only one return line.
If more than one is found, only the last one is used.</comment></method><method name="parseDocCommentSee" startline="505" endline="511" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @see line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @see line from the docComment.</comment></method><method name="parseDocCommentThrow" startline="520" endline="526" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @throw line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @throw line from the docComment.</comment></method><method name="parseDocCommentTodo" startline="535" endline="541" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @todo line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @todo line from the docComment.</comment></method><method name="parseDocCommentWarning" startline="550" endline="556" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @warning line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @warning line from the docComment.</comment></method><method name="toArray" startline="562" endline="568" visibility="public"><return type="array">Array containing all the classes and functions metadata.</return></method><method name="toString" filename="wee/wee.php" startline="392" endline="392" type="abstract" visibility="public"/><method name="trimDocComment" startline="581" endline="596" visibility="protected"><params numrequired="1"><param name="sDocComment" null="null" type="string">The docComment.</param></params><return type="string">Trimmed docComment.</return><comment>Trim the docComment.

This will remove the comment operators, as well as a number of
tabulations from the beginning of each line equal to the number
of tabulations before the text on the first line.</comment></method></methods><properties><property name="aClasses" visibility="protected"><comment>Stores parsed classes data.</comment></property><property name="aFuncs" visibility="protected"><comment>Stores parsed funcs data.</comment></property></properties><comment>Builds an XML based on PHP code.</comment></class><class name="weeDocumentorXML" module="wee/documentor" filename="wee/documentor/weeDocumentorXML.class.php" startline="28" endline="327" parent="weeDocumentor"><implements><implement>Mappable</implement><implement>Printable</implement></implements><methods><method name="docClass" filename="wee/documentor/weeDocumentor.class.php" startline="50" endline="174" visibility="public"><params numrequired="1"><param name="sClassName" null="null" type="string">The class to get data from.</param></params><return type="$this">For chained calls.</return><comment>Tells weeDocumentor to get data of the specified class.
The class must be declared before calling this method.</comment></method><method name="docClassFromPath" filename="wee/documentor/weeDocumentor.class.php" startline="183" endline="196" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The path to get class data from.</param></params><return type="$this">For chained calls.</return><comment>Loads all files in path with filename that finishes with CLASS_EXT, and get class data.</comment></method><method name="docFunc" filename="wee/documentor/weeDocumentor.class.php" startline="206" endline="249" visibility="public"><params numrequired="1"><param name="sFunctionName" null="null" type="string">The function to get data from.</param></params><return type="$this">For chained calls.</return><comment>Tells weeDocumentor to get data of the specified function.
The function must be declared before calling this method.</comment></method><method name="getParametersTypeHints" filename="wee/documentor/weeDocumentor.class.php" startline="258" endline="325" type="static" visibility="public"><params numrequired="1"><param name="oFunction" type="object" hint="ReflectionFunctionAbstract">The function to scan.</param></params><return type="array(string)">An associative array mapping parameters' names to their type-hint.</return><comment>Returns the type-hints of the parameters of a given function.</comment></method><method name="getVariableType" filename="wee/documentor/weeDocumentor.class.php" startline="335" endline="354" visibility="protected"><params numrequired="1"><param name="sVariable" null="null" type="string">The name of the variable.</param></params><return type="string">The type of the variable.</return><throws><throw>InvalidArgumentException	$sVariable is not a valid variable name.</throw></throws><comment>Returns the type of a variable from its name.</comment></method><method name="nameCmp" filename="wee/documentor/weeDocumentor.class.php" startline="364" endline="367" type="static" visibility="protected"><params numrequired="2"><param name="a1" null="null" type="array">The first array.</param><param name="a2" null="null" type="array">The second array.</param></params><return type="int">Returns &lt; 0 if a1['name'] is less than a2['name'] ; &gt; 0 if a1['name'] is greater than a2['name'] , and 0 if they are equal.</return><comment>Compare names like strcasecmp. Used internally to sort classes and functions.</comment></method><method name="parseDocComment" filename="wee/documentor/weeDocumentor.class.php" startline="376" endline="408" visibility="protected"><params numrequired="2"><param name="sDocComment" null="null" type="string">The docComment.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse docComments to retrieve the comment and the modifiers.</comment></method><method name="parseDocCommentBug" filename="wee/documentor/weeDocumentor.class.php" startline="417" endline="423" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @bug line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @bug line from the docComment.</comment></method><method name="parseDocCommentDeprecated" filename="wee/documentor/weeDocumentor.class.php" startline="432" endline="435" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @overload line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @deprecated line from the docComment.</comment></method><method name="parseDocCommentOverload" filename="wee/documentor/weeDocumentor.class.php" startline="444" endline="457" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @overload line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @overload line from the docComment.</comment></method><method name="parseDocCommentParam" filename="wee/documentor/weeDocumentor.class.php" startline="466" endline="476" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @param line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @param line from the docComment.</comment></method><method name="parseDocCommentReturn" filename="wee/documentor/weeDocumentor.class.php" startline="488" endline="496" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @return line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse the @return line from the docComment.

As opposed to other docComment modifiers, there can be only one return line.
If more than one is found, only the last one is used.</comment></method><method name="parseDocCommentSee" filename="wee/documentor/weeDocumentor.class.php" startline="505" endline="511" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @see line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @see line from the docComment.</comment></method><method name="parseDocCommentThrow" filename="wee/documentor/weeDocumentor.class.php" startline="520" endline="526" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @throw line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @throw line from the docComment.</comment></method><method name="parseDocCommentTodo" filename="wee/documentor/weeDocumentor.class.php" startline="535" endline="541" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @todo line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @todo line from the docComment.</comment></method><method name="parseDocCommentWarning" filename="wee/documentor/weeDocumentor.class.php" startline="550" endline="556" visibility="protected"><params numrequired="2"><param name="sLine" null="null" type="string">The @warning line.</param><param name="aParsedData" ref="ref" null="null" type="array">Array where the parsed data is saved.</param></params><comment>Parse a @warning line from the docComment.</comment></method><method name="toArray" filename="wee/documentor/weeDocumentor.class.php" startline="562" endline="568" visibility="public"><return type="array">Array containing all the classes and functions metadata.</return></method><method name="toString" startline="42" endline="75" visibility="public"><return type="string">The XML generated by this class.</return><comment>Builds and prints an XML from parsed data.</comment></method><method name="trimDocComment" filename="wee/documentor/weeDocumentor.class.php" startline="581" endline="596" visibility="protected"><params numrequired="1"><param name="sDocComment" null="null" type="string">The docComment.</param></params><return type="string">Trimmed docComment.</return><comment>Trim the docComment.

This will remove the comment operators, as well as a number of
tabulations from the beginning of each line equal to the number
of tabulations before the text on the first line.</comment></method><method name="writeClass" startline="83" endline="128" visibility="protected"><params numrequired="1"><param name="aClass" null="null" type="array">The class' data.</param></params><comment>Write a class.</comment></method><method name="writeConsts" startline="136" endline="147" visibility="protected"><params numrequired="1"><param name="aConsts" null="null" type="array">The constants' data.</param></params><comment>Write constants.</comment></method><method name="writeFunc" startline="156" endline="206" visibility="protected"><params numrequired="2"><param name="aFunc" null="null" type="array">The function or method's data.</param><param name="bIsMethod" null="null" type="bool">Whether the array given is for a method.</param></params><comment>Write a function or a method.</comment></method><method name="writeList" startline="216" endline="226" visibility="protected"><params numrequired="3"><param name="aList" null="null" type="array">The list of items to write.</param><param name="sParent" null="null" type="string">The name of the parent element that will contain the whole list.</param><param name="sChild" null="null" type="string">The name of the child elements that will contain each items.</param></params><comment>Write a list of elements.</comment></method><method name="writeOverloads" startline="234" endline="245" visibility="protected"><params numrequired="1"><param name="aOverloads" null="null" type="array">The overloads available for the associated function or method.</param></params><comment>Write overloads information.</comment></method><method name="writeParam" startline="253" endline="279" visibility="protected"><params numrequired="1"><param name="aParam" null="null" type="array">The parameter's data.</param></params><comment>Write a parameter.</comment></method><method name="writeProperty" startline="287" endline="309" visibility="protected"><params numrequired="1"><param name="aProperty" null="null" type="array">The property's data.</param></params><comment>Write a property.</comment></method><method name="writeReturn" startline="317" endline="326" visibility="protected"><params numrequired="1"><param name="aReturn" null="null" type="array">The return value's details.</param></params><comment>Write details about the return value of a function or method.</comment></method></methods><properties><property name="aClasses" visibility="protected"><comment>Stores parsed classes data.</comment></property><property name="aFuncs" visibility="protected"><comment>Stores parsed funcs data.</comment></property><property name="oXMLWriter" visibility="protected"><comment>The object used to write the documentor's data in XML format.</comment></property></properties><comment>Builds an XML based on PHP code.</comment></class><class name="weeEmailTemplate" module="wee/mail" filename="wee/mail/weeEmailTemplate.class.php" startline="30" endline="80" parent="weeTemplate"><implements><implement>Printable</implement></implements><methods><method name="__construct" filename="wee/output/weeTemplate.class.php" startline="59" endline="66" visibility="public"><params numrequired="1"><param name="sTemplate" null="null" type="string">The template name.</param><param name="aData" default="array()" type="array" hint="array">Data to be used in the template.</param></params><comment>Configure the filename and the data for this template.</comment></method><method name="addLinkArgs" filename="wee/output/weeTemplate.class.php" startline="75" endline="78" visibility="public"><params numrequired="1"><param name="aArgs" null="null" type="array">Parameters to be added.</param></params><comment>Add new values to the parameters to be added to links created
using the method mkLink.</comment></method><method name="flush" filename="wee/output/weeTemplate.class.php" startline="91" endline="96" visibility="protected"><sees><see>http://php.net/flush For more information about possible flush problems.</see></sees><comment>Flush the output buffer.

This effectively tries to push all the output so far to the browser.
All output will be sent, even buffered output.

Sometimes the buffer can't be sent directly to the browser, because
of the presence of certain modules or because of an old web server version.</comment></method><method name="mkLink" filename="wee/output/weeTemplate.class.php" startline="107" endline="133" visibility="protected"><params numrequired="1"><param name="sLink" null="null" type="string">Base URL, in its non-encoded form.</param><param name="aArgs" null="null" default="array()" type="array">Parameters to be added.</param></params><return type="string">Link newly created with the given parameters added.</return><comment>Create a link using a base url (which may or may not contain parameters)
and the values predefined previously and/or given by the $aArgs arguments.</comment></method><method name="render" filename="wee/output/weeTemplate.class.php" startline="139" endline="143" visibility="public"><comment>Output the template.</comment></method><method name="set" filename="wee/output/weeTemplate.class.php" startline="157" endline="165" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template.</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable.</param></params><return type="$this"/><comment>Adds a value to the data array.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="template" filename="wee/output/weeTemplate.class.php" startline="175" endline="180" visibility="protected"><params numrequired="1"><param name="sTemplate" null="null" type="string">The template name.</param><param name="aData" default="array()" type="array" hint="array">Data to be used in the template.</param></params><comment>Output another template.
Use this to embed a template inside another.</comment></method><method name="toString" startline="51" endline="79" visibility="public"><return type="string">The template.</return><comment>Return the template as a string after extracting the headers
from the template and making them accessible in $aHeaders.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>Data to be used in the template.</comment></property><property name="aHeaders" visibility="public"><comment>Email headers.
The headers are available from reading after calling the
function toString that renders the email template.

The possible headers include all the properties defined by
weeSendMail. This means that to fully define the From header,
for example, you must set From and FromName.</comment></property><property name="aLinkArgs" visibility="protected"><comment>Array containing predefined values to be added to the link parameters.</comment></property><property name="sFilename" visibility="protected"><comment>Filename of the template, including path and extension.</comment></property></properties><comment>Email templates handling.
Load, configure and display templates, while also retrieving headers
defined in the template.</comment></class><class name="weeEmailValidator" module="wee/validators" filename="wee/validators/weeEmailValidator.class.php" startline="31" endline="106" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" filename="wee/validators/weeValidator.class.php" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="51" endline="64" visibility="protected"><params numrequired="1"><param name="sInput" null="null" type="string">The input.</param></params><return type="bool">Whether the given input is a valid email.</return><comment>Returns whether the given input is a valid email.

Email addresses using simple hostnames as domain names are
reported as invalid.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="76" endline="91" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="101" endline="105" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" filename="wee/validators/weeValidator.class.php" startline="213" endline="217" visibility="protected"><comment>Validates the given value.

The default implementation sets the error to 'invalid' if the input is invalid
	   	accordingly to the isValidInput method.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A email validator.

This validator accepts the following parameters:
 * invalid_error: The error message if the email is not valid.</comment></class><class name="weeException" module="wee/exceptions" filename="wee/exceptions/weeException.class.php" startline="43" endline="311" type="final"><methods><method name="__construct" startline="55" endline="57" visibility="private"><comment>Namespace.</comment></method><method name="filterTrace" startline="67" endline="73" type="static" visibility="protected"><params numrequired="1"><param name="aTrace" type="array" hint="array">The original trace.</param></params><return type="array">The filtered trace.</return><comment>Filter a trace returned by an exception.
Top stack traces from the burn function or other methods of this class are removed from the trace.</comment></method><method name="formatTrace" startline="84" endline="109" type="static" visibility="public"><params numrequired="1"><param name="aTrace" type="array" hint="array">The trace array returned by either Exception::getTrace or debug_backtrace.</param></params><return type="string">The trace formatted as string.</return><comment>Format the trace in a way similar to Exception::getTraceAsString but compatible
with both Exception::getTrace and debug_backtrace. Extraneous information is
automatically removed making the resulting string identical for both types of errors.</comment></method><method name="getLevelName" startline="118" endline="138" type="static" visibility="public"><params numrequired="1"><param name="iLevel" null="null" type="int">The error level.</param></params><return type="string">The name of the error level.</return><comment>Returns the name of a error level, or &quot;Unknown PHP Error&quot; if the error is not known.</comment></method><method name="handleError" startline="154" endline="160" type="static" visibility="public"><params numrequired="4"><param name="iLevel" null="null" type="int">Contains the level of the error raised, as an integer.</param><param name="sMessage" null="null" type="string">Contains the error message, as a string.</param><param name="sFile" null="null" type="string">Contains the filename that the error was raised in, as a string.</param><param name="iLine" null="null" type="int">Contains the line number the error was raised at, as an integer.</param></params><sees><see>http://php.net/set_error_handler</see></sees><comment>Function called when a PHP error is triggered.

It gets the error's details and send them to the error page, then stops the execution.

If the request is an HTTP request, a 500 Internal Server Error code is sent.</comment></method><method name="handleException" startline="182" endline="245" type="static" visibility="public"><params numrequired="1"><param name="eException" type="exception" hint="Exception">The exception object.</param></params><sees><see>http://php.net/set_exception_handler</see><see>http://www.firephp.org/</see><see>http://getfirebug.com/</see></sees><comment>Function called when an exception is thrown and isn't catched by the script.

It gets the exception's details and send them to the error page.
It does not stop the script execution, since PHP does it itself after calling this function.

If the request is an HTTP request, and:
	* If the exception is an instance of RouteNotFoundException, send a 404 Not Found error
	* If the exception is an instance of NotPermittedException, send a 403 Forbidden error
	* Otherwise, send a 500 Internal Server Error

When DEBUG is enabled and the request is an HTTP request, send the exception to FirePHP
to ease debug through Firebug.</comment></method><method name="printError" startline="253" endline="258" type="static" visibility="protected"><params numrequired="1"><param name="sError" null="null" type="string">The error to print.</param></params><comment>Delete all buffers and print the given error.</comment></method><method name="printErrorPage" startline="267" endline="284" type="static" visibility="public"><params numrequired="1"><param name="aDebug" null="null" type="array">An array containing debugging information about the error or the exception.</param></params><comment>Delete all buffers and print the error page.
If no page was defined using weeException::setErrorPage, the default error page is shown.</comment></method><method name="setErrorPage" startline="307" endline="310" type="static" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The path to the new error page.</param></params><comment>Defines a custom error page to be shown when an error or an exception occur.
The page can be a PHP script, an HTML page or a plain-text file.

The $aDebug array is available in the code of this page. You can check if
DEBUG is defined and print the debug information if needed.

The $aDebug array contains the following values:
	* type: either 'error' or 'exception'
	* name: name of the error/exception
	* message: message associated with it
	* trace: complete trace leading to the uncatched exception
	* file: the file where the error occurred
	* line: the line where the error occurred

An error also has this value:
	* number: error's number</comment></method></methods><properties><property name="sErrorPagePath" visibility="protected" static="static"><comment>Path to a custom error page.</comment></property></properties><comment>Namespace for exception handling when the exception thrown is not catched.
You should never need to call these functions yourself.</comment></class><class name="weeExplainMySQLDatabase" module="wee/tests/db" filename="wee/tests/db/weeExplainMySQLDatabase.class.php" startline="30" endline="44" parent="weeMySQLDatabase"><warnings><warning>Experimental.</warning></warnings><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="70" endline="91" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><sees><see>http://php.net/mysql_connect</see></sees><throws><throw>ConfigurationException		The MySQL PHP extension is missing.</throw><throw>DatabaseException			Failed to connect to the database.</throw><throw>InvalidArgumentException	The given encoding is invalid.</throw></throws><comment>Initialises a new mysql database.

This database driver accepts the following parameters:
 * host:		The host of the database server.
 * user:		The user of the connection to the database.
 * password:	The password used by the user.
 * dbname:		The name of the database to select.
 * encoding:	The encoding to use for the database connection. Defaults to 'utf8'.

Refer to the documentation of mysql_connect to know the default values
of the `host`, `user` and `password` parameters.

This class always opens a new link to the given database.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="100" endline="103" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the database-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="40" endline="43" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weeMySQLResult">Object containing the EXPLAIN results.</return><comment>Run an EXPLAIN query instead of the normal query given in parameter.
Queries will fail if used with anything other than SELECT.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="131" endline="138" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier, wrapped around ticks.</return><throws><throw>InvalidArgumentException	The given value is not a valid mysql identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="146" endline="149" visibility="public"><comment>Returns the name of the mysql dbmeta class.</comment></method><method name="getPKId" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="161" endline="168" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">Unused in this database driver.</param></params><return type="string">The last value generated.</return><throws><throw>IllegalStateException	No sequence value has been generated yet by the database in this session.</throw></throws><comment>Returns the last sequence value generated by the database in this session.

In MySQL, it's the last value generated for an AUTO_INCREMENT column by an INSERT query.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="178" endline="181" visibility="public"><return type="int">The number of affected rows by the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="190" endline="193" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weeMySQLStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method><method name="selectDb" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="203" endline="208" visibility="public"><params numrequired="1"><param name="sDatabase" null="null" type="string">The database to use.</param></params><throws><throw>DatabaseException	Failed to select the database.</throw></throws><comment>Changes database without reconnecting.
The new database must be on the same host of the previous.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows by the last query.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (mysql).</comment></property></properties><comment>Encapsulate weeMySQLDatabase and run EXPLAIN on the queries sent to it.</comment></class><class name="weeExplainPgSQLDatabase" module="wee/tests/db" filename="wee/tests/db/weeExplainPgSQLDatabase.class.php" startline="30" endline="44" parent="weePgSQLDatabase"><warnings><warning>Experimental.</warning></warnings><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="63" endline="83" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><sees><see>http://php.net/pg_connect</see><see>http://php.net/pg_set_client_encoding</see></sees><comment>Initialises a new pgsql database.

This database driver accepts the same parameters as the ones allowed in the connection string
passed to pg_connect plus &quot;encoding&quot;, which is the encoding used by the client as specified
by pg_set_client_encoding.

The default encoding is UNICODE.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="92" endline="98" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the pgsql-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="40" endline="43" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weePgSQLResult">Object containing the EXPLAIN results.</return><comment>Run an EXPLAIN query instead of the normal query given in parameter.
Queries will fail if used with anything other than SELECT.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="129" endline="139" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape</param></params><return type="string">The escaped identifier, wrapped around double quotes</return><throws><throw>InvalidArgumentException	The given value is not a valid pgsql identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="147" endline="150" visibility="public"><comment>Returns the name of the pgsql dbmeta class.</comment></method><method name="getPKId" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="160" endline="179" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The primary key index name, if needed.</param></params><return type="string">The primary key index value.</return><throws><throw>IllegalStateException	No value has been generated yet for the given sequence in this session.</throw></throws><comment>Returns the primary key index value.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="189" endline="192" visibility="public"><return type="integer">The number of affected rows in the last query</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="202" endline="205" visibility="public"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string.</param></params><return type="weeDatabaseStatement">The prepared statement.</return><sees><see>weeDatabaseStatement</see></sees><comment>Prepare an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (pgsql).</comment></property></properties><comment>Encapsulate weePgSQLDatabase and run EXPLAIN on the queries sent to it.</comment></class><class name="weeExplainSQLResult" module="wee/tests/db" filename="wee/tests/db/weeExplainSQLResult.class.php" startline="31" endline="154" parent="weeDatabaseResult"><implements><implement>ArrayAccess</implement><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><warnings><warning>Experimental.</warning></warnings><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="45" endline="48" visibility="public"><params numrequired="1"><param name="oResult" type="object" hint="weeDatabaseResult">The objet created after executing the query.</param></params><comment>Initialize the class with the result of the query.</comment></method><method name="count" startline="57" endline="60" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.
A real number is returned, the number of rows returned by the EXPLAIN query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="68" endline="73" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="79" endline="82" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" startline="90" endline="93" visibility="public"><return type="$this"/><comment>This method is bypassed and only $this is returned.</comment></method><method name="fetchAll" startline="101" endline="104" visibility="public"><comment>This method is bypassed and only $this is returned.

return $this</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="offsetExists" startline="114" endline="117" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Always true.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Bypassed, always returns true.</comment></method><method name="offsetGet" startline="127" endline="130" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="$this"/><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Bypassed, return $this.</comment></method><method name="offsetSet" startline="140" endline="142" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Bypassed, do nothing.</comment></method><method name="offsetUnset" startline="151" endline="153" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Bypassed, do nothing.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="oResult" visibility="protected"><comment>Real results object returned by the query.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Wrapper around real weeDatabaseResult objects used to bypass calls made to them
and keep the EXPLAIN results available for later use.</comment></class><class name="weeFailSafeRouting" module="wee/app" filename="wee/app/weeFailSafeRouting.class.php" startline="31" endline="33" type="interface"><comment>Interface for `fail-safe routing` frames.

Frames implementing this interface will redirect all non-existing
events to the default event method.</comment></class><class name="weeFeed" module="wee/feed" filename="wee/feed/weeFeed.class.php" startline="30" endline="170" type="abstract"><implements><implement>Printable</implement></implements><methods><method name="__call" startline="61" endline="71" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string"/><param name="aArgs" null="null" type="array"/></params><overloads><overload func="author($aAuthor">Sets the feed author informations. The array can(TODO) have the following keys: name, email and TODO:uri.</overload><overload func="category($sCategory">Sets the category for all entries.</overload><overload func="link($sURL">Sets the link to the corresponding entry. TODO:check url</overload><overload func="logo($sIRI TODO:IRI">Sets the logo location.</overload><overload func="rights($sCopyright">Sets the feed copyright.</overload><overload func="subtitle($sSubTitle">Sets a small descriptive subtitle.</overload><overload func="title($sTitle">Sets the feed title.</overload><overload func="updated($sDate">Sets the feed build date. TODO:format</overload></overloads><comment>A few elements are required for each feed.
The following overloaded functions are defined for all the feed classes.

TODO:id
TODO:generator?</comment></method><method name="entries" startline="80" endline="86" visibility="public"><params numrequired="1"><param name="aEntries" null="null" type="array">The entries to add.</param></params><return type="$this"/><comment>Adds multiple entries.</comment></method><method name="entry" startline="106" endline="117" visibility="public"><params numrequired="1"><param name="aEntry" null="null" type="array">The entry data.</param></params><return type="$this"/><comment>Adds an entry.

Each entry can have one of the following keys:
	* author
	* category
	* link
	* summary
	* title
	* updated
	* TODO:id

//TODO:validates each entry elements</comment></method><method name="isElementValid" startline="126" endline="141" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given feed-related element is valid.</comment></method><method name="isEntryElementValid" startline="150" endline="163" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given entry-related element is valid.</comment></method><method name="render" startline="169" endline="169" type="abstract" visibility="public"><comment>Output the feed and send the required Content-Type header.</comment></method><method name="toString" filename="wee/wee.php" startline="392" endline="392" type="abstract" visibility="public"/></methods><properties><property name="aEntries" visibility="protected"><comment>Contains the entry-related data.
Each element of this array is an entry.</comment></property><property name="aFeed" visibility="protected"><comment>Contains the feed-related data.</comment></property></properties><comment>Base class for feed generation.

TODO:function to set feed/entry language? Another way to do that?</comment></class><class name="weeFetchMail" module="wee/mail" filename="wee/mail/weeFetchMail.class.php" startline="28" endline="121"><methods><method name="__construct" startline="56" endline="79" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Mailbox connection parameters.</param></params><sees><see>http://php.net/imap_open</see></sees><comment>Initialize the mailbox connection.

The mailbox connection parameters are as follow:
* host:		Host name of the server hosting the mailbox. Default: localhost.
* port:		Port of the imap service. Default: 143.
* mailbox:	Mailbox name. Default: INBOX.
* flags:	Connection flags. Optionnal.
* user:		User name.
* password:	User password.

For a detailed list of available flags, please see the PHP documentation
for imap_open.

The connection to the mailbox is read-only until tested enough.</comment></method><method name="fetchAll" startline="87" endline="96" visibility="public"><return type="array(weeFetchMailMessage)">All the messages from the mailbox.</return><comment>Fetch all the messages from the mailbox.</comment></method><method name="search" startline="109" endline="120" visibility="public"><params numrequired="1"><param name="sCriteria" null="null" type="string">Search query.</param></params><return type="array(weeFetchMailMessage)">Messages matching the search criteria.</return><comment>Performs a search in the mailbox.

The criteria is the same as described in the PHP documentation for the
parameter 'criteria' to the imap_search function.
	@see http://php.net/imap_search</comment></method></methods><properties><property name="rLink" visibility="protected"><comment>Link resource for this mailbox.</comment></property></properties><comment>Fetch mail from IMAP and POP3 mailboxes.</comment></class><class name="weeFetchMailAttachment" module="wee/mail" filename="wee/mail/weeFetchMailAttachment.class.php" startline="28" endline="87"><methods><method name="__construct" startline="49" endline="53" visibility="public"><params numrequired="2"><param name="sFilename" null="null" type="string">Attachment filename.</param><param name="sData" null="null" type="string">Attachment file data.</param></params><comment>Initialize the attachment object.</comment></method><method name="getData" startline="59" endline="62" visibility="public"><return type="string">The attachment file data.</return></method><method name="getFilename" startline="68" endline="71" visibility="public"><return type="string">The attachment filename.</return></method><method name="saveTo" startline="80" endline="86" visibility="public"><params numrequired="1"><param name="sDestination" null="null" type="string">The path of the destination file.</param><param name="sNewFilename" null="null" default="NULL" type="string">The destination filename. If null, it is the same filename as given in the email.</param></params><comment>Save the file to the given directory.</comment></method></methods><properties><property name="sData" visibility="protected"><comment>Attachment file data.</comment></property><property name="sFilename" visibility="protected"><comment>Attachment filename.</comment></property></properties><comment>Handles fetched email attachments.</comment></class><class name="weeFetchMailMessage" module="wee/mail" filename="wee/mail/weeFetchMailMessage.class.php" startline="28" endline="185" parent="weeDataSource"><implements><implement>ArrayAccess</implement></implements><methods><method name="__construct" startline="61" endline="65" visibility="public"><params numrequired="2"><param name="rLink" null="null" type="resource">Link resource for this message's mailbox.</param><param name="iMsg" null="null" type="int">Message identifier in the mailbox.</param></params><comment>Initialize the message object.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="getAttachments" startline="71" endline="93" visibility="public"><return type="array(weeFetchMailAttachment)">The attachments to this message.</return></method><method name="getBody" startline="99" endline="102" visibility="public"><return type="string">This message's contents.</return></method><method name="numAttachments" startline="108" endline="122" visibility="public"><return type="int">The number of files attached to this message.</return></method><method name="offsetExists" startline="132" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" startline="148" endline="159" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" startline="169" endline="172" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" startline="181" endline="184" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iMsg" visibility="protected"><comment>Message identifier in the mailbox.</comment></property><property name="iNbAttachments" visibility="protected"><comment>Number of attachments to this message.</comment></property><property name="oHeader" visibility="protected"><comment>Message header information.</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this message's mailbox.</comment></property></properties><comment>Handle fetched email messages.</comment></class><class name="weeForm" module="wee/form" filename="wee/form/weeForm.class.php" startline="32" endline="562"><implements><implement>Printable</implement></implements><methods><method name="__construct" startline="65" endline="98" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">The filename of the form XML (without path and extension).</param><param name="sAction" null="null" default="'add'" type="string">The action to be performed by the form (usually 'add', 'update' or 'delete').</param></params><comment>Initializes the form.</comment></method><method name="buildXSLStylesheet" startline="111" endline="130" visibility="protected"><return type="string">The built XSL stylesheet.</return><comment>Load and parse the XSL stylesheet and return it.

This method loads every available stylesheets and include them in the resulting file.
System stylesheets are first &quot;imported&quot; followed by user stylesheets getting &quot;included&quot;.

The form key is given to the stylesheet if any.</comment></method><method name="fill" startline="139" endline="148" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data used to fill the form's widgets values.</param></params><comment>Provide values to each widgets of the form.
When a value has no corresponding widget, it is discarded.</comment></method><method name="fillErrors" startline="157" endline="166" visibility="public"><params numrequired="1"><param name="aErrors" null="null" type="array"/></params><comment>Provide error messages to each widgets of the form.
When a message has no corresponding widget, it is discarded.</comment></method><method name="filter" startline="186" endline="202" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Data to filter.</param></params><return type="array">Filtered data.</return><comment>Removes any data sent not found in the widgets of the form.
Helps prevent data injection vulnerabilities.

Data injection vulnerabilities allow the attacker to inject data in a model
without prior validation. This can be used to update a field without the developer's consent.

For example let's say you have a form to update your profile's information. In the users
table you have a simple field 'isadmin' to determine who's administrator. An attacker could
submit the form with an additional 'isadmin' value set to 1, the whole POST data would be
sent to the model and the model would save the 'isadmin' value, granting administrator
rights to the attacker. Of course this imply that the model you are using allow the saving
of an 'isadmin' value, which may not always be the case if you write a custom save method.</comment></method><method name="helper" startline="212" endline="218" visibility="public"><params numrequired="2"><param name="sHelper" null="null" type="string">Class name of the helper you want to create.</param><param name="sWidget" null="null" type="string">Widget name in the XML, which is then selected using XPath.</param></params><return type="object">The helper of the type requested.</return><comment>Create and initialize an helper for the specified widget.</comment></method><method name="loadExternals" startline="228" endline="242" visibility="protected"><sees><see>weeForm::loadExternalsFromSet</see></sees><todos><todo>Write unit tests.</todo></todos><comment>Load external sources.

Currently the only external source type available is the 'set' source type.</comment></method><method name="loadExternalsFromSet" startline="254" endline="282" visibility="protected"><params numrequired="1"><param name="oNode" null="null" type="object">The external node.</param></params><comment>Load external definitions for the set source type.

The 'set' source type is using the format class::method and will instantiate
the class before calling the method (it's not a static call!). This source
type allows adding option groups and items directly taken from a set.</comment></method><method name="loadSetExternalsFromArray" startline="291" endline="312" visibility="protected"><params numrequired="2"><param name="oExternal" null="null" type="object">Load the items into this node.</param><param name="aItems" null="null" type="array">The items to load.</param></params><comment>Load the array returned by the external source set.</comment></method><method name="removeNodes" startline="320" endline="330" visibility="public"><params numrequired="1"><param name="sXPath" null="null" type="string">the XPath query.</param></params><comment>Remove every node of the form XML returned by the given XPath query.</comment></method><method name="setUserStylesheetsPath" startline="338" endline="341" visibility="public"><params numrequired="1"><param name="sUserStylesheetsPath" null="null" type="string">Path to the stylesheets to include.</param></params><comment>Set the user stylesheets path used to override default stylesheets.</comment></method><method name="toString" startline="349" endline="430" visibility="public"><return type="string">The resulting XHTML form.</return><comment>Output the form to string.</comment></method><method name="validate" startline="447" endline="522" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data to check (usually either $_GET or $_POST).</param></params><throws><throw>FormValidationException</throw></throws><comment>Validates the data against the form validators.

This method first checks if the form key is valid.
If it's not, it stops the validation and indicates there is an error.

If an error is found an exception FormValidationException is triggered.
Use this object to retrieve all the error messages and output them.
You can also give the array of errors directly to the weeForm::fillErrors
method to output all the messages after each widget.</comment></method><method name="xml" startline="530" endline="533" visibility="public"><return type="SimpleXML">SimpleXML object defining the form.</return><comment>Return the SimpleXML object for this form.</comment></method><method name="xpath" startline="542" endline="545" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The XPath query to run.</param></params><return type="array">The XPath result.</return><comment>Performs an XPath query on the form XML.</comment></method><method name="xpathOne" startline="555" endline="561" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">The XPath query to run.</param></params><return type="SimpleXMLElement">The element retrieved by the query.</return><comment>Performs an XPath query on the form XML and retrieve exactly one result.
The result has to exist otherwise an UnexpectedValueException is thrown.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>Data used to fill the form when generating it.</comment></property><property name="aErrors" visibility="protected"><comment>Error messages shown after each widget if provided.</comment></property><property name="oXML" visibility="protected"><comment>The SimpleXML object for this form.</comment></property><property name="sUserStylesheetsPath" visibility="protected"><comment>Path to user stylesheets.</comment></property></properties><comment>Automatically generate and validate forms using a simple XML file.
The generation is done using XSLT with a dynamically generated stylesheet.</comment></class><class name="weeFormOptionsHelper" module="wee/form" filename="wee/form/weeFormOptionsHelper.class.php" startline="31" endline="237"><methods><method name="__construct" startline="45" endline="48" visibility="public"><params numrequired="1"><param name="oXML" null="null" type="object">The SimpleXML element for the widget.</param></params><comment>Create the helper and give it the SimpleXML element for the associated widget.</comment></method><method name="addOption" startline="68" endline="71" visibility="public"><params numrequired="1"><param name="mOption" null="null" type="mixed">Option's information</param><param name="sDestXPath" null="null" default="NULL" type="string">XPath leading to the node where this option will be added</param></params><comment>Add an option to the selectable items.

The $mOption can be a string, a printable object or a an array.

The valid offsets of the array are:
	* label		(string):	The label to display
	* value		(mixed):	The value, if any (no value usually means it is a group node which can contain other items)
	* help		(string):	The help message
	* disabled	(string):	Whether this option is disabled (any non-empty value means disabled)
	* selected	(string):	Whether this option is selected (any non-empty value means selected)

If the option is a string or a printable object, it will be used as the label of the option.</comment></method><method name="addOptions" startline="81" endline="87" visibility="public"><params numrequired="1"><param name="aOptions" null="null" type="array">Array of options</param><param name="sDestXPath" null="null" default="NULL" type="string">XPath leading to the node where this option will be added</param></params><sees><see>addOption for $mOption's details</see></sees><comment>Add options to the selectable items.</comment></method><method name="createOption" startline="97" endline="117" visibility="protected"><params numrequired="2"><param name="mOption" null="null" type="mixed">Option's information</param><param name="oDest" null="null" type="object">XML node where this option will be created</param></params><sees><see>addOption for $mOption's details</see></sees><comment>Create the option in the XML tree.</comment></method><method name="isInOptions" startline="126" endline="135" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The value to check.</param></params><return type="bool">Whether the value is in the option list.</return><comment>Return whether the given value is in the option list.</comment></method><method name="isSelected" startline="144" endline="154" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The value to check.</param></params><return type="bool">Whether the value is selected.</return><comment>Return whether the given value is selected.</comment></method><method name="select" startline="162" endline="169" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value or array of values to select.</param></params><comment>Select the given value.</comment></method><method name="selectItem" startline="193" endline="204" visibility="protected"><params numrequired="1"><param name="sValue" null="null" type="string">The value to select.</param></params><comment>Select the given value.</comment></method><method name="selectNone" startline="175" endline="185" visibility="public"><comment>Unselect any selected value.</comment></method><method name="selectOne" startline="212" endline="216" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The value to select.</param></params><comment>Select the given value and unselect any other selected value.</comment></method><method name="translateDestXPath" startline="226" endline="236" visibility="protected"><params numrequired="1"><param name="sDestXPath" null="null" type="string">XPath statement</param></params><return type="weeSimpleXMLHack">XML node found at the specified path</return><comment>Return the XML node at the specified XPath.
There must be only ONE result returned.</comment></method></methods><properties><property name="oXML" visibility="protected"><comment>SimpleXML element for the associated widget.</comment></property></properties><comment>Helper for filling out options, selecting items and finding out what item
exist or is selected. Mostly useful for selectable widgets like a choice list.

To create an instance of this class you would usually call weeForm::helper.</comment></class><class name="weeFormUI" module="wee/ui" filename="wee/ui/weeFormUI.class.php" startline="28" endline="151" parent="weeUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="defaultEvent" startline="66" endline="91" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Process the event and if any data was sent, validate and submit it.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeUI.class.php" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" filename="wee/ui/weeUI.class.php" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" filename="wee/ui/weeUI.class.php" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setCallbacks" startline="103" endline="106" visibility="public"><params numrequired="0"><param name="aCallbacks" null="null" default="array()" type="array">Array containing (name =&gt; callback) associations.</param></params><comment>Set callback methods.

Possible callbacks are:
	* setup:	Called at the end of the method `setup`.
	* submit:	Called when valid data has been submitted.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" startline="117" endline="120" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* filename: Form's filename.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" startline="128" endline="138" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Initialize the form object.</comment></method><method name="submit" startline="146" endline="150" visibility="protected"><params numrequired="1"><param name="aData" null="null" type="array">Data submitted using the form.</param></params><comment>Method called when data has been submitted and validated.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aCallbacks" visibility="protected"><comment>Callback methods associated with this frame.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oForm" visibility="protected"><comment>The form object.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sAction" visibility="protected"><comment>The action to be performed by the form (usually 'add', 'update' or 'delete').</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>UI frame encapsulating a weeForm object.</comment></class><class name="weeFormValidator" module="wee/validators" filename="wee/validators/weeFormValidator.class.php" startline="28" endline="76" parent="weeValidator" type="abstract"><implements><implement>Serializable</implement></implements><methods><method name="__construct" filename="wee/validators/weeValidator.class.php" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" filename="wee/validators/weeValidator.class.php" startline="137" endline="137" type="abstract" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed">The input.</param></params><return type="bool">true if the input is valid, false otherwise.</return><comment>Returns whether the given input is valid for the validator.

Tests performed by this method shall not depend on optional arguments which have been passed
to the validator at construction time.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setFormData" startline="67" endline="75" visibility="public"><params numrequired="2"><param name="oWidget" type="object" hint="SimpleXMLElement">The widget to validate.</param><param name="aData" type="array" hint="array">The data to check, if applicable.</param></params><throws><throw>IllegalStateException	The validator has already been attached to a form widget.</throw></throws><todos><todo>Check that the given SimpleXMLElement is a 'widget' element.</todo></todos><comment>Sets the widget and complete data passed to the weeForm object.
Usually either $_POST or $_GET.</comment></method><method name="setValue" filename="wee/validators/weeValidator.class.php" startline="185" endline="193" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><comment>Attachs a value to the validator.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="48" endline="55" visibility="public"><throws><throw>IllegalStateException	The validator is not attached to a form widget.</throw></throws><comment>Validates the given input.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aData" visibility="protected"><comment>The data of the form.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages of the validator.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="oWidget" visibility="protected"><comment>The widget to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>Interface adding methods for form-only validators.</comment></class><class name="weeFrame" module="wee/app" filename="wee/app/weeFrame.class.php" startline="30" endline="287" type="abstract"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><methods><method name="__construct" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="dispatchEvent" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="loadTemplate" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="render" startline="173" endline="188" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setup" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.
If not defined its value will be the name of the frame's class.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Prefix to the template for the frame.
Define the template file path prefix, as in:
	* $sTemplate = $sBaseTemplatePrefix . $sBaseTemplate;</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property></properties><comment>Base class for frame objects.

Wrap a template, dispatch and handle events.</comment></class><class name="weeFsDirectoryModel" module="wee/model/fs" filename="wee/model/fs/weeFsDirectoryModel.class.php" startline="28" endline="47" parent="weeFsModel"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" filename="wee/model/fs/weeFsModel.class.php" startline="80" endline="95" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model and fetch related data
using the 'filename' key from the array parameter.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="delete" startline="34" endline="37" visibility="public"><comment>Delete the directory and its contents.</comment></method><method name="deleteContents" startline="43" endline="46" visibility="public"><comment>Delete the contents of the directory.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="exists" filename="wee/model/fs/weeFsModel.class.php" startline="114" endline="117" visibility="public"><return type="bool">Whether the file exist on the filesystem.</return><comment>Returns whether the file exist on the filesystem.</comment></method><method name="isReadable" filename="wee/model/fs/weeFsModel.class.php" startline="125" endline="128" visibility="public"><return type="bool">Whether the file is readable.</return><comment>Returns whether the file is readable.</comment></method><method name="isWritable" filename="wee/model/fs/weeFsModel.class.php" startline="136" endline="139" visibility="public"><return type="bool">Whether the file is writable.</return><comment>Returns whether the file is writable.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="makeLink" filename="wee/model/fs/weeFsModel.class.php" startline="147" endline="156" visibility="public"><params numrequired="1"><param name="sLinkFilename" null="null" type="string">Filename of the link to this file.</param></params><comment>Make a link to this file.</comment></method><method name="moveTo" filename="wee/model/fs/weeFsModel.class.php" startline="164" endline="174" visibility="public"><params numrequired="1"><param name="sNewFilename" null="null" type="string">The new filename of the file.</param></params><comment>Move the file.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="save" filename="wee/model/fs/weeFsModel.class.php" startline="186" endline="200" visibility="public"><todos><todo>Save more stuff?</todo><todo>Save should write a new directory/link and not a plain file if the file doesn't exist and it is a directory/link...</todo></todos><comment>Saves all the changes made to this object.

Only move the file if filename changed, and do a touch on it
with the modification and access times.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="update" filename="wee/model/fs/weeFsModel.class.php" startline="206" endline="215" visibility="public"><comment>Update our data array with up to date stats.</comment></method><method name="updateName" filename="wee/model/fs/weeFsModel.class.php" startline="221" endline="230" visibility="protected"><comment>Update the extension of the file.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bExists" visibility="protected"><comment>Whether the file exists on the filesystem.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sFilename" visibility="protected"><comment>Current filename of the file for this model.

We must keep a copy here because changing the filename in $aData
will result in a file move, but that move will not happen before
the user apply the changes using save.</comment></property></properties><comment>Model for filesystem directories.</comment></class><class name="weeFsFileModel" module="wee/model/fs" filename="wee/model/fs/weeFsFileModel.class.php" startline="28" endline="79" parent="weeFsModel"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" filename="wee/model/fs/weeFsModel.class.php" startline="80" endline="95" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model and fetch related data
using the 'filename' key from the array parameter.</comment></method><method name="appendContents" startline="36" endline="39" visibility="public"><params numrequired="1"><param name="sContents" null="null" type="string">Contents to be appended to the file.</param></params><comment>Append content to the file.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="delete" filename="wee/model/fs/weeFsModel.class.php" startline="101" endline="106" visibility="public"><comment>Delete the file from the filesystem.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="exists" filename="wee/model/fs/weeFsModel.class.php" startline="114" endline="117" visibility="public"><return type="bool">Whether the file exist on the filesystem.</return><comment>Returns whether the file exist on the filesystem.</comment></method><method name="getContents" startline="47" endline="50" visibility="public"><return type="string">The contents of the file.</return><comment>Returns the contents of the file.</comment></method><method name="isReadable" filename="wee/model/fs/weeFsModel.class.php" startline="125" endline="128" visibility="public"><return type="bool">Whether the file is readable.</return><comment>Returns whether the file is readable.</comment></method><method name="isWritable" filename="wee/model/fs/weeFsModel.class.php" startline="136" endline="139" visibility="public"><return type="bool">Whether the file is writable.</return><comment>Returns whether the file is writable.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="makeLink" filename="wee/model/fs/weeFsModel.class.php" startline="147" endline="156" visibility="public"><params numrequired="1"><param name="sLinkFilename" null="null" type="string">Filename of the link to this file.</param></params><comment>Make a link to this file.</comment></method><method name="moveTo" filename="wee/model/fs/weeFsModel.class.php" startline="164" endline="174" visibility="public"><params numrequired="1"><param name="sNewFilename" null="null" type="string">The new filename of the file.</param></params><comment>Move the file.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="open" startline="59" endline="64" visibility="public"><params numrequired="0"><param name="sMode" null="null" default="'r'" type="string">Specifies the type of access you require to the file. @see http://php.net/fopen</param></params><return type="splFileObject">The opened file object.</return><comment>Open the file for complex manipulation of its contents.</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="save" filename="wee/model/fs/weeFsModel.class.php" startline="186" endline="200" visibility="public"><todos><todo>Save more stuff?</todo><todo>Save should write a new directory/link and not a plain file if the file doesn't exist and it is a directory/link...</todo></todos><comment>Saves all the changes made to this object.

Only move the file if filename changed, and do a touch on it
with the modification and access times.</comment></method><method name="setContents" startline="73" endline="78" visibility="public"><params numrequired="1"><param name="sContents" null="null" type="string">The new contents of the file.</param></params><comment>Set the contents of the file.
Replace existing contents if any.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="update" filename="wee/model/fs/weeFsModel.class.php" startline="206" endline="215" visibility="public"><comment>Update our data array with up to date stats.</comment></method><method name="updateName" filename="wee/model/fs/weeFsModel.class.php" startline="221" endline="230" visibility="protected"><comment>Update the extension of the file.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bExists" visibility="protected"><comment>Whether the file exists on the filesystem.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sFilename" visibility="protected"><comment>Current filename of the file for this model.

We must keep a copy here because changing the filename in $aData
will result in a file move, but that move will not happen before
the user apply the changes using save.</comment></property></properties><comment>Model for filesystem files.</comment></class><class name="weeFsLinkModel" module="wee/model/fs" filename="wee/model/fs/weeFsLinkModel.class.php" startline="31" endline="72" parent="weeFsModel"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" startline="52" endline="59" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model and fetch related data
using the 'filename' key from the array parameter.

This function also retrieve the linked file filename
and store it in the 'linkto' key.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="delete" filename="wee/model/fs/weeFsModel.class.php" startline="101" endline="106" visibility="public"><comment>Delete the file from the filesystem.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="exists" filename="wee/model/fs/weeFsModel.class.php" startline="114" endline="117" visibility="public"><return type="bool">Whether the file exist on the filesystem.</return><comment>Returns whether the file exist on the filesystem.</comment></method><method name="getTarget" startline="67" endline="71" visibility="public"><return type="weeFsModel">The model for the linked file object.</return><comment>Returns the model for the linked file object.</comment></method><method name="isReadable" filename="wee/model/fs/weeFsModel.class.php" startline="125" endline="128" visibility="public"><return type="bool">Whether the file is readable.</return><comment>Returns whether the file is readable.</comment></method><method name="isWritable" filename="wee/model/fs/weeFsModel.class.php" startline="136" endline="139" visibility="public"><return type="bool">Whether the file is writable.</return><comment>Returns whether the file is writable.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="makeLink" filename="wee/model/fs/weeFsModel.class.php" startline="147" endline="156" visibility="public"><params numrequired="1"><param name="sLinkFilename" null="null" type="string">Filename of the link to this file.</param></params><comment>Make a link to this file.</comment></method><method name="moveTo" filename="wee/model/fs/weeFsModel.class.php" startline="164" endline="174" visibility="public"><params numrequired="1"><param name="sNewFilename" null="null" type="string">The new filename of the file.</param></params><comment>Move the file.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="save" filename="wee/model/fs/weeFsModel.class.php" startline="186" endline="200" visibility="public"><todos><todo>Save more stuff?</todo><todo>Save should write a new directory/link and not a plain file if the file doesn't exist and it is a directory/link...</todo></todos><comment>Saves all the changes made to this object.

Only move the file if filename changed, and do a touch on it
with the modification and access times.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="update" filename="wee/model/fs/weeFsModel.class.php" startline="206" endline="215" visibility="public"><comment>Update our data array with up to date stats.</comment></method><method name="updateName" filename="wee/model/fs/weeFsModel.class.php" startline="221" endline="230" visibility="protected"><comment>Update the extension of the file.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bExists" visibility="protected"><comment>Whether the file exists on the filesystem.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sFilename" visibility="protected"><comment>Current filename of the file for this model.

We must keep a copy here because changing the filename in $aData
will result in a file move, but that move will not happen before
the user apply the changes using save.</comment></property><property name="sSet" visibility="protected"><comment>Set of filesystem objects.

You must modify it if you use getTarget and wrote
a child class to weeFsSet.</comment></property></properties><comment>Model for filesystem links.

This class adds the following key:
* linkto	The filename of the linked file.</comment></class><class name="weeFsModel" module="wee/model/fs" filename="wee/model/fs/weeFsModel.class.php" startline="55" endline="231" parent="weeModel" type="abstract"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><todos><todo>Normalise paths.</todo></todos><methods><method name="__construct" startline="80" endline="95" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model and fetch related data
using the 'filename' key from the array parameter.</comment></method><method name="current" filename="wee/model/weeModel.class.php" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="delete" startline="101" endline="106" visibility="public"><comment>Delete the file from the filesystem.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="exists" startline="114" endline="117" visibility="public"><return type="bool">Whether the file exist on the filesystem.</return><comment>Returns whether the file exist on the filesystem.</comment></method><method name="isReadable" startline="125" endline="128" visibility="public"><return type="bool">Whether the file is readable.</return><comment>Returns whether the file is readable.</comment></method><method name="isWritable" startline="136" endline="139" visibility="public"><return type="bool">Whether the file is writable.</return><comment>Returns whether the file is writable.</comment></method><method name="key" filename="wee/model/weeModel.class.php" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="makeLink" startline="147" endline="156" visibility="public"><params numrequired="1"><param name="sLinkFilename" null="null" type="string">Filename of the link to this file.</param></params><comment>Make a link to this file.</comment></method><method name="moveTo" startline="164" endline="174" visibility="public"><params numrequired="1"><param name="sNewFilename" null="null" type="string">The new filename of the file.</param></params><comment>Move the file.</comment></method><method name="next" filename="wee/model/weeModel.class.php" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" filename="wee/model/weeModel.class.php" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/model/weeModel.class.php" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/model/weeModel.class.php" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/model/weeModel.class.php" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="rewind" filename="wee/model/weeModel.class.php" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="save" startline="186" endline="200" visibility="public"><todos><todo>Save more stuff?</todo><todo>Save should write a new directory/link and not a plain file if the file doesn't exist and it is a directory/link...</todo></todos><comment>Saves all the changes made to this object.

Only move the file if filename changed, and do a touch on it
with the modification and access times.</comment></method><method name="setFromArray" filename="wee/model/weeModel.class.php" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" filename="wee/model/weeModel.class.php" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="update" startline="206" endline="215" visibility="public"><comment>Update our data array with up to date stats.</comment></method><method name="updateName" startline="221" endline="230" visibility="protected"><comment>Update the extension of the file.</comment></method><method name="valid" filename="wee/model/weeModel.class.php" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bExists" visibility="protected"><comment>Whether the file exists on the filesystem.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sFilename" visibility="protected"><comment>Current filename of the file for this model.

We must keep a copy here because changing the filename in $aData
will result in a file move, but that move will not happen before
the user apply the changes using save.</comment></property></properties><comment>Base class for defining a model for filesystem objects.

If the file exists the constructor will also make available
the following keys (use $this[$sKey] to access them):
* filename:		path + filename [2]
* name:			file name (everything after / in filename)
* extension:	file extension (if any)
* dev:			device number
* ino:			inode number
* mode:			inode protection mode
* nlink:		number of links
* uid:			userid of owner
* gid:			groupid of owner
* rdev:			device type, if inode device [1]
* size:			size in bytes
* atime:		time of last access (Unix timestamp) [2]
* mtime:		time of last modification (Unix timestamp) [2]
* ctime:		time of last inode change (Unix timestamp)
* blksize:		blocksize of filesystem IO [1]
* blocks:		number of blocks allocated [1]

	* [1] not available on Windows (returns -1)
	* [2] can be modified and applied using save()

You can rewrite everything, however your changes may be overwritten
by using some of the methods.</comment></class><class name="weeFsSet" module="wee/model/fs" filename="wee/model/fs/weeFsSet.class.php" startline="28" endline="86" parent="weeSet"><methods><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" startline="55" endline="64" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">Create and return a model for this parameter.</param></params><todos><todo>Test if the file exists and fail if it doesn't</todo></todos><comment>Returns a specific element.</comment></method><method name="fetchPath" startline="72" endline="85" visibility="public"><params numrequired="1"><param name="sPath" null="null" type="string">Path to the files to return.</param></params><comment>Returns all the elements in the specified path.</comment></method><method name="getModelName" filename="wee/model/weeSet.class.php" startline="44" endline="50" visibility="public"><return type="string">The model class name.</return><comment>Returns the model name associated with this set.</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sDirectoryModel" visibility="protected"><comment>Model for directories.</comment></property><property name="sLinkModel" visibility="protected"><comment>Model for links.</comment></property><property name="sModel" visibility="protected"><comment>Model for files.</comment></property></properties><comment>Set of filesystem objects.</comment></class><class name="weeGetTextDictionary" module="wee/l10n" filename="wee/l10n/weeGetTextDictionary.class.php" startline="28" endline="198"><methods><method name="__construct" startline="65" endline="69" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">The name of the binary MO file containing the dictionary.</param></params><comment>Constructs a new gettext dictionary.</comment></method><method name="getCharset" startline="76" endline="95" visibility="public"><return type="string">The charset of the strings.</return><comment>Returns the charset of the strings in the dictionary.</comment></method><method name="getHeaders" startline="102" endline="118" visibility="public"><return type="array">The array of headers.</return><comment>Returns the headers of the dictionary.</comment></method><method name="getPluralFormIndex" startline="137" endline="165" visibility="private"><params numrequired="1"><param name="i" null="null" type="int">The given number.</param></params><return type="int">The index of the plural form to use.</return><comment>Returns the index of the plural form to use for the given number.</comment></method><method name="getPluralFormIndexDefault" startline="172" endline="175" visibility="private"><params numrequired="1"><param name="i" null="null" type="int"/></params><sees><see>getPluralForm()</see></sees><comment>Default implementation of getPluralForm().</comment></method><method name="getPluralTranslation" startline="183" endline="197" visibility="public"><params numrequired="3"><param name="sString" null="null" type="string"/><param name="sPluralString" null="null" type="string"/><param name="i" null="null" type="int">The number which is used to check which translated plural form should be used.</param></params><return type="string">The translation of the string, if any.</return><comment>Returns the translation of a given string and its plural form.</comment></method><method name="getTranslation" startline="126" endline="129" visibility="public"><params numrequired="1"><param name="sString" null="null" type="string">The string to be translated.</param></params><return type="string">The translation of the string.</return><comment>Returns the translation of a given string, if any.</comment></method></methods><properties><property name="aHeaders" visibility="private"><comment>The header dictionary.</comment></property><property name="aStrings" visibility="private"><comment>The associative array of the strings contained in the gettext dictionary.</comment></property><property name="iPluralFormsCount" visibility="private"><comment>The plural forms count.</comment></property><property name="mPluralFormIndexFunction" visibility="private"><comment>The plural form index function.</comment></property><property name="sCharset" visibility="private"><comment>The charset of the strings in the dictionary.</comment></property></properties><comment>Represents a gettext dictionary.</comment></class><class name="weeGetTextReader" module="wee/l10n" filename="wee/l10n/weeGetTextReader.class.php" startline="30" endline="225"><methods><method name="__construct" startline="59" endline="92" visibility="public"><params numrequired="1"><param name="sFilename" null="null" type="string">The name of the file to be read.</param></params><throws><throw>FileNotFoundException		The given file does not exist.</throw><throw>NotPermittedException		The given file could not be opened.</throw><throw>UnexpectedValueException	The given file does not seem to be a MO file.</throw></throws><comment>Initialises a new gettext binary MO file reader.</comment></method><method name="getStrings" startline="99" endline="102" visibility="public"><return type="array">The strings and their translations compiled in the MO file.</return><comment>Returns an associative array of the strings compiled in the MO file.</comment></method><method name="read" startline="112" endline="119" visibility="protected"><params numrequired="1"><param name="iBytes" null="null" type="int">The amount of bytes to be read.</param></params><return type="string">The read string.</return><throws><throw>EndOfFileException	The end of the file has been reached.</throw></throws><comment>Reads a given amount of bytes from the file.</comment></method><method name="readInt" startline="129" endline="137" visibility="protected"><return type="int">The read integer.</return><comment>Reads an integer from the file stream.

This method automatically handles endianness.</comment></method><method name="readString" startline="184" endline="191" visibility="protected"><params numrequired="2"><param name="iOffset" null="null" type="int">The offset where the string begins in the file.</param><param name="iLength" null="null" type="int">The length of the string to be read.</param></params><return type="string">The read string.</return><comment>Reads a string of a given size from the file stream at a given offset.</comment></method><method name="readStrings" startline="200" endline="206" visibility="protected"><params numrequired="1"><param name="aTable" null="null" type="array">The table referencing the strings to be read.</param></params><return type="array">The read strings.</return><comment>Reads strings referenced in a given table.</comment></method><method name="readTable" startline="147" endline="154" visibility="protected"><params numrequired="2"><param name="iOffset" null="null" type="int">The offset where the table starts in the file.</param><param name="iSize" null="null" type="int">The size of the table to be read.</param></params><return type="array">The read table.</return><comment>Reads a table of a given size from the file stream at a given offset.</comment></method><method name="readTableEntry" startline="166" endline="174" visibility="protected"><return type="array">The read table entry.</return><comment>Reads a table entry from the file stream.

The returned table entry is an associative array with 2 keys:
* length: The length of the string.
* offset: The offset where the string begins in the file.</comment></method><method name="seek" startline="217" endline="224" visibility="protected"><params numrequired="1"><param name="iPosition" null="null" type="int">The position to be sought.</param><param name="iWhence" null="null" type="int">The relative position from where to start.</param></params><sees><see>fseek()</see></sees><throws><throw>EndOfFileException	Unexpected end of file while seeking through the file.</throw></throws><comment>Seeks a given position in the file.</comment></method></methods><properties><property name="aStrings" visibility="protected"><comment>The strings compiled in the binary MO file.</comment></property><property name="bLittleEndian" visibility="protected"><comment>Is the file compiled with little endianness?</comment></property><property name="rHandle" visibility="protected"><comment>The file stream.</comment></property></properties><comment>Gettext's binary MO file reader.
For more informations, see the gettext documentation:
	http://www.gnu.org/software/gettext/manual/</comment></class><class name="weeLaTeXOutput" module="wee/output" filename="wee/output/weeLaTeXOutput.class.php" startline="28" endline="63" parent="weeOutput"><methods><method name="__construct" filename="wee/output/weeOutput.class.php" startline="41" endline="48" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><comment>Initialize the output driver. Start output buffering if requested.</comment></method><method name="bufferize" filename="wee/output/weeOutput.class.php" startline="56" endline="70" visibility="public"><params numrequired="0"><param name="bCompressOutput" null="null" default="true" type="bool">Whether to compress the output before sending it to the browser (if available).</param></params><comment>Bufferize the output. Enable GZIP compression on demand if available.</comment></method><method name="decode" startline="37" endline="44" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to decode.</param></params><return type="string">The decoded value.</return><comment>Decode a given value.</comment></method><method name="encode" startline="55" endline="62" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">Data to encode.</param></params><return type="string">Data encoded.</return><comment>Encode data to be displayed.

According to the LaTeX tutorial, the following need escaping: # $ % &amp; ~ _ ^ \ { }</comment></method><method name="encodeArray" filename="wee/output/weeOutput.class.php" startline="100" endline="114" visibility="public"><params numrequired="1"><param name="a" null="null" type="array">Data array to encode.</param></params><return type="array">Data array encoded.</return><comment>Encode an array of data to be displayed.

Mainly used by weeTemplate to encode the data it received.
You should not have to use this method.</comment></method><method name="instance" filename="wee/output/weeOutput.class.php" startline="123" endline="130" type="static" visibility="public"><return type="weeOutput">The selected output instance.</return><comment>Return the currently selected instance.
Throw an exception if no instances are selected.</comment></method><method name="select" filename="wee/output/weeOutput.class.php" startline="139" endline="144" type="static" visibility="public"><params numrequired="1"><param name="oOutput" type="object" hint="weeOutput">New driver to be used.</param></params><return type="weeOutput">The driver being replaced.</return><comment>Select a new output driver and return the previous one.</comment></method></methods><properties><property name="oInstance" visibility="protected" static="static"><comment>Instance of the current output driver.
There can only be one at the same time.</comment></property></properties><comment>LaTeX output driver.</comment></class><class name="weeLDAP" module="wee/ldap" filename="wee/ldap/weeLDAP.class.php" startline="28" endline="358"><methods><method name="__clone" startline="48" endline="59" visibility="public"><throws><throw>LDAPException If an error occurs during the connection.</throw></throws><comment>Create a copy of an weeLDAP object and establish a new simple connection to the current LDAP server.</comment></method><method name="__construct" startline="77" endline="93" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><throws><throw>ConfigurationException LDAP support must be enabled.</throw><throw>InvalidArgumentException The host parameter must be specified.</throw><throw>LDAPException If an error occurs.</throw></throws><comment>Establish a simple connection to an LDAP server on a specified hostname and port, and bind to the LDAP directory with the specified RDN and password.
For binding anonymously, you don't need to specify RDN and password.

Parameters:
	* host: The LDAP server.
	* port: The port to connect.
	* rdn: The Relative Distinguished Name.
	* password: The password to use.</comment></method><method name="copy" startline="151" endline="160" visibility="public"><params numrequired="2"><param name="sFromDN" null="null" type="string">The actual Distinguished Name.</param><param name="sToDN" null="null" type="string">The new Distinguished Name.</param></params><throws><throw>InvalidArgumentException The DNs must be different.</throw></throws><comment>Copy the entry.</comment></method><method name="delete" startline="169" endline="177" visibility="public"><params numrequired="1"><param name="sDN" null="null" type="string">The Distinguished Name of an LDAP entity.</param></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Delete an entry in the LDAP directory.</comment></method><method name="escape" startline="102" endline="121" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The string to escape.</param></params><return type="string">The escaped string.</return><comment>Escape the value of the component of a DN string.</comment></method><method name="escapeFilter" startline="130" endline="141" visibility="public"><params numrequired="1"><param name="sFilter" null="null" type="string">The filter to escape.</param></params><return type="string">The escaped filter.</return><comment>Escape the given filter.</comment></method><method name="fetch" startline="187" endline="204" visibility="public"><params numrequired="1"><param name="sDN" null="null" type="string">The Distinguished Name of an LDAP entity.</param><param name="sFilter" null="null" default="'objectClass=*'" type="string">The filter for the read by default objectClass=*.</param></params><return type="weeLDAPEntry">An instance of weeLDAPEntry.</return><comment>Read an entry.</comment></method><method name="insert" startline="215" endline="225" visibility="public"><params numrequired="2"><param name="sDN" null="null" type="string">The Distinguished Name.</param><param name="aEntry" null="null" type="array">Entry attributes for the specified DN.</param></params><throws><throw>InvalidArgumentException $aEntry must be an array.</throw><throw>LDAPException If an error occurs.</throw></throws><comment>Add an entry to a specific DN.</comment></method><method name="isEqual" startline="237" endline="247" visibility="public"><params numrequired="3"><param name="sDN" null="null" type="string">The Distinguished Name of an LDAP entity.</param><param name="sAttribute" null="null" type="string">The attribute name.</param><param name="sValue" null="null" type="string">The compared value.</param></params><return type="bool">Whether the value matched.</return><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Compare the value of the attribute of an entry for a specific DN.</comment></method><method name="modify" startline="257" endline="265" visibility="public"><params numrequired="2"><param name="sDN" null="null" type="string">The Distinguished Name of an LDAP entity.</param><param name="aEntry" null="null" type="array">Entry attributes for the specified DN.</param></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Modify the existing entries in the LDAP directory.</comment></method><method name="move" startline="277" endline="295" visibility="public"><params numrequired="2"><param name="sFromDN" null="null" type="string">The actual Distinguished Name.</param><param name="sToDN" null="null" type="string">The new Distinguished Name.</param></params><throws><throw>ConfigurationException The server must be configured to use LDAPv3.</throw><throw>UnexpectedValueException If an error occurs.</throw><throw>LDAPException If an error occurs.</throw></throws><comment>Move the entry.</comment></method><method name="rebind" startline="305" endline="313" visibility="public"><params numrequired="0"><param name="sRDN" null="null" default="NULL" type="string">The Relative Distinguished Name.</param><param name="sPassword" null="null" default="NULL" type="string">The password to use.</param></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Rebind to the LDAP directory with the specified RDN and password.</comment></method><method name="rename" startline="323" endline="331" visibility="public"><params numrequired="2"><param name="sFromDN" null="null" type="string">The actual Distinguished Name.</param><param name="sToRDN" null="null" type="string">The new Relative Distinguished Name.</param></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Rename the entry.</comment></method><method name="search" startline="343" endline="357" visibility="public"><params numrequired="2"><param name="sDN" null="null" type="string">The Distinguished Name of an LDAP entity.</param><param name="sFilter" null="null" type="string">The filter for the search.</param><param name="bRecursive" null="null" default="true" type="bool">Whether to include subdirectories.</param></params><return type="weeLDAPResult">The object containing the search result.</return><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Perform the search for a specified filter in the directory.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>The parameter's data.</comment></property><property name="rLink" visibility="protected"><comment>LDAP link identifier.</comment></property></properties><comment>Class for accessing LDAP-based directories.</comment></class><class name="weeLDAPEntry" module="wee/ldap" filename="wee/ldap/weeLDAPEntry.class.php" startline="28" endline="252"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" startline="61" endline="86" visibility="public"><params numrequired="2"><param name="rLink" null="null" type="resource">The connection link identifier.</param><param name="rEntry" null="null" type="resource">The entry link identifier.</param></params><comment>Initialise the weeLDAPEntry object.</comment></method><method name="current" startline="95" endline="98" visibility="public"><return type="array">The attribute values.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the values of the current attribute.</comment></method><method name="getDN" startline="107" endline="117" visibility="public"><return type="string">The DN of the current entry.</return><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Get the DN of the entry.</comment></method><method name="key" startline="125" endline="128" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current attribute.</comment></method><method name="next" startline="136" endline="139" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next attribute.</comment></method><method name="offsetExists" startline="149" endline="152" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset index.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Return whether offset exists.</comment></method><method name="offsetGet" startline="162" endline="165" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset index.</param></params><return type="array">Attribute values at given offset.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Return attribute at given offset.</comment></method><method name="offsetSet" startline="176" endline="189" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><throws><throw>InvalidArgumentException The value must be an array with consecutive indices 0, 1, ...</throw></throws><comment>Set a new value for the given offset.</comment></method><method name="offsetUnset" startline="198" endline="201" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unset offset.</comment></method><method name="rewind" startline="209" endline="212" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first attribute.</comment></method><method name="toArray" startline="220" endline="223" visibility="public"><return type="array">The attributes as an array.</return><comment>Return all the attributes of the current entry as an array.</comment></method><method name="update" startline="231" endline="239" visibility="public"><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Save the attributes and their values to the server for the current entry.</comment></method><method name="valid" startline="248" endline="251" visibility="public"><return type="bool">Whether there is a current attribute after calls to rewind() or next().</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current attribute after calls to rewind() or next().</comment></method></methods><properties><property name="aAttributes" visibility="protected"><comment>The attributes for the current entry.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>Key of the current iterated element.</comment></property><property name="rEntry" visibility="protected"><comment>LDAP link identifier of the entry.</comment></property><property name="rLink" visibility="protected"><comment>LDAP connection link identifier.</comment></property></properties><comment>Class for managing attributes of an LDAP entry.</comment></class><class name="weeLDAPResult" module="wee/ldap" filename="wee/ldap/weeLDAPResult.class.php" startline="28" endline="213"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__construct" startline="62" endline="73" visibility="public"><params numrequired="2"><param name="rLink" null="null" type="resource">The connection link identifier.</param><param name="rResult" null="null" type="resource">The search result link identifier.</param></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Initialise the WeeLDAPResult object.</comment></method><method name="count" startline="155" endline="165" visibility="public"><return type="integer">Number of the entries found in the current result.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceCountable.html</see></sees><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Return the number of entries found in the current result.</comment></method><method name="current" startline="82" endline="85" visibility="public"><return type="weeLDAPEntry">An instance of weeLDAPEntry.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="fetch" startline="94" endline="104" visibility="public"><return type="weeLDAPEntry">An instance of weeLDAPEntry.</return><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Fetch the first entry.</comment></method><method name="fetchAll" startline="112" endline="121" visibility="public"><return type="array">Instances of weeLDAPEntry.</return><comment>Fetch all entries from the current result.</comment></method><method name="key" startline="129" endline="132" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" startline="141" endline="145" visibility="public"><return type="weeLDAPEntry">An instance of weeLDAPEntry.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="rewind" startline="174" endline="184" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Rewind the Iterator to the first element.</comment></method><method name="sort" startline="192" endline="200" visibility="public"><params numrequired="1"><param name="sFilter" null="null" type="string"/></params><throws><throw>LDAPException If an error occurs.</throw></throws><comment>Sort the entries found in the current result, by the specified filter.</comment></method><method name="valid" startline="209" endline="212" visibility="public"><return type="bool">whether there is a current element after calls to rewind() or next().</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="iCurrentIndex" visibility="protected"><comment>Key of the current iterated element.</comment></property><property name="rEntry" visibility="protected"><comment>LDAP link identifier of the current entry.</comment></property><property name="rLink" visibility="protected"><comment>LDAP link identifier.</comment></property><property name="rResult" visibility="protected"><comment>LDAP link identifier of the result.</comment></property></properties><comment>Class for entries results.</comment></class><class name="weeListUI" module="wee/ui" filename="wee/ui/weeListUI.class.php" startline="28" endline="172" parent="weeContainerUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="addFrame" filename="wee/ui/weeContainerUI.class.php" startline="59" endline="67" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string">Identifier for the given frame.</param><param name="oFrame" null="null" type="object">Frame to be added to the container.</param></params><comment>Add an UI frame to the container.

Keep in mind though that if the frame doesn't implement weeFailSafeRouting,
there might be an exception triggered when the event doesn't exist in it.</comment></method><method name="addGlobalAction" startline="70" endline="73" visibility="public"><params numrequired="1"><param name="aAction" type="array" hint="array">The global action parameters.</param></params><comment>Add a new global action.

A global action is identified by the following parameters:
	* link: URL to the action's event
	* label: Label describing the action</comment></method><method name="addItemAction" startline="85" endline="88" visibility="public"><params numrequired="1"><param name="aAction" type="array" hint="array">The item action parameters.</param></params><comment>Add a new item action.

An item action is identified by the following parameters:
	* link: URL to the action's event
	* label: Label describing the action</comment></method><method name="child" filename="wee/ui/weeContainerUI.class.php" startline="76" endline="79" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">Identifier for the given frame.</param></params><return type="weeUI">UI frame.</return><comment>Return a child UI frame.</comment></method><method name="defaultEvent" startline="97" endline="141" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Send the list configuration and data to the template.
Also create a weePaginationUI object for paginating the list.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getChildIdPrefix" filename="wee/ui/weeContainerUI.class.php" startline="101" endline="104" visibility="protected"><return type="Prefix">for child frame identifiers.</return><comment>Return the prefix for the child frame identifiers.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeContainerUI.class.php" startline="112" endline="129" visibility="public"><comment>Return the taconite object for this frame and all its children.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noChildTaconite" filename="wee/ui/weeContainerUI.class.php" startline="136" endline="140" visibility="public"><comment>Tells the child frames to not use taconite.
Use this when you want to return the rendered template in your taconite response.</comment></method><method name="noTaconite" filename="wee/ui/weeContainerUI.class.php" startline="146" endline="150" visibility="public"><comment>Tells this frame and all its children to not use taconite.</comment></method><method name="render" filename="wee/ui/weeContainerUI.class.php" startline="156" endline="162" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setList" startline="168" endline="171" visibility="public"><params numrequired="1"><param name="aList" null="null" type="array">The data to be listed.</param></params><comment>Set the data associated with the list.</comment></method><method name="setParams" startline="157" endline="160" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* columns:			Columns to display in the list. Columns use the format 'label' =&gt; 'name', with 'label' optional.
	* countperpage:		Number of items per page.
	* orderby:			The column to use to sort the rows.
	* orderdirection:	The direction of the column sort. Defaults to 'asc'.
	* primary:			The key identifying each item uniquely. A key can be either one or more columns stored in an array.
	* total:			Total number of items.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aFrames" visibility="protected"><comment>List of frames this container handles.</comment></property><property name="aGlobalActions" visibility="protected"><comment>List of global actions associated with the list.</comment></property><property name="aItemsActions" visibility="protected"><comment>List of actions associated with each items.</comment></property><property name="aList" visibility="protected"><comment>List of items to display for this page.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Configurable list of items.</comment></class><class name="weeLocale" module="wee/l10n" filename="wee/l10n/weeLocale.class.php" startline="30" endline="163"><methods><method name="__construct" startline="91" endline="107" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters listed above.</param></params><comment>Initialize the locale.

The parameters array can contain:
* auto:		Whether to automatically try to select the best locale based on the HTTP_ACCEPT_LANGUAGE header.
* default:	The default locale to use when others aren't available.</comment></method><method name="get" startline="115" endline="118" visibility="public"><return type="The">current locale.</return><comment>Return the locale used currently by the application.</comment></method><method name="set" startline="126" endline="140" visibility="public"><params numrequired="1"><param name="sLocale" null="null" type="string">The new locale.</param><param name="sCodeSet" null="null" default="'UTF-8'" type="string"/><param name="sModifier" null="null" default="NULL" type="string"/></params><comment>Change the locale used by the application.</comment></method><method name="setFromPathInfo" startline="152" endline="162" visibility="public"><params numrequired="1"><param name="sPathInfo" null="null" type="string">The pathinfo for this request.</param></params><return type="string">The pathinfo minus the language part, if any.</return><comment>Change the locale used by the application by using the pathinfo
to determine which language is requested.

The language MUST exist in the $aLocaleMap property to be detected.</comment></method></methods><properties><property name="aLocaleMap" visibility="protected"><sees><see>http://en.wikipedia.org/wiki/Global_Internet_usage</see><see>http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</see></sees><comment>Map between the 2-letter language codes and the locale names.

Only defines a few of the most popular languages by default,
and only defines one locale per language. If you need a finer control
over the languages you will be required to extend this class. Take
care not to use an existing code (in the ISO standard) when doing so.</comment></property></properties><comment>Application module that complements the intl Locale class
by adding mechanisms to select automatically the locale
depending on the request sent by the browser.</comment></class><class name="weeModel" module="wee/model" filename="wee/model/weeModel.class.php" startline="28" endline="188" parent="weeDataSource" type="abstract"><implements><implement>ArrayAccess</implement><implement>Iterator</implement><implement>Mappable</implement><implement>Traversable</implement></implements><methods><method name="__construct" startline="48" endline="51" visibility="public"><params numrequired="0"><param name="aData" null="null" default="array()" type="array">Data to be set at initialization.</param></params><comment>Creates a new instance of this model with the data passed as parameter.</comment></method><method name="current" startline="59" endline="62" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="key" startline="70" endline="73" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" startline="80" endline="82" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="offsetExists" startline="92" endline="95" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" startline="105" endline="113" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" startline="123" endline="126" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" startline="135" endline="138" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="rewind" startline="146" endline="149" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="setFromArray" startline="158" endline="164" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the data to copy from.</param></params><return type="$this"/><comment>Copy data directly from an array.</comment></method><method name="toArray" startline="172" endline="175" visibility="public"><return type="array">Object's data.</return><comment>Returns the data as array, since we can't cast weeModel to retrieve the array's data.</comment></method><method name="valid" startline="183" endline="187" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="aCurrentElement" visibility="protected"><comment>Key and value for the currently iterated element.</comment></property><property name="aData" visibility="protected"><comment>Data for the instances of this model.</comment></property><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property></properties><comment>Base class for defining a model.</comment></class><class name="weeMSSQLDatabase" module="wee/db/mssql" filename="wee/db/mssql/weeMSSQLDatabase.class.php" startline="28" endline="203" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="63" endline="77" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><throws><throw>ConfigurationException	The MSSQL PHP extension is missing.</throw><throw>DatabaseException		The connection failed.</throw></throws><comment>Initialises a new mssql database.

This database driver accepts the following parameters:
 * host:		The server of the database as specified by mssql_connect.
 * user:		The username.
 * password:	The password.
 * dbname:		The name of the database.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="86" endline="92" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the mssql-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="101" endline="113" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weePgSQLResult">Only with SELECT queries: an object for results handling</return><comment>Execute an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="123" endline="133" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier.</return><throws><throw>InvalidArgumentException	The given value is not a valid mssql identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="141" endline="144" visibility="public"><comment>Returns the name of the pgsql dbmeta class.</comment></method><method name="getPKId" startline="154" endline="161" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">Unused in this database driver.</param></params><return type="int">The last value generated.</return><throws><throw>IllegalStateException	No value has been generated yet for the given sequence in this session.</throw></throws><comment>Returns the last sequence value generated by the database in this session.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="171" endline="174" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="183" endline="186" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to prepare.</param></params><return type="weeMSSQLStatement">The prepared statement.</return><comment>Prepare an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method><method name="selectDb" startline="196" endline="202" visibility="public"><params numrequired="1"><param name="sDatabase" null="null" type="string">The database to use.</param></params><throws><throw>DatabaseException	Failed to select the database.</throw></throws><comment>Changes database without reconnecting.
The new database must be on the same host of the previous.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (mssql).</comment></property></properties><comment>MS SQL database driver.</comment></class><class name="weeMSSQLDbMeta" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMeta.class.php" startline="28" endline="235" parent="weeDbMeta"><implements><implement>weeDbMetaSchemaProvider</implement><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMeta.class.php" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="currentSchema" startline="42" endline="50" visibility="public"><return type="weeDbMetaSchema">The current schema.</return><comment>Return the current schema of the database.</comment></method><method name="db" filename="wee/db/meta/weeDbMeta.class.php" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="fetchConstraintColumnsNames" startline="60" endline="74" visibility="public"><params numrequired="2"><param name="sSchema" null="null" type="string">The name of the schema containing the constraint.</param><param name="sName" null="null" type="string">The name of the constraint.</param></params><return type="array">The names of the columns taking part in the constraint.</return><comment>Fetch the names of the columns taking part in a given constraint.</comment></method><method name="getSchemaClass" startline="82" endline="85" visibility="public"><return type="string">The name of the schema class.</return><comment>Return the name of the schema class.</comment></method><method name="getTableClass" startline="93" endline="96" visibility="public"><return type="string">The name of the table class.</return><comment>Return the name of the table class.</comment></method><method name="querySchemas" startline="145" endline="152" visibility="protected"><return type="weeMSSQLResult">The data of all the schemas of the database.</return><comment>Query all the schemas of the database.</comment></method><method name="queryTables" startline="160" endline="169" visibility="protected"><return type="weeMSSQLResult">The data of all the tables of the database.</return><comment>Query all the tables of the database.</comment></method><method name="schema" startline="178" endline="191" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="weeMSSQLDbMetaSchema">The schema.</return><comment>Return a schema of a given name in the database.</comment></method><method name="schemaExists" startline="200" endline="205" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="bool">true if the schema exists in the database, false otherwise.</return><comment>Return whether a schema of a given name exists in the database.</comment></method><method name="schemas" startline="213" endline="220" visibility="public"><return type="array(weeMSSQLDbMetaSchema)">The array of schemas.</return><comment>Return all the schemas of the database.</comment></method><method name="schemasNames" startline="228" endline="234" visibility="public"><return type="array(string)">The names of all the schemas.</return><comment>Return the names of all the schemas of the database.</comment></method><method name="table" startline="106" endline="121" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeMSSQLDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The table does not exist.</throw></throws><comment>Return a table of a given name in the database.</comment></method><method name="tableExists" startline="130" endline="137" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Return whether a table of a given name exists in the database.</comment></method><method name="tables" filename="wee/db/meta/weeDbMeta.class.php" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMeta.class.php" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class (mssql).</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>MSSQL driver of the weeDbMeta class</comment></class><class name="weeMSSQLDbMetaColumn" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMetaColumn.class.php" startline="28" endline="142" parent="weeDbMetaColumn"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMSSQLDbMeta">The mssql dbmeta object.</param><param name="aData" type="array" hint="array">The column data.</param><param name="oTable" type="object" hint="weeMSSQLDbMetaTable">The mssql table of the column.</param></params><comment>Initialise a new mssql column object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMSSQLDbMetaTable.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="54" endline="62" visibility="public"><return type="string">The default value of the column.</return><throws><throw>IllegalStateException	The column does not have a default value.</throw></throws><comment>Return the default value of the column.</comment></method><method name="doGetValidator" startline="83" endline="108" visibility="protected"><return type="weeValidator">A validator appropriate for the column or null.</return><sees><see>http://www.oracle.com/pls/xe102/lookup?id=CNCPT012</see></sees><todos><todo>Handle NUMBER precision and scale properly.</todo><todo>Support date types (will need to handle the NLS_DATE_FORMAT parameter)</todo></todos><comment>Does the oracle-dependent logic of getValidator.

Handled types:
 * CHAR
 * VARCHAR2
 * NCHAR
 * NVARCHAR2
 * LONG
 * NUMBER
 * BINARY_FLOAT
 * BINARY_DOUBLE</comment></method><method name="getValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="116" endline="119" visibility="public"><return type="bool">true if the column has a default value, false otherwise.</return><comment>Return whether the column has a default value.</comment></method><method name="hasValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="127" endline="130" visibility="public"><return type="bool">true if the column accepts null as a value, false otherwise.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="138" endline="141" visibility="public"><return type="string">The name of the schema.</return><comment>Returns the name of the schema of the column.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>MSSQL specialisation of weeDbMetaColumn.</comment></class><class name="weeMSSQLDbMetaForeignKey" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMetaForeignKey.class.php" startline="28" endline="73" parent="weeDbMetaSchemaForeignKey"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMSSQLDbMeta">The mssql dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeMSSQLDbMetaTable">The mssql table of the primary key.</param></params><comment>Initialise a new mssql primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMSSQLDbMetaTable.</comment></method><method name="columnsNames" startline="52" endline="58" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Return the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="66" endline="72" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Return the referenced columns of the foreign key.</comment></method><method name="referencedSchemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="37" endline="40" visibility="public"><return type="string">The name of the referenced schema.</return><comment>Returns the name of the schema in which is the referenced table.</comment></method><method name="referencedTableName" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="schemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="48" endline="51" visibility="public"><return type="string">The name of the schema in which is the foreign key.</return><comment>Returns the name of the schema in which is the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>MSSQL specialisation of weeDbMetaForeignKey.</comment></class><class name="weeMSSQLDbMetaPrimaryKey" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMetaPrimaryKey.class.php" startline="28" endline="73" parent="weeDbMetaPrimaryKey"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMSSQLDbMeta">The mssql dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeMSSQLDbMetaTable">The mssql table of the primary key.</param></params><comment>Initialise a new mssql primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMSSQLDbMetaTable.</comment></method><method name="columnsNames" startline="55" endline="61" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Return the names of the columns of the primary key.

The columns are ordered as specified in the definition of the primary key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="69" endline="72" visibility="public"><return type="string">The name of the schema.</return><comment>Return the name of the schema in which is the primary key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>MSSQL specialisation of weeDbMetaPrimaryKey.</comment></class><class name="weeMSSQLDbMetaSchema" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMetaSchema.class.php" startline="28" endline="101" parent="weeDbMetaSchema"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeMSSQLDbMeta">The mssql dbmeta object.</param><param name="aData" type="array" hint="array">The schema data.</param></params><comment>Initialize a new mssql schema object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMSSQLDbMeta.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="queryTables" startline="92" endline="100" visibility="protected"><return type="weeMSSQLResult">The data of all the tables in the schema.</return><comment>Query all the tables in the schema.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" startline="54" endline="68" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeMSSQLDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The table does not exist in the schema.</throw></throws><comment>Return a table of a given name in the schema.</comment></method><method name="tableExists" startline="77" endline="84" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the schema, false otherwise.</return><comment>Return whether a table of a given name exists in the schema.</comment></method><method name="tables" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="37" endline="45" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables in the schema.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="53" endline="60" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the schema.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>MSSQL specialization of weeDbMetaSchema.</comment></class><class name="weeMSSQLDbMetaTable" module="wee/db/meta/mssql" filename="wee/db/meta/mssql/weeMSSQLDbMetaTable.class.php" startline="28" endline="268" parent="weeDbMetaTable"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaForeignKeyProvider</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeMSSQLDbMeta">The mssql dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initialise a new mssql table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMSSQLDbMeta.</comment></method><method name="column" startline="53" endline="70" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weeMSSQLDbMetaColumn">The column.</return><comment>Return a column of the table.</comment></method><method name="columnExists" startline="79" endline="88" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">true if the column exists, false otherwise.</return><comment>Return whether a given column exists in the table.</comment></method><method name="columns" filename="wee/db/meta/weeDbMetaTable.class.php" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaTable.class.php" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="foreignKey" startline="98" endline="117" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weeMSSQLDbMetaForeignKey">The foreign key.</return><throws><throw>UnexpectedValueException	The foreign key does not exist.</throw></throws><comment>Return a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="126" endline="136" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Returns whether a foreign key of a given name exists.</comment></method><method name="foreignKeys" startline="144" endline="164" visibility="public"><return type="array(weeMSSQLDbMetaForeignKey)">The array of foreign keys.</return><comment>Return all the foreign keys.</comment></method><method name="getColumnClass" startline="172" endline="175" visibility="public"><return type="string">The name of the column class.</return><comment>Return the name of the column class.</comment></method><method name="getForeignKeyClass" startline="183" endline="186" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Return the name of the foreign key class.</comment></method><method name="getPrimaryKeyClass" startline="194" endline="197" visibility="public"><return type="string">The name of the primary key class.</return><comment>Return the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="205" endline="214" visibility="public"><return type="bool">true if the table has a primary key, false otherwise.</return><comment>Return whether the table has a primary key.</comment></method><method name="instantiateObject" filename="wee/db/meta/weeDbMetaTable.class.php" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="223" endline="237" visibility="public"><return type="weeMSSQLDbMetaPrimaryKey">The primary key of the table.</return><throws><throw>IllegalStateException		The table does not have a primary key.</throw></throws><comment>Return the primary key of the table.</comment></method><method name="queryColumns" startline="245" endline="256" visibility="protected"><return type="weeMSSQLResult">The data of all the columns of the table.</return><comment>Query all the columns of the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="264" endline="267" visibility="public"><return type="string">The name of the schema.</return><comment>Return the name of the schema of the table.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>MSSQL specialisation of weeDbMetaTable.</comment></class><class name="weeMSSQLResult" module="wee/db/mssql" filename="wee/db/mssql/weeMSSQLResult.class.php" startline="29" endline="83" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="44" endline="50" visibility="public"><params numrequired="1"><param name="rResult" null="null" type="resource">The mssql result resource.</param></params><throws><throw>InvalidArgumentException	The resource is not a valid mssql result.</throw></throws><comment>Initialises a new mssql result set.</comment></method><method name="count" startline="58" endline="61" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="69" endline="72" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="78" endline="82" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" filename="wee/db/weeDatabaseResult.class.php" startline="124" endline="127" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="rResult" visibility="protected"><comment>The mssql result set.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Class for MSSQL query results handling.
An object of this class is created by the weeMSSQLDatabase's query method for SELECT statements.</comment></class><class name="weeMSSQLStatement" module="wee/db/mssql" filename="wee/db/mssql/weeMSSQLStatement.class.php" startline="31" endline="99" parent="weeDatabaseDummyStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="52" endline="59" visibility="public"><params numrequired="3"><param name="oDb" type="object" hint="weeMSSQLDatabase">The database to use.</param><param name="rLink" null="null" type="resource"/><param name="sQuery" null="null" type="string">The query.</param></params><comment>Initialises a new sqlite dummy prepared statement with a given query.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" filename="wee/db/weeDatabaseDummyStatement.class.php" startline="108" endline="111" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the database-dependent work to bind the parameters to the statement.</comment></method><method name="doQuery" startline="68" endline="80" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeSQLiteResult">A result set for SELECT queries.</return><comment>Does the mssql-dependent work of the execute method.</comment></method><method name="execute" filename="wee/db/weeDatabaseDummyStatement.class.php" startline="128" endline="141" visibility="public"><return type="mixed">An instance of weeDatabaseResult if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="95" endline="98" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.

You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.

Please note that SQLite always return 0 for an unconditional DELETE statement (e.g.
DELETE FROM tablename), if you need the number of deleted rows, you should execute
DELETE FROM tablename WHERE 1.</comment></method></methods><properties><property name="aExtraParts" visibility="protected"><comment>The extra parts of the query.</comment></property><property name="aParameters" visibility="protected"><comment>The parameters to bind to the prepared statement.</comment></property><property name="aParametersMap" visibility="protected"><comment>The parameters map.

This array maps query parts indexes to parameters names.</comment></property><property name="iExtraPartsCount" visibility="protected"><comment>The number of extra parts.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows by the last execution of the statement.</comment></property><property name="oDb" visibility="protected"><comment>The database object.</comment></property><property name="rLink" visibility="protected"><comment>The MSSQL database link.</comment></property><property name="sFirstPart" visibility="protected"><comment>The first part of the query.</comment></property></properties><comment>A dummy prepared statement object for the mssql driver.

Instances of this class are returned by weeMSSQLDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeMySQLDatabase" module="wee/db/mysql" filename="wee/db/mysql/weeMySQLDatabase.class.php" startline="28" endline="209" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="70" endline="91" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><sees><see>http://php.net/mysql_connect</see></sees><throws><throw>ConfigurationException		The MySQL PHP extension is missing.</throw><throw>DatabaseException			Failed to connect to the database.</throw><throw>InvalidArgumentException	The given encoding is invalid.</throw></throws><comment>Initialises a new mysql database.

This database driver accepts the following parameters:
 * host:		The host of the database server.
 * user:		The user of the connection to the database.
 * password:	The password used by the user.
 * dbname:		The name of the database to select.
 * encoding:	The encoding to use for the database connection. Defaults to 'utf8'.

Refer to the documentation of mysql_connect to know the default values
of the `host`, `user` and `password` parameters.

This class always opens a new link to the given database.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="100" endline="103" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the database-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="112" endline="121" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeMySQLResult">Only with SELECT queries: an object for results handling</return><comment>Executes an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="131" endline="138" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier, wrapped around ticks.</return><throws><throw>InvalidArgumentException	The given value is not a valid mysql identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="146" endline="149" visibility="public"><comment>Returns the name of the mysql dbmeta class.</comment></method><method name="getPKId" startline="161" endline="168" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">Unused in this database driver.</param></params><return type="string">The last value generated.</return><throws><throw>IllegalStateException	No sequence value has been generated yet by the database in this session.</throw></throws><comment>Returns the last sequence value generated by the database in this session.

In MySQL, it's the last value generated for an AUTO_INCREMENT column by an INSERT query.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="178" endline="181" visibility="public"><return type="int">The number of affected rows by the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="190" endline="193" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weeMySQLStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method><method name="selectDb" startline="203" endline="208" visibility="public"><params numrequired="1"><param name="sDatabase" null="null" type="string">The database to use.</param></params><throws><throw>DatabaseException	Failed to select the database.</throw></throws><comment>Changes database without reconnecting.
The new database must be on the same host of the previous.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows by the last query.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (mysql).</comment></property></properties><comment>MySQL database driver.</comment></class><class name="weeMySQLDbMeta" module="wee/db/meta/mysql" filename="wee/db/meta/mysql/weeMySQLDbMeta.class.php" startline="28" endline="108" parent="weeDbMeta"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMeta.class.php" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="db" filename="wee/db/meta/weeDbMeta.class.php" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="getTableClass" startline="42" endline="45" visibility="public"><return type="string">The name of the table class.</return><comment>Returns the name of the table class.</comment></method><method name="queryTables" startline="98" endline="107" visibility="protected"><return type="weeDatabaseResult">The data of all the tables of the database.</return><comment>Queries all the tables of the database.</comment></method><method name="table" startline="55" endline="72" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeMySQLDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The tables does not exist.</throw></throws><comment>Returns a table of a given name in the database.</comment></method><method name="tableExists" startline="81" endline="90" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Returns whether a table of a given name exists in the database.</comment></method><method name="tables" filename="wee/db/meta/weeDbMeta.class.php" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMeta.class.php" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class (mysql).</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>MySQL driver of the weeDbMeta class</comment></class><class name="weeMySQLDbMetaColumn" module="wee/db/meta/mysql" filename="wee/db/meta/mysql/weeMySQLDbMetaColumn.class.php" startline="28" endline="162" parent="weeDbMetaColumn"><implements><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMySQLDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param><param name="oTable" type="object" hint="weeMySQLDbMetaTable">The table of the column.</param></params><comment>Initializes a new mysql column object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMySQLDbMetaTable.</comment></method><method name="comment" startline="52" endline="55" visibility="public"><return type="string">The comment of the column.</return><comment>Returns the comment of the column.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="64" endline="71" visibility="public"><return type="string">The default value of the column.</return><throws><throw>IllegalStateException	The column does not have a default value.</throw></throws><comment>Returns the default value of the column.</comment></method><method name="doGetValidator" startline="92" endline="139" visibility="protected"><return type="weeValidator">A validator appropriate for the column or null.</return><sees><see>http://dev.mysql.com/doc/refman/5.0/en/data-types.html</see></sees><comment>Does the mysql-dependent logic of getValidator.

Handled types:
 * tinyint
 * smallint
 * int
 * bigint
 * char
 * varchar
 * date
 * time (range restricted from 00:00:00 to 23:59:59)

The UNSIGNED modifier of the integer types is also properly handled.</comment></method><method name="getValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="147" endline="150" visibility="public"><return type="bool">Whether the column has a default value.</return><comment>Returns whether the column has a default value.</comment></method><method name="hasValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="158" endline="161" visibility="public"><return type="bool">Whether the column can contain null values.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>MySQL specialization of weeDbMetaColumn.</comment></class><class name="weeMySQLDbMetaForeignKey" module="wee/db/meta/mysql" filename="wee/db/meta/mysql/weeMySQLDbMetaForeignKey.class.php" startline="28" endline="109" parent="weeDbMetaForeignKey"><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMySQLDbMeta">The mysql dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeMySQLDbMetaTable">The mysql table of the primary key.</param></params><comment>Initializes a new mysql primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMySQLDbMetaTable.</comment></method><method name="columnsNames" startline="52" endline="67" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Returns the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="75" endline="90" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Returns the referenced columns of the foreign key.</comment></method><method name="referencedTableName" startline="98" endline="108" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>MySQL specialization of weeDbMetaForeignKey.</comment></class><class name="weeMySQLDbMetaPrimaryKey" module="wee/db/meta/mysql" filename="wee/db/meta/mysql/weeMySQLDbMetaPrimaryKey.class.php" startline="30" endline="72" parent="weeDbMetaPrimaryKey"><methods><method name="__construct" startline="43" endline="46" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeMySQLDbMeta">The mysql dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeMySQLDbMetaTable">The mysql table of the primary key.</param></params><comment>Initializes a new mysql primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMySQLDbMetaTable.</comment></method><method name="columnsNames" startline="56" endline="71" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Returns the names of the columns of the primary key.

The columns are ordered as specified in the definition of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>MySQL specialization of weeDbMetaPrimaryKey.

In MySQL, primary keys cannot have a custom name, they are always named &quot;PRIMARY&quot;.</comment></class><class name="weeMySQLDbMetaTable" module="wee/db/meta/mysql" filename="wee/db/meta/mysql/weeMySQLDbMetaTable.class.php" startline="28" endline="267" parent="weeDbMetaTable"><implements><implement>weeDbMetaForeignKeyProvider</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeMySQLDbMeta">The mysql dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initializes a new mysql table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeMySQLDbMeta.</comment></method><method name="column" startline="53" endline="72" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weeMySQLDbMetaColumn">The column.</return><comment>Returns a column of the table.</comment></method><method name="columnExists" startline="81" endline="90" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">true if the column exists, false otherwise.</return><comment>Returns whether a given column exists in the table.</comment></method><method name="columns" filename="wee/db/meta/weeDbMetaTable.class.php" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaTable.class.php" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="comment" startline="98" endline="101" visibility="public"><return type="string">The comment of the table.</return><comment>Returns the comment of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="foreignKey" startline="111" endline="128" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weeMySQLDbMetaForeignKey">The foreign key.</return><throws><throw>UnexpectedValueException	The foreign key does not exist.</throw></throws><comment>Returns a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="137" endline="147" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Returns whether a foreign key of a given name exists.</comment></method><method name="foreignKeys" startline="155" endline="171" visibility="public"><return type="array(weeMySQLDbMetaForeignKey)">The array of foreign keys.</return><comment>Returns all the foreign keys.</comment></method><method name="getColumnClass" startline="179" endline="182" visibility="public"><return type="string">The name of the column class.</return><comment>Returns the name of the column class.</comment></method><method name="getForeignKeyClass" startline="190" endline="193" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Returns the name of the foreign key class.</comment></method><method name="getPrimaryKeyClass" startline="201" endline="204" visibility="public"><return type="string">The name of the primary key class.</return><comment>Returns the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="212" endline="221" visibility="public"><return type="bool">true if the table has a primary key, false otherwise.</return><comment>Returns whether the table has a primary key.</comment></method><method name="instantiateObject" filename="wee/db/meta/weeDbMetaTable.class.php" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="230" endline="246" visibility="public"><return type="weeMySQLDbMetaPrimaryKey">The primary key of the table.</return><throws><throw>IllegalStateException		The table does not have a primary key.</throw></throws><comment>Returns the primary key of the table.</comment></method><method name="queryColumns" startline="254" endline="266" visibility="protected"><return type="weeMySQLResult">The data of all the columns of the table.</return><comment>Queries all the columns of the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>MySQL specialization of weeDbMetaTable.</comment></class><class name="weeMySQLiDatabase" module="wee/db/mysqli" filename="wee/db/mysqli/weeMySQLiDatabase.class.php" startline="28" endline="204" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="67" endline="86" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><throws><throw>ConfigurationException		The MySQLi PHP extension is missing.</throw><throw>DatabaseException			Failed to connect to the database.</throw><throw>InvalidArgumentException	The given encoding is invalid.</throw></throws><comment>Initialises a new mysqli database.

This database driver accepts the following parameters:
 * host:		The host of the database server.
 * user:		The user of the connection to the database.
 * password:	The password used by the user.
 * dbname:		The name of the database to select.
 * encoding:	The encoding to use for the database connection.

Refer to the documentation of mysqli::real_connect() to know the default values
of the `host`, `user` and `password` parameters.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="95" endline="98" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the mysqli-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="107" endline="116" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="mixed">An instance of weeMySQLiResult or null if the query did not return a result set.</return><comment>Executes an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="126" endline="133" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier, wrapped around ticks.</return><throws><throw>InvalidArgumentException	The given value is not a valid mysqli identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="141" endline="144" visibility="public"><comment>Returns the name of the mysql dbmeta class.</comment></method><method name="getPKId" startline="156" endline="163" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">Unused in this database driver.</param></params><return type="string">The last value generated.</return><throws><throw>IllegalStateException	No sequence value has been generated yet by the database in this session.</throw></throws><comment>Returns the last sequence value generated by the database in this session.

In MySQLi, it's the last value generated for an AUTO_INCREMENT column by an INSERT query.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="173" endline="176" visibility="public"><return type="int">The number of affected rows by the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="185" endline="188" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weeMySQLiStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method><method name="selectDb" startline="198" endline="203" visibility="public"><params numrequired="1"><param name="sDatabase" null="null" type="string">The database to use.</param></params><throws><throw>DatabaseException	MySQLi failed to select the database.</throw></throws><comment>Changes database without reconnecting.
The new database must be on the same host of the previous.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows during the last query.</comment></property><property name="oDb" visibility="protected"><comment>The MySQLi database object.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (mysql).</comment></property></properties><comment>MySQLi database driver.</comment></class><class name="weeMySQLiResult" module="wee/db/mysqli" filename="wee/db/mysqli/weeMySQLiResult.class.php" startline="31" endline="81" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="45" endline="48" visibility="public"><params numrequired="1"><param name="oResult" type="object" hint="mysqli_result">The mysqli result set.</param></params><comment>Initialises a new mysqli result set.</comment></method><method name="count" startline="56" endline="59" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="67" endline="71" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="77" endline="80" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" filename="wee/db/weeDatabaseResult.class.php" startline="124" endline="127" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="oResult" visibility="protected"><comment>The mysqli result set.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Class for MySQLi query results handling.

Instances of this class are returned by weeMySQLiDatabase's query method and
should not be instantiated manually.</comment></class><class name="weeMySQLiStatement" module="wee/db/mysqli" filename="wee/db/mysqli/weeMySQLiStatement.class.php" startline="31" endline="152" parent="weeDatabaseStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="73" endline="94" visibility="public"><params numrequired="3"><param name="oDb" type="object" hint="weeDatabase">The mysql link resource.</param><param name="oMySQLi" type="object" hint="mysqli"/><param name="sQuery" null="null" type="string">The query.</param></params><comment>Initialises a mysql prepared statement.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="102" endline="113" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the mysql-dependent work to bind the parameters to the statement.</comment></method><method name="execute" startline="121" endline="138" visibility="public"><return type="mixed">An instance of weeMySQLStatement if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="148" endline="151" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><properties><property name="aParametersMap" visibility="protected"><comment>The MySQL extension needs parameter names under the form ?.
This array is the map between indexes and names.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oDb" visibility="protected"><comment>The database associated with the statement.</comment></property><property name="oMySQLi" visibility="protected"><comment>The mysqli object.</comment></property><property name="sStatementName" visibility="protected"><comment>Internal PgSQL statement name, used to identify prepared statements.
Generated automatically by this class.</comment></property></properties><comment>Class for MySQLi prepared statements handling.

Instances of this class are returned by weeMySQLiDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeMySQLResult" module="wee/db/mysql" filename="wee/db/mysql/weeMySQLResult.class.php" startline="31" endline="89" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="46" endline="52" visibility="public"><params numrequired="1"><param name="rResult" null="null" type="resource">The mysql result resource.</param></params><throws><throw>InvalidArgumentException	The resource is not a valid mysql result.</throw></throws><comment>Initialises a new mysql result set.</comment></method><method name="count" startline="60" endline="67" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="75" endline="78" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="84" endline="88" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" filename="wee/db/weeDatabaseResult.class.php" startline="124" endline="127" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="rResult" visibility="protected"><comment>The mysql result set.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Class for MySQL query results handling.

Instances of this class are returned by weeMySQLDatabase's query method and
should not be instantiated manually.</comment></class><class name="weeMySQLStatement" module="wee/db/mysql" filename="wee/db/mysql/weeMySQLStatement.class.php" startline="31" endline="158" parent="weeDatabaseStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="74" endline="100" visibility="public"><params numrequired="3"><param name="oDb" type="object" hint="weeDatabase">The mysql link resource.</param><param name="rLink" null="null" type="resource"/><param name="sQuery" null="null" type="string">The query.</param></params><throws><throw>InvalidArgumentException	The database is not an instance of weeMySQLDatabase nor weeMySQLiDatabase.</throw></throws><comment>Initialises a mysql prepared statement.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="108" endline="119" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the mysql-dependent work to bind the parameters to the statement.</comment></method><method name="execute" startline="127" endline="144" visibility="public"><return type="mixed">An instance of weeMySQLStatement if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="154" endline="157" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><properties><property name="aParametersMap" visibility="protected"><comment>The MySQL extension needs parameter names under the form ?.
This array is the map between indexes and names.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oDb" visibility="protected"><comment>The mysql database object.</comment></property><property name="rLink" visibility="protected"><comment>The mysql link resource.</comment></property><property name="sStatementName" visibility="protected"><comment>Internal PgSQL statement name, used to identify prepared statements.
Generated automatically by this class.</comment></property></properties><comment>Class for MySQL prepared statements handling.

Instances of this class are returned by weeMySQLDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeNestedCRUDUI" module="wee/ui" filename="wee/ui/weeNestedCRUDUI.class.php" startline="32" endline="147" parent="weeCRUDUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="addFrame" filename="wee/ui/weeContainerUI.class.php" startline="59" endline="67" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string">Identifier for the given frame.</param><param name="oFrame" null="null" type="object">Frame to be added to the container.</param></params><comment>Add an UI frame to the container.

Keep in mind though that if the frame doesn't implement weeFailSafeRouting,
there might be an exception triggered when the event doesn't exist in it.</comment></method><method name="child" filename="wee/ui/weeContainerUI.class.php" startline="76" endline="79" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">Identifier for the given frame.</param></params><return type="weeUI">UI frame.</return><comment>Return a child UI frame.</comment></method><method name="defaultEvent" startline="41" endline="85" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Displays a list of all items in the set and gives links to the
Create, Update, Move Up, Move Down, Move and Delete events.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="doFormEvent" filename="wee/ui/weeCRUDUI.class.php" startline="109" endline="123" visibility="protected"><params numrequired="2"><param name="aEvent" null="null" type="array">Event information.</param><param name="sSubmitCallback" null="null" type="string"/></params><comment>Perform a form event. Common method for Create and Update.</comment></method><method name="eventAdd" filename="wee/ui/weeCRUDUI.class.php" startline="131" endline="134" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Handles a form used to add an item to the set.</comment></method><method name="eventDelete" filename="wee/ui/weeCRUDUI.class.php" startline="142" endline="153" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Deletes an item from the set.</comment></method><method name="eventMove" startline="93" endline="105" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Move an item in the set.</comment></method><method name="eventUpdate" filename="wee/ui/weeCRUDUI.class.php" startline="161" endline="164" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Handles a form used to update an item in the set.</comment></method><method name="getChildIdPrefix" filename="wee/ui/weeContainerUI.class.php" startline="101" endline="104" visibility="protected"><return type="Prefix">for child frame identifiers.</return><comment>Return the prefix for the child frame identifiers.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeContainerUI.class.php" startline="112" endline="129" visibility="public"><comment>Return the taconite object for this frame and all its children.</comment></method><method name="insertRecordCallback" filename="wee/ui/weeCRUDUI.class.php" startline="173" endline="176" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Data to be inserted.</param></params><comment>Default callback for the 'add' event.
Insert an item into the set.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="moveRecordCallback" startline="114" endline="117" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Array containing the item 'id' and the new 'parent' id.</param></params><comment>Default callback for the 'move' event.
Move an item in the set.</comment></method><method name="noChildTaconite" filename="wee/ui/weeContainerUI.class.php" startline="136" endline="140" visibility="public"><comment>Tells the child frames to not use taconite.
Use this when you want to return the rendered template in your taconite response.</comment></method><method name="noTaconite" filename="wee/ui/weeContainerUI.class.php" startline="146" endline="150" visibility="public"><comment>Tells this frame and all its children to not use taconite.</comment></method><method name="render" filename="wee/ui/weeContainerUI.class.php" startline="156" endline="162" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" filename="wee/ui/weeCRUDUI.class.php" startline="189" endline="195" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* columns:		Columns to display in the list. Columns use the format 'label' =&gt; 'name', with 'label' optional.
	* countperpage:	Number of items per page in the list for the default event. Defaults to 25.
	* set:			The set where all the CRUD operations will be performed.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/ui/weeCRUDUI.class.php" startline="204" endline="208" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="setupMoveCallback" startline="130" endline="146" visibility="public"><params numrequired="3"><param name="aEvent" null="null" type="array">Event information.</param><param name="oForm" null="null" type="object">The form for this event.</param><param name="sAction" null="null" type="string">The action for this form.</param></params><comment>Setup callback for the 'move' event.
Fills the form with all the available parent nodes.

// TODO: multi-column pkeys</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method><method name="updateRecordCallback" filename="wee/ui/weeCRUDUI.class.php" startline="217" endline="222" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">Updated data.</param></params><comment>Default callback for the 'update' event.
Update an item in the set.</comment></method></methods><properties><property name="aFrames" visibility="protected"><comment>List of frames this container handles.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.
If not defined its value will be the name of the frame's class.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>UI frame for standard CRUD operations on nested sets.

CRUD stands for Create, Retrieve, Update, Delete.
This frame defines events for all of these operations applicable on a given set,
along with the operation to move a node inside the tree.</comment></class><class name="weeNumberValidator" module="wee/validators" filename="wee/validators/weeNumberValidator.class.php" startline="37" endline="164" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="68" endline="90" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><throws><throw>DomainException				The `format` argument is invalid.</throw><throw>DomainException				The `max` argument is invalid.</throw><throw>DomainException				The `min` argument is invalid.</throw><throw>InvalidArgumentException	The `min` and `max` arguments do not form a valid number range.</throw></throws><comment>Initialises a new number validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="99" endline="102" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed">The input.</param></params><return type="bool">Whether the given input is a valid number.</return><comment>Returns whether a given input is a valid number.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="114" endline="129" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an integer, a float, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="139" endline="143" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="149" endline="163" visibility="protected"><comment>Validates a number.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A number validator.

This validator accepts the following arguments:
 * format:			The format of the number to validate, can be either 'int' or 'float', defaults to 'int'.
 * int_error:		The error message used if not a valid integer representation and the requested `format` is 'int'.
 * max:				The upper bound of the range of the valid numbers.
 * max_error:		The error message used if the number is greater than the `max` argument.
 * min:				The lower bound of the range of the valid numbers.
 * min_error:		The error message used if the number is smaller than the `min` argument.
 * invalid_error:	The error message used if the input is not numeric.</comment></class><class name="weeOptionValidator" module="wee/validators" filename="wee/validators/weeOptionValidator.class.php" startline="33" endline="82" parent="weeFormValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" filename="wee/validators/weeValidator.class.php" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="50" endline="54" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed">The input.</param></params><return type="bool">Whether the input is a valid form option.</return><comment>Returns whether the given input is a valid form option for the associated widget.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setFormData" filename="wee/validators/weeFormValidator.class.php" startline="67" endline="75" visibility="public"><params numrequired="2"><param name="oWidget" type="object" hint="SimpleXMLElement">The widget to validate.</param><param name="aData" type="array" hint="array">The data to check, if applicable.</param></params><throws><throw>IllegalStateException	The validator has already been attached to a form widget.</throw></throws><todos><todo>Check that the given SimpleXMLElement is a 'widget' element.</todo></todos><comment>Sets the widget and complete data passed to the weeForm object.
Usually either $_POST or $_GET.</comment></method><method name="setValue" startline="66" endline="81" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an integer, a float, an instance of Printable or an object castable to string.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" filename="wee/validators/weeFormValidator.class.php" startline="48" endline="55" visibility="public"><throws><throw>IllegalStateException	The validator is not attached to a form widget.</throw></throws><comment>Validates the given input.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aData" visibility="protected"><comment>The data of the form.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="oWidget" visibility="protected"><comment>The widget to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A form option validator.

This validator checks if the given input is specified in the widget options.

This validator accepts the following arguments:
 * invalid_error: The error message used if the input is not available in the options.</comment></class><class name="weeOracleDatabase" module="wee/db/oracle" filename="wee/db/oracle/weeOracleDatabase.class.php" startline="28" endline="190" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="61" endline="76" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The arguments of the connection.</param></params><comment>Initialise an oracle database.

This database driver accepts the following parameters:
 * user:		The user used to connect to the database.
 * password:	The password of the user.
 * dbname:		The name of the database.
 * encoding:	The encoding used for the connection (defaults to UTF8).</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="85" endline="88" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the oracle-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="97" endline="113" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weeDatabaseDummyResult">Only with SELECT queries: an object for results handling</return><comment>Execute an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="122" endline="130" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape</param></params><return type="string">The escaped identifier, wrapped around double quotes</return><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="138" endline="141" visibility="public"><comment>Returns the name of the oracle dbmeta class.</comment></method><method name="getPKId" startline="152" endline="164" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The primary key index name, if needed</param></params><return type="integer">The primary key index value</return><comment>Return the primary key index value.
Useful when you need to retrieve the row primary key value you just inserted.
This function may work a bit differently in each drivers.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="174" endline="177" visibility="public"><return type="integer">The number of affected rows in the last query</return><comment>Return the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="186" endline="189" visibility="public"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string.</param></params><return type="weeOracleStatement">The prepared statement.</return><comment>Prepares a given query for later execution.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (oracle).</comment></property></properties><comment>Oracle database driver.</comment></class><class name="weeOracleDbMeta" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMeta.class.php" startline="28" endline="229" parent="weeDbMeta"><implements><implement>weeDbMetaSchemaProvider</implement><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMeta.class.php" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="currentSchema" startline="43" endline="49" visibility="public"><return type="weeOracleDbMetaSchema">The current schema.</return><comment>Return the current schema of the database.</comment></method><method name="db" filename="wee/db/meta/weeDbMeta.class.php" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="fetchConstraintColumnsNames" startline="59" endline="72" visibility="public"><params numrequired="2"><param name="sSchema" null="null" type="string">The name of the schema containing the constraint.</param><param name="sName" null="null" type="string">The name of the constraint.</param></params><return type="array">The names of the columns taking part in the constraint.</return><comment>Fetch the names of the columns taking part in a given constraint.</comment></method><method name="getSchemaClass" startline="80" endline="83" visibility="public"><return type="string">The name of the schema class.</return><comment>Return the name of the schema class.</comment></method><method name="getTableClass" startline="91" endline="94" visibility="public"><return type="string">The name of the table class.</return><comment>Return the name of the table class.</comment></method><method name="querySchemas" startline="102" endline="107" visibility="protected"><return type="weeOracleResult">The data of all the schemas of the database.</return><comment>Query all the schemas of the database.</comment></method><method name="queryTables" startline="115" endline="123" visibility="protected"><return type="weeOracleResult">The data of all the tables of the database.</return><comment>Query all the tables of the database.</comment></method><method name="schema" startline="133" endline="144" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="weeOracleDbMetaSchema">The schema.</return><throws><throw>UnexpectedValueException	The schema does not exist.</throw></throws><comment>Return a schema of a given name in the database.</comment></method><method name="schemaExists" startline="153" endline="158" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="bool">true if the schema exists in the database, false otherwise.</return><comment>Return whether a schema of a given name exists in the database.</comment></method><method name="schemas" startline="166" endline="173" visibility="public"><return type="array(weeOracleDbMetaSchema)">The array of schemas.</return><comment>Return all the schemas of the database.</comment></method><method name="schemasNames" startline="181" endline="188" visibility="public"><return type="array(string)">The names of all the schemas.</return><comment>Return the names of all the schemas of the database.</comment></method><method name="table" startline="198" endline="212" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeOracleDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The tables does not exist.</throw></throws><comment>Return a table of a given name in the database.</comment></method><method name="tableExists" startline="221" endline="228" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Return whether a table of a given name exists in the database.</comment></method><method name="tables" filename="wee/db/meta/weeDbMeta.class.php" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMeta.class.php" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class (oracle).</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>Oracle driver of the weeDbMeta class.</comment></class><class name="weeOracleDbMetaColumn" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMetaColumn.class.php" startline="28" endline="152" parent="weeDbMetaColumn"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeOracleDbMeta">The oracle dbmeta object.</param><param name="aData" type="array" hint="array">The column data.</param><param name="oTable" type="object" hint="weeOracleDbMetaTable">The oracle table of the column.</param></params><comment>Initialise a new oracle column object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeOracleDbMetaTable.</comment></method><method name="comment" startline="53" endline="56" visibility="public"><return type="string">The comment of the column.</return><comment>Return the comment of the column.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="65" endline="72" visibility="public"><return type="string">The default value of the column.</return><throws><throw>IllegalStateException	The column does not have a default value.</throw></throws><comment>Return the default value of the column.</comment></method><method name="doGetValidator" startline="93" endline="118" visibility="protected"><return type="weeValidator">A validator appropriate for the column or null.</return><sees><see>http://www.oracle.com/pls/xe102/lookup?id=CNCPT012</see></sees><todos><todo>Handle NUMBER precision and scale properly.</todo><todo>Support date types (will need to handle the NLS_DATE_FORMAT parameter)</todo></todos><comment>Does the oracle-dependent logic of getValidator.

Handled types:
 * CHAR
 * VARCHAR2
 * NCHAR
 * NVARCHAR2
 * LONG
 * NUMBER
 * BINARY_FLOAT
 * BINARY_DOUBLE</comment></method><method name="getValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="126" endline="129" visibility="public"><return type="bool">true if the column has a default value, false otherwise.</return><comment>Return whether the column has a default value.</comment></method><method name="hasValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="137" endline="140" visibility="public"><return type="bool">true if the column accepts null as a value, false otherwise.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="148" endline="151" visibility="public"><return type="string">The name of the schema.</return><comment>Returns the name of the schema of the column.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>Oracle specialisation of weeDbMetaColumn.</comment></class><class name="weeOracleDbMetaForeignKey" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMetaForeignKey.class.php" startline="28" endline="73" parent="weeDbMetaSchemaForeignKey"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeOracleDbMeta">The oracle dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeOracleDbMetaTable">The oracle table of the primary key.</param></params><comment>Initialise a new oracle primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeOracleDbMetaTable.</comment></method><method name="columnsNames" startline="52" endline="58" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Return the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="66" endline="72" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Return the referenced columns of the foreign key.</comment></method><method name="referencedSchemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="37" endline="40" visibility="public"><return type="string">The name of the referenced schema.</return><comment>Returns the name of the schema in which is the referenced table.</comment></method><method name="referencedTableName" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="schemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="48" endline="51" visibility="public"><return type="string">The name of the schema in which is the foreign key.</return><comment>Returns the name of the schema in which is the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Oracle specialisation of weeDbMetaForeignKey.</comment></class><class name="weeOracleDbMetaPrimaryKey" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMetaPrimaryKey.class.php" startline="28" endline="71" parent="weeDbMetaPrimaryKey"><implements><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeOracleDbMeta">The oracle dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weeOracleDbMetaTable">The oracle table of the primary key.</param></params><comment>Initialise a new oracle primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeOracleDbMetaTable.</comment></method><method name="columnsNames" startline="53" endline="59" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Return the columns of the primary key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="67" endline="70" visibility="public"><return type="string">The name of the schema of the table.</return><comment>Return the name of the schema of the table.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>Oracle specialisation of weeDbMetaPrimaryKey.</comment></class><class name="weeOracleDbMetaSchema" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMetaSchema.class.php" startline="28" endline="101" parent="weeDbMetaSchema"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" startline="40" endline="43" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeOracleDbMeta">The oracle dbmeta object.</param><param name="aData" type="array" hint="array">The schema data.</param></params><comment>Initialise a new oracle schema object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeOracleDbMeta.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="queryTables" startline="51" endline="59" visibility="protected"><return type="weeOracleResult">The data of all the tables in the schema.</return><comment>Query all the tables in the schema.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" startline="69" endline="84" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeOracleDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The table does not exist in the schema.</throw></throws><comment>Return a table of a given name in the schema.</comment></method><method name="tableExists" startline="93" endline="100" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the table exists in the schema.</return><comment>Return whether a table of a given name exists in the schema.</comment></method><method name="tables" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="37" endline="45" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables in the schema.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="53" endline="60" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the schema.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>Oracle specialisation of weeDbMetaSchema.</comment></class><class name="weeOracleDbMetaTable" module="wee/db/meta/oracle" filename="wee/db/meta/oracle/weeOracleDbMetaTable.class.php" startline="28" endline="262" parent="weeDbMetaTable"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaForeignKeyProvider</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeOracleDbMeta">The oracle dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initialise a new oracle table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeOracleDbMeta.</comment></method><method name="column" startline="54" endline="69" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weeOracleDbMetaColumn">The column.</return><throws><throw>UnexpectedValueException	The column does not exist.</throw></throws><comment>Return a column of the table.</comment></method><method name="columnExists" startline="78" endline="85" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">Whether a given column exists in the table.</return><comment>Returns whether a given column exists in the table.</comment></method><method name="columns" filename="wee/db/meta/weeDbMetaTable.class.php" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaTable.class.php" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="comment" startline="93" endline="96" visibility="public"><return type="string">The comment of the table.</return><comment>Returns the comment of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="foreignKey" startline="106" endline="121" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weeOracleDbMetaForeignKey">The foreign key.</return><throws><throw>UnexpectedValueException	The foreign key does not exist.</throw></throws><comment>Return a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="130" endline="137" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Return whether a foreign key of a given name exists.</comment></method><method name="foreignKeys" startline="145" endline="162" visibility="public"><return type="array(weeOracleDbMetaForeignKey)">The array of foreign keys.</return><comment>Return all the foreign keys.</comment></method><method name="getColumnClass" startline="170" endline="173" visibility="public"><return type="string">The name of the column class.</return><comment>Return the name of the column class.</comment></method><method name="getForeignKeyClass" startline="181" endline="184" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Return the name of the foreign key class.</comment></method><method name="getPrimaryKeyClass" startline="192" endline="195" visibility="public"><return type="string">The name of the primary key class.</return><comment>Return the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="203" endline="210" visibility="public"><return type="bool">true if the table has a primary key, false otherwise.</return><comment>Returns whether the table has a primary key.</comment></method><method name="instantiateObject" filename="wee/db/meta/weeDbMetaTable.class.php" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="219" endline="231" visibility="public"><return type="weeOracleDbMetaPrimaryKey">The primary key of the table.</return><throws><throw>IllegalStateException		The table does not have a primary key.</throw></throws><comment>Returns the primary key of the table.</comment></method><method name="queryColumns" startline="239" endline="250" visibility="protected"><return type="weeOracleResult">The data of all the columns of the table.</return><comment>Query all the columns of the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="258" endline="261" visibility="public"><return type="string">The name of the schema of the table.</return><comment>Return the name of the schema of the table.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>Oracle specialisation of weeDbMetaTable.</comment></class><class name="weeOracleStatement" module="wee/db/oracle" filename="wee/db/oracle/weeOracleStatement.class.php" startline="31" endline="124" parent="weeDatabaseStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="62" endline="74" visibility="public"><params numrequired="2"><param name="rLink" null="null" type="resource">The oracle link resource.</param><param name="sQuery" null="null" type="string">The query to prepare.</param></params><throws><throw>InvalidArgumentException	The resource is not a valid oracle statement.</throw></throws><comment>Initialise an oracle prepared statement.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="82" endline="90" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the oracle-dependent work to bind the parameters to the statement.</comment></method><method name="execute" startline="98" endline="110" visibility="public"><return type="mixed">An instance of weeDatabaseDummyResult if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="120" endline="123" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><properties><property name="aParameters" visibility="protected"><comment>The parameters of the statement.
The keys are the names of the parameters.
Used to filter the input of the doBind method.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="rStatement" visibility="protected"><comment>The oracle statement resource.</comment></property></properties><comment>Class for Oracle prepared statements handling.

Instances of this class are returned by weeOracleDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeOutput" module="wee/output" filename="wee/output/weeOutput.class.php" startline="28" endline="145" type="abstract"><methods><method name="__construct" startline="41" endline="48" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><comment>Initialize the output driver. Start output buffering if requested.</comment></method><method name="bufferize" startline="56" endline="70" visibility="public"><params numrequired="0"><param name="bCompressOutput" null="null" default="true" type="bool">Whether to compress the output before sending it to the browser (if available).</param></params><comment>Bufferize the output. Enable GZIP compression on demand if available.</comment></method><method name="decode" startline="79" endline="79" type="abstract" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to decode.</param></params><return type="string">The decoded value.</return><comment>Decode a given value.</comment></method><method name="encode" startline="88" endline="88" type="abstract" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">Data to encode.</param></params><return type="string">Data encoded.</return><comment>Encodes data to be displayed.</comment></method><method name="encodeArray" startline="100" endline="114" visibility="public"><params numrequired="1"><param name="a" null="null" type="array">Data array to encode.</param></params><return type="array">Data array encoded.</return><comment>Encode an array of data to be displayed.

Mainly used by weeTemplate to encode the data it received.
You should not have to use this method.</comment></method><method name="instance" startline="123" endline="130" type="static" visibility="public"><return type="weeOutput">The selected output instance.</return><comment>Return the currently selected instance.
Throw an exception if no instances are selected.</comment></method><method name="select" startline="139" endline="144" type="static" visibility="public"><params numrequired="1"><param name="oOutput" type="object" hint="weeOutput">New driver to be used.</param></params><return type="weeOutput">The driver being replaced.</return><comment>Select a new output driver and return the previous one.</comment></method></methods><properties><property name="oInstance" visibility="protected" static="static"><comment>Instance of the current output driver.
There can only be one at the same time.</comment></property></properties><comment>Base class for output drivers.</comment></class><class name="weePaginationUI" module="wee/ui" filename="wee/ui/weePaginationUI.class.php" startline="30" endline="90" parent="weeUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><sees><see>http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination</see></sees><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="defaultEvent" startline="57" endline="73" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Retrieve the page number from $aEvent['get']['from'],
and use it to configure the pagination component.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeUI.class.php" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" filename="wee/ui/weeUI.class.php" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" filename="wee/ui/weeUI.class.php" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" startline="86" endline="89" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* countperpage:	Number of items per page. Defaults to 25.
	* total:		Total number of items.
	* url:			The base URL for the navigation links.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for pagination templates.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Pagination UI frame.</comment></class><class name="weePDFOutput" module="wee/output" filename="wee/output/weePDFOutput.class.php" startline="30" endline="117" parent="weeLaTeXOutput"><methods><method name="__construct" startline="49" endline="52" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><comment>Initialize the output driver.
This driver always enable output buffering regardless of the setting.</comment></method><method name="__destruct" startline="61" endline="91" visibility="public"><comment>Fetch the buffered LaTeX, convert it to PDF and echo it.
It will then be handled by the weeOutput defined ob callback.

TODO: do not execute this function if the script is terminating following an error or an exception</comment></method><method name="bufferize" filename="wee/output/weeOutput.class.php" startline="56" endline="70" visibility="public"><params numrequired="0"><param name="bCompressOutput" null="null" default="true" type="bool">Whether to compress the output before sending it to the browser (if available).</param></params><comment>Bufferize the output. Enable GZIP compression on demand if available.</comment></method><method name="decode" filename="wee/output/weeLaTeXOutput.class.php" startline="37" endline="44" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to decode.</param></params><return type="string">The decoded value.</return><comment>Decode a given value.</comment></method><method name="encode" filename="wee/output/weeLaTeXOutput.class.php" startline="55" endline="62" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">Data to encode.</param></params><return type="string">Data encoded.</return><comment>Encode data to be displayed.

According to the LaTeX tutorial, the following need escaping: # $ % &amp; ~ _ ^ \ { }</comment></method><method name="encodeArray" filename="wee/output/weeOutput.class.php" startline="100" endline="114" visibility="public"><params numrequired="1"><param name="a" null="null" type="array">Data array to encode.</param></params><return type="array">Data array encoded.</return><comment>Encode an array of data to be displayed.

Mainly used by weeTemplate to encode the data it received.
You should not have to use this method.</comment></method><method name="instance" filename="wee/output/weeOutput.class.php" startline="123" endline="130" type="static" visibility="public"><return type="weeOutput">The selected output instance.</return><comment>Return the currently selected instance.
Throw an exception if no instances are selected.</comment></method><method name="select" filename="wee/output/weeOutput.class.php" startline="139" endline="144" type="static" visibility="public"><params numrequired="1"><param name="oOutput" type="object" hint="weeOutput">New driver to be used.</param></params><return type="weeOutput">The driver being replaced.</return><comment>Select a new output driver and return the previous one.</comment></method><method name="setFilename" startline="99" endline="103" visibility="public"><params numrequired="1"><param name="sPDFFilename" null="null" type="string">PDF filename, including the &quot;.pdf&quot; part.</param></params><comment>Set the resulting PDF filename.</comment></method><method name="setOptions" startline="112" endline="116" visibility="public"><params numrequired="1"><param name="sOptions" null="null" type="string">The options sent to PDFLaTeX (default: none).</param></params><sees><see>man pdflatex</see></sees><comment>Set options to be given to PDFLaTeX.</comment></method></methods><properties><property name="oInstance" visibility="protected" static="static"><comment>Instance of the current output driver.
There can only be one at the same time.</comment></property><property name="sFilename" visibility="protected"><comment>Resulting PDF filename.</comment></property><property name="sOptions" visibility="protected"><comment>Options sent to PDFLaTeX.</comment></property></properties><comment>PDF output driver.
Extends the LaTeX driver and convert the resulting LaTeX to PDF using pdflatex,
then send it to the browser with the correct mime type.</comment></class><class name="weePDODatabase" module="wee/db/pdo" filename="wee/db/pdo/weePDODatabase.class.php" startline="28" endline="311" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="56" endline="80" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the driver.</param></params><throws><throw>ConfigurationException		The PDO PHP extension is missing.</throw><throw>InvalidArgumentException	Parameter &quot;dsn&quot; is missing.</throw><throw>DatabaseException			Failed to connect to database.</throw></throws><comment>Initialises a new pdo database.

This driver accepts the following parameters:
 * dsn: 		The DSN of the database.
 * user:		The user for the database.
 * password:	The password of the user.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="89" endline="95" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the pdo-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="105" endline="118" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeDataseDummyResult">For queries that return rows, the result object.</return><throws><throw>DatabaseException		Failed to execute the query.</throw></throws><comment>Executes an SQL query.</comment></method><method name="doRowCount" startline="132" endline="152" visibility="public"><params numrequired="1"><param name="oStatement" type="object" hint="PDOStatement">The PDO statement.</param><param name="bIsPrepared" null="null" default="false" type="bool">Whether $oStatement comes from a prepared statement.</param></params><return type="int">The number of affected rows by the last execution of the statement.</return><sees><see>http://wee.extend.ws/ticket/71</see></sees><comment>Does the driver-dependent work of PDOStatement::rowCount.

You should NOT call this method, its only use is to work around
a inconsistency in the PDO_SQLITE2 driver.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="166" endline="203" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier, wrapped around adequate quotes.</return><throws><throw>InvalidArgumentException	The given value is not a valid identifier for the current PDO driver.</throw><throw>ConfigurationException		The current PDO driver is not supported by this method.</throw></throws><comment>Escape a given identifier for safe concatenation in an SQL query.

In SQLite 2, be careful when using escaped identifiers in the field list of a SELECT query as
they will be used as the keys of the result set.</comment></method><method name="getMetaClass" startline="211" endline="222" visibility="public"><comment>Returns the name of the dbmeta class associated with the current PDO driver.</comment></method><method name="getPKId" startline="234" endline="274" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The name of the sequence.</param></params><return type="int">The primary key index value.</return><throws><throw>ConfigurationException	The PDO driver does not support this capability.</throw><throw>IllegalStateException	No value has been generated yet for the given sequence name.</throw><throw>DatabaseException		An error occured during the retrieving of the last generated value.</throw></throws><comment>Returns the last sequence value generated by the database in this session.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="291" endline="294" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.

You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.

You shouldn't use this method to check the number of deleted rows by a
&quot;DELETE FROM sometable&quot; query without a WHERE clause when using SQLite 2 or 3
because it deletes and then recreates the table to increase performance,
reporting no affected rows. Use &quot;DELETE FROM sometable WHERE 1&quot; if you really
need the number of deleted rows.</comment></method><method name="prepare" startline="303" endline="310" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weePDOStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>The number of rows affected by the last query.</comment></property><property name="oDb" visibility="protected"><comment>The database object.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS.</comment></property></properties><comment>PDO database driver.</comment></class><class name="weePDOStatement" module="wee/db/pdo" filename="wee/db/pdo/weePDOStatement.class.php" startline="31" endline="118" parent="weeDatabaseStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="59" endline="63" visibility="public"><params numrequired="2"><param name="oDb" type="object" hint="weePDODatabase">The database which protected the database.</param><param name="oStatement" type="object" hint="PDOStatement">The statement.</param></params><comment>Initialises a pdo prepared statement.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="71" endline="79" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the pdo-dependent work to bind the parameters to the statement.</comment></method><method name="execute" startline="87" endline="98" visibility="public"><return type="mixed">An instance of weeDatabaseDummyResult if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="114" endline="117" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.

You shouldn't use this method to check the number of deleted rows by a
&quot;DELETE FROM sometable&quot; statement without a WHERE clause when using SQLite 2 or 3
because it deletes and then recreates the table to increase performance,
reporting no affected rows. Use &quot;DELETE FROM sometable WHERE 1&quot; if you really
need the number of deleted rows.</comment></method></methods><properties><property name="iAffectedRowsCount" visibility="protected"><comment>The number of rows affected by the last query.</comment></property><property name="oDb" visibility="protected"><comment>The database which prepared the database.</comment></property><property name="oStatement" visibility="protected"><comment>The pdo statement object.</comment></property></properties><comment>Class for PDO prepared statements handling.

Instances of this class are returned by weePDODatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weePgSQLDatabase" module="wee/db/pgsql" filename="wee/db/pgsql/weePgSQLDatabase.class.php" startline="28" endline="206" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="63" endline="83" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the database.</param></params><sees><see>http://php.net/pg_connect</see><see>http://php.net/pg_set_client_encoding</see></sees><comment>Initialises a new pgsql database.

This database driver accepts the same parameters as the ones allowed in the connection string
passed to pg_connect plus &quot;encoding&quot;, which is the encoding used by the client as specified
by pg_set_client_encoding.

The default encoding is UNICODE.</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="92" endline="98" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the pgsql-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="107" endline="119" visibility="protected"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string</param></params><return type="weePgSQLResult">Only with SELECT queries: an object for results handling</return><comment>Execute an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="129" endline="139" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape</param></params><return type="string">The escaped identifier, wrapped around double quotes</return><throws><throw>InvalidArgumentException	The given value is not a valid pgsql identifier.</throw></throws><comment>Escape the given identifier for safe concatenation in an SQL query.</comment></method><method name="getMetaClass" startline="147" endline="150" visibility="public"><comment>Returns the name of the pgsql dbmeta class.</comment></method><method name="getPKId" startline="160" endline="179" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The primary key index name, if needed.</param></params><return type="string">The primary key index value.</return><throws><throw>IllegalStateException	No value has been generated yet for the given sequence in this session.</throw></throws><comment>Returns the primary key index value.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="189" endline="192" visibility="public"><return type="integer">The number of affected rows in the last query</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method><method name="prepare" startline="202" endline="205" visibility="public"><params numrequired="1"><param name="sQueryString" null="null" type="string">The query string.</param></params><return type="weeDatabaseStatement">The prepared statement.</return><sees><see>weeDatabaseStatement</see></sees><comment>Prepare an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="rLink" visibility="protected"><comment>Link resource for this database connection.</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (pgsql).</comment></property></properties><comment>PostgreSQL database driver.</comment></class><class name="weePgSQLDbMeta" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMeta.class.php" startline="28" endline="236" parent="weeDbMeta"><implements><implement>weeDbMetaSchemaProvider</implement><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMeta.class.php" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="currentSchema" startline="43" endline="56" visibility="public"><return type="weePgSQLDbMetaSchema">The current schema.</return><comment>Returns the current schema of the database.</comment></method><method name="db" filename="wee/db/meta/weeDbMeta.class.php" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="getSchemaClass" startline="64" endline="67" visibility="public"><return type="string">The name of the schema class.</return><comment>Returns the name of the schema class.</comment></method><method name="getTableClass" startline="75" endline="78" visibility="public"><return type="string">The name of the table class.</return><comment>Returns the name of the table class.</comment></method><method name="querySchemas" startline="205" endline="214" visibility="protected"><return type="weeDatabaseResult">The data of all the schemas of the database.</return><comment>Queries all the schemas of the database.</comment></method><method name="queryTables" startline="222" endline="235" visibility="protected"><return type="weeDatabaseResult">The data of all the tables of the database.</return><comment>Queries all the visible tables of the database.</comment></method><method name="schema" startline="88" endline="105" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="weePgSQLDbMetaSchema">The schema.</return><throws><throw>UnexpectedValueException	The schema does not exist.</throw></throws><comment>Returns a schema of a given name in the database.</comment></method><method name="schemaExists" startline="114" endline="121" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the schema.</param></params><return type="bool">true if the schema exists in the database, false otherwise.</return><comment>Returns whether a schema of a given name exists in the database.</comment></method><method name="schemas" startline="129" endline="136" visibility="public"><return type="array(weePgSQLDbMetaSchema)">The array of schemas.</return><comment>Returns all the schemas of the database.</comment></method><method name="schemasNames" startline="144" endline="151" visibility="public"><return type="array(string)">The names of all the schemas.</return><comment>Returns the names of all the schemas in the database.</comment></method><method name="table" startline="161" endline="181" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weePgSQLDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The schema does not exist.</throw></throws><comment>Returns a visible table of a given name in the database.</comment></method><method name="tableExists" startline="190" endline="197" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the schema, false otherwise.</return><comment>Returns whether a visible table of a given name exists in the database.</comment></method><method name="tables" filename="wee/db/meta/weeDbMeta.class.php" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMeta.class.php" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class (pgsql).</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>PostgreSQL specialization of weeDbMeta.</comment></class><class name="weePgSQLDbMetaColumn" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMetaColumn.class.php" startline="28" endline="165" parent="weeDbMetaColumn"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weePgSQLDbMeta">The pgsql dbmeta object.</param><param name="aData" type="array" hint="array">The column data.</param><param name="oTable" type="object" hint="weePgSQLDbMetaTable">The pgsql table of the column.</param></params><comment>Initializes a new pgsql column object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weePgSQLDbMetaTable.</comment></method><method name="comment" startline="53" endline="56" visibility="public"><return type="string">The comment of the column.</return><comment>Returns the comment of the column.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="65" endline="77" visibility="public"><return type="string">The default value of the column.</return><throws><throw>IllegalStateException	The column does not have a default value.</throw></throws><comment>Returns the default value of the column.</comment></method><method name="doGetValidator" startline="95" endline="131" visibility="protected"><return type="weeValidator">A validator appropriate for the column or null.</return><sees><see>http://www.postgresql.org/docs/8.3/static/datatype.html</see></sees><comment>Does the pgsql-dependent logic of getValidator.

Handled types:
 * smallint
 * int
 * bigint
 * real
 * character
 * character varying
 * time (in 24-hours format, without time zone)</comment></method><method name="getValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="139" endline="142" visibility="public"><return type="bool">true if the column has a default value, false otherwise.</return><comment>Returns whether the column has a default value.</comment></method><method name="hasValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="150" endline="153" visibility="public"><return type="bool">true if the column accepts null as a value, false otherwise.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="161" endline="164" visibility="public"><return type="string">The name of the schema.</return><comment>Returns the name of the schema of the column.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>PostgreSQL specialization of weeDbMetaColumn.</comment></class><class name="weePgSQLDbMetaForeignKey" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMetaForeignKey.class.php" startline="28" endline="112" parent="weeDbMetaSchemaForeignKey"><implements><implement>weeDbMetaCommentable</implement><implement>weeDbMetaSchemaObject</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weePgSQLDbMeta">The pgsql dbmeta object.</param><param name="aData" type="array" hint="array">The foreign key data.</param><param name="oTable" type="object" hint="weePgSQLDbMetaTable">The pgsql table of the foreign key.</param></params><comment>Initializes a new pgsql foreign key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weePgSQLDbMetaTable.</comment></method><method name="columnsNames" startline="55" endline="58" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Returns the names of the columns of the foreign key.

The columns are ordered as specified in the definition of the foreign key.</comment></method><method name="comment" startline="66" endline="69" visibility="public"><return type="string">The comment of the foreign key.</return><comment>Returns the comment of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="fetchColumnsNames" startline="81" endline="96" visibility="protected"><params numrequired="2"><param name="sTableOID" null="null" type="string">The OID of the table which columns belong to.</param><param name="sColumns" null="null" type="string">The set of columns, a text representation of a pgsql array with ',' as the element separator.</param></params><return type="array(string)">The names of the columns.</return><comment>Fetches the names of a given set of columns.

The names are returned in their order of appearance in the set.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="105" endline="111" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Returns the referenced columns of the foreign key.</comment></method><method name="referencedSchemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="37" endline="40" visibility="public"><return type="string">The name of the referenced schema.</return><comment>Returns the name of the schema in which is the referenced table.</comment></method><method name="referencedTableName" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="schemaName" filename="wee/db/meta/weeDbMetaSchemaForeignKey.class.php" startline="48" endline="51" visibility="public"><return type="string">The name of the schema in which is the foreign key.</return><comment>Returns the name of the schema in which is the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>PostgreSQL specialization of weeDbMetaForeignKey.</comment></class><class name="weePgSQLDbMetaPrimaryKey" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMetaPrimaryKey.class.php" startline="28" endline="91" parent="weeDbMetaPrimaryKey"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="42" endline="45" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weePgSQLDbMeta">The pgsql dbmeta object.</param><param name="aData" type="array" hint="array">The primary key data.</param><param name="oTable" type="object" hint="weePgSQLDbMetaTable">The pgsql table of the primary key.</param></params><comment>Initializes a new pgsql primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weePgSQLDbMetaTable.</comment></method><method name="columnsNames" startline="55" endline="68" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Returns the names of the columns of the primary key.

The columns are ordered as specified in the definition of the primary key.</comment></method><method name="comment" startline="76" endline="79" visibility="public"><return type="string">The comment of the primary key.</return><comment>Returns the comment of the primary key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="schemaName" startline="87" endline="90" visibility="public"><return type="string">The name of the schema.</return><comment>Returns the name of the schema of the column.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>PostgreSQL specialization of weeDbMetaPrimaryKey.</comment></class><class name="weePgSQLDbMetaSchema" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMetaSchema.class.php" startline="28" endline="124" parent="weeDbMetaSchema"><implements><implement>weeDbMetaCommentable</implement><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weePgSQLDbMeta">The pgsql dbmeta object.</param><param name="aData" type="array" hint="array">The schema data.</param></params><comment>Initializes a new pgsql schema object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weePgSQLDbMeta.</comment></method><method name="comment" startline="52" endline="55" visibility="public"><return type="string">The comment of the schema.</return><comment>Returns the comment of the schema.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="queryTables" startline="110" endline="123" visibility="protected"><return type="weeDatabaseResult">The data of all the tables in the schema.</return><comment>Queries all the tables in the schema.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" startline="65" endline="86" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weePgSQLDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The table does not exist in the schema.</throw></throws><comment>Returns a table of a given name in the schema.</comment></method><method name="tableExists" startline="95" endline="102" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the schema, false otherwise.</return><comment>Returns whether a table of a given name exists in the schema.</comment></method><method name="tables" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="37" endline="45" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables in the schema.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMetaSchema.class.php" startline="53" endline="60" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the schema.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>PostgreSQL specialization of weeDbMetaSchema.</comment></class><class name="weePgSQLDbMetaTable" module="wee/db/meta/pgsql" filename="wee/db/meta/pgsql/weePgSQLDbMetaTable.class.php" startline="28" endline="316" parent="weeDbMetaTable"><implements><implement>weeDbMetaSchemaObject</implement><implement>weeDbMetaForeignKeyProvider</implement><implement>weeDbMetaCommentable</implement></implements><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weePgSQLDbMeta">The pgsql dbmeta object.</param><param name="aData" type="array" hint="array">The table data.</param></params><comment>Initializes a new pgsql table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weePgSQLDbMetaSchema.</comment></method><method name="column" startline="54" endline="77" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weePgSQLDbMetaColumn">The column.</return><throws><throw>UnexpectedValueException	The column does not exist in the table.</throw></throws><comment>Returns a column of the table.</comment></method><method name="columnExists" startline="86" endline="96" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">true if the column exists, false otherwise.</return><comment>Returns whether a given column exists in the table.</comment></method><method name="columns" filename="wee/db/meta/weeDbMetaTable.class.php" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaTable.class.php" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="comment" startline="104" endline="107" visibility="public"><return type="string">The comment of the table.</return><comment>Returns the comment of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="foreignKey" startline="117" endline="143" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weePgSQLDbMetaPrimaryKey">The foreign key.</return><throws><throw>UnexpectedValueException	The foreign key does not exist.</throw></throws><comment>Returns a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="152" endline="159" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Returns whether a foreign key of a given name.</comment></method><method name="foreignKeys" startline="167" endline="192" visibility="public"><return type="array(weePgSQLDbMetaPrimaryKey)">The array of foreign keys.</return><comment>Returns all the foreign keys.</comment></method><method name="getColumnClass" startline="200" endline="203" visibility="public"><return type="string">The name of the column class.</return><comment>Returns the name of the column class.</comment></method><method name="getForeignKeyClass" startline="211" endline="214" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Returns the name of the foreign key class.</comment></method><method name="getPrimaryKeyClass" startline="222" endline="225" visibility="public"><return type="string">The name of the primary key class.</return><comment>Returns the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="233" endline="240" visibility="public"><return type="bool">true if the table has a primary key, false otherwise.</return><comment>Returns whether the table has a primary key.</comment></method><method name="instantiateObject" filename="wee/db/meta/weeDbMetaTable.class.php" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="262" endline="280" visibility="public"><return type="weePgSQLDbMetaPrimaryKey">The primary key.</return><throws><throw>IllegalStateException		The table does not have a primary key.</throw></throws><comment>Returns the primary key of the table.

The columns are ordered as specified in the definition of the primary key.</comment></method><method name="queryColumns" startline="288" endline="304" visibility="protected"><return type="weePgSQLResult">The data of all the columns of the table.</return><comment>Queries all the columns of the table.</comment></method><method name="quotedName" startline="248" endline="251" visibility="public"><return type="string">The quoted schema-qualified name of the table.</return><comment>Returns the quoted schema-qualified name of the table.</comment></method><method name="schemaName" startline="312" endline="315" visibility="public"><return type="string">The name of the schema of the table.</return><comment>Returns the name of the schema of the table.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property></properties><comment>PostgreSQL specialization of weeDbMetaTable.</comment></class><class name="weePgSQLResult" module="wee/db/pgsql" filename="wee/db/pgsql/weePgSQLResult.class.php" startline="29" endline="114" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="44" endline="50" visibility="public"><params numrequired="1"><param name="rResult" null="null" type="resource">The pgsql result resource.</param></params><throws><throw>InvalidArgumentException	The resource is not a valid pgsql result.</throw></throws><comment>Initialises a new pgsql result set.</comment></method><method name="count" startline="58" endline="65" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="73" endline="76" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="82" endline="85" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" startline="99" endline="113" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="rResult" visibility="protected"><comment>The pgsql result set.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Class for PostgreSQL query results handling.
An object of this class is created by the weePgSQLDatabase's query method for SELECT statements.</comment></class><class name="weePgSQLStatement" module="wee/db/pgsql" filename="wee/db/pgsql/weePgSQLStatement.class.php" startline="28" endline="162" parent="weeDatabaseStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="72" endline="103" visibility="public"><params numrequired="2"><param name="rLink" null="null" type="resource">The pgsql link resource.</param><param name="sQueryString" null="null" type="string"/></params><throws><throw>InvalidArgumentException	$rLink is not a valid pgsql link resource.</throw><throw>DatabaseException			PostgreSQL failed to prepare the given query.</throw></throws><comment>Creates a prepared statement.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" startline="111" endline="117" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the pgsql-dependent work to bind the parameters to the statement.</comment></method><method name="execute" startline="127" endline="148" visibility="public"><return type="mixed">An instance of weePgSQLResult if the query returned rows or null.</return><throws><throw>IllegalStateException	The number of parameters required by the prepared statement does not match the number of bound parameters.</throw><throw>DatabaseException		PostgreSQL failed to execute the prepared statement.</throw></throws><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="158" endline="161" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.</comment></method></methods><properties><property name="aParameters" visibility="protected"><comment>The parameters to bind to the prepared statement.</comment></property><property name="aParametersMap" visibility="protected"><comment>The PgSQL extension needs parameter names under the form $n.
This array is the map between names and numbers.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>Number of affected rows for the previous query.
Stocked here to prevent errors if getPKId is called.</comment></property><property name="rLink" visibility="protected"><comment>The pgsql link resource.</comment></property><property name="sStatementName" visibility="protected"><comment>Internal PgSQL statement name, used to identify prepared statements.
Generated automatically by this class.</comment></property></properties><comment>Class for prepared statements handling.</comment></class><class name="weeRSSFeed" module="wee/feed" filename="wee/feed/weeRSSFeed.class.php" startline="28" endline="159" parent="weeFeed"><implements><implement>Printable</implement></implements><methods><method name="__call" filename="wee/feed/weeFeed.class.php" startline="61" endline="71" visibility="public"><params numrequired="2"><param name="sName" null="null" type="string"/><param name="aArgs" null="null" type="array"/></params><overloads><overload func="author($aAuthor">Sets the feed author informations. The array can(TODO) have the following keys: name, email and TODO:uri.</overload><overload func="category($sCategory">Sets the category for all entries.</overload><overload func="link($sURL">Sets the link to the corresponding entry. TODO:check url</overload><overload func="logo($sIRI TODO:IRI">Sets the logo location.</overload><overload func="rights($sCopyright">Sets the feed copyright.</overload><overload func="subtitle($sSubTitle">Sets a small descriptive subtitle.</overload><overload func="title($sTitle">Sets the feed title.</overload><overload func="updated($sDate">Sets the feed build date. TODO:format</overload></overloads><comment>A few elements are required for each feed.
The following overloaded functions are defined for all the feed classes.

TODO:id
TODO:generator?</comment></method><method name="create" startline="36" endline="39" type="static" visibility="public"><return type="weeRSSFeed">A new weeRSSFeed object.</return><comment>Convenience function for creating atom feeds in one line.</comment></method><method name="entries" filename="wee/feed/weeFeed.class.php" startline="80" endline="86" visibility="public"><params numrequired="1"><param name="aEntries" null="null" type="array">The entries to add.</param></params><return type="$this"/><comment>Adds multiple entries.</comment></method><method name="entry" filename="wee/feed/weeFeed.class.php" startline="106" endline="117" visibility="public"><params numrequired="1"><param name="aEntry" null="null" type="array">The entry data.</param></params><return type="$this"/><comment>Adds an entry.

Each entry can have one of the following keys:
	* author
	* category
	* link
	* summary
	* title
	* updated
	* TODO:id

//TODO:validates each entry elements</comment></method><method name="isElementValid" filename="wee/feed/weeFeed.class.php" startline="126" endline="141" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given feed-related element is valid.</comment></method><method name="isEntryElementValid" filename="wee/feed/weeFeed.class.php" startline="150" endline="163" visibility="protected"><params numrequired="1"><param name="sElement" null="null" type="string">The element name.</param></params><return type="bool">True if the element is valid, false otherwise.</return><comment>Checks if given entry-related element is valid.</comment></method><method name="render" startline="121" endline="125" visibility="public"><comment>Output the feed as application/rss+xml.
This method sends the required header automatically.</comment></method><method name="toString" startline="133" endline="158" visibility="public"><return type="string">The XML for this feed.</return><comment>Returns the feed in XML format.</comment></method><method name="writeElement" startline="52" endline="114" visibility="protected"><params numrequired="3"><param name="oXMLWriter" type="object" hint="XMLWriter"/><param name="sName" null="null" type="string">The name of the element.</param><param name="mValue" null="null" type="mixed"/></params><return type="string">The XML element created according to the given name.</return><comment>Converts an element to its XML equivalent.
Called when generating the feed's XML.


TODO:there must be a better way for this</comment></method></methods><properties><property name="aEntries" visibility="protected"><comment>Contains the entry-related data.
Each element of this array is an entry.</comment></property><property name="aFeed" visibility="protected"><comment>Contains the feed-related data.</comment></property></properties><comment>Class for RSS feeds generation.</comment></class><class name="weeSendMail" module="wee/mail" filename="wee/mail/weeSendMail.class.php" startline="30" endline="58" parent="PHPMailer"><methods><method name="__construct" startline="36" endline="39" visibility="public"><comment>Initialize PHPMailer.</comment></method><method name="_mime_types" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1751" endline="1842" visibility="public"><params numrequired="0"><param name="ext" null="null" default="''" type="exception"/></params><comment>Gets the mime type of the embedded or inline image
   * @access public
   * @return mime type of ext</comment></method><method name="AddAddress" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="330" endline="334" visibility="public"><params numrequired="1"><param name="address" null="null" type="array"/><param name="name" null="null" default="''"/></params><comment>Adds a &quot;To&quot; address.
   * @param string $address
   * @param string $name
   * @return void</comment></method><method name="AddAttachment" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1139" endline="1161" visibility="public"><params numrequired="1"><param name="path" null="null"/><param name="name" null="null" default="''"/><param name="encoding" null="null" default="'base64'" type="exception"/><param name="type" null="null" default="'application/octet-stream'"/></params><comment>Adds an attachment from a path on the filesystem.
 Returns false if the file could not be found
 or accessed.
   * @param string $path Path to the attachment.
   * @param string $name Overrides the attachment name.
   * @param string $encoding File encoding (see $Encoding).
   * @param string $type File extension (MIME) type.
   * @return bool</comment></method><method name="AddBCC" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="358" endline="362" visibility="public"><params numrequired="1"><param name="address" null="null" type="array"/><param name="name" null="null" default="''"/></params><comment>Adds a &quot;Bcc&quot; address. Note: this function works
 with the SMTP mailer on win32, not with the &quot;mail&quot;
 mailer.
   * @param string $address
   * @param string $name
   * @return void</comment></method><method name="AddCC" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="344" endline="348" visibility="public"><params numrequired="1"><param name="address" null="null" type="array"/><param name="name" null="null" default="''"/></params><comment>Adds a &quot;Cc&quot; address. Note: this function works
 with the SMTP mailer on win32, not with the &quot;mail&quot;
 mailer.
   * @param string $address
   * @param string $name
   * @return void</comment></method><method name="AddCustomHeader" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1705" endline="1707" visibility="public"><params numrequired="1"><param name="custom_header" null="null"/></params><comment>Adds a custom header.
   * @access public
   * @return void</comment></method><method name="AddEmbeddedImage" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1508" endline="1532" visibility="public"><params numrequired="2"><param name="path" null="null"/><param name="cid" null="null"/><param name="name" null="null" default="''"/><param name="encoding" null="null" default="'base64'" type="exception"/><param name="type" null="null" default="'application/octet-stream'"/></params><comment>Adds an embedded attachment.  This can include images, sounds, and
 just about any other document.  Make sure to set the $type to an
 image type.  For JPEG images use &quot;image/jpeg&quot; and for GIF images
 use &quot;image/gif&quot;.
   * @param string $path Path to the attachment.
   * @param string $cid Content ID of the attachment.  Use this to identify
        the Id for accessing the image in an HTML form.
   * @param string $name Overrides the attachment name.
   * @param string $encoding File encoding (see $Encoding).
   * @param string $type File extension (MIME) type.
   * @return bool</comment></method><method name="AddrAppend" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="696" endline="707" visibility="public"><params numrequired="2"><param name="type" null="null"/><param name="addr" null="null" type="array"/></params><comment>Creates recipient headers.
   * @access public
   * @return string</comment></method><method name="AddReplyTo" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="370" endline="374" visibility="public"><params numrequired="1"><param name="address" null="null" type="array"/><param name="name" null="null" default="''"/></params><comment>Adds a &quot;Reply-to&quot; address.
   * @param string $address
   * @param string $name
   * @return void</comment></method><method name="AddrFormat" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="714" endline="722" visibility="public"><params numrequired="1"><param name="addr" null="null" type="array"/></params><comment>Formats an address correctly.
   * @access public
   * @return string</comment></method><method name="AddStringAttachment" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1482" endline="1493" visibility="public"><params numrequired="2"><param name="string" null="null" type="string"/><param name="filename" null="null" type="float"/><param name="encoding" null="null" default="'base64'" type="exception"/><param name="type" null="null" default="'application/octet-stream'"/></params><comment>Adds a string or binary attachment (non-filesystem) to the list.
 This method can be used to attach ascii or binary data,
 such as a BLOB record from a database.
   * @param string $string String attachment data.
   * @param string $filename Name of the attachment.
   * @param string $encoding File encoding (see $Encoding).
   * @param string $type File extension (MIME) type.
   * @return void</comment></method><method name="AttachAll" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1169" endline="1221" visibility="public"><comment>Attaches all fs, string, and binary attachments to the message.
 Returns an empty string on failure.
   * @access public
   * @return string</comment></method><method name="Base64EncodeWrapMB" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1363" endline="1393" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/></params><comment>Correctly encodes and wraps long multibyte strings for mail headers
 without breaking lines within a character.
 Adapted from a function by paravoid at http://uk.php.net/manual/en/function.mb-encode-mimeheader.php
   * @access public
   * @param string $str multi-byte text to wrap encode
   * @return string</comment></method><method name="ClearAddresses" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1559" endline="1561" visibility="public"><comment>Clears all recipients assigned in the TO array.  Returns void.
   * @return void</comment></method><method name="ClearAllRecipients" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1592" endline="1596" visibility="public"><comment>Clears all recipients assigned in the TO, CC and BCC
 array.  Returns void.
   * @return void</comment></method><method name="ClearAttachments" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1603" endline="1605" visibility="public"><comment>Clears all previously set filesystem, string, and binary
 attachments.  Returns void.
   * @return void</comment></method><method name="ClearBCCs" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1575" endline="1577" visibility="public"><comment>Clears all recipients assigned in the BCC array.  Returns void.
   * @return void</comment></method><method name="ClearCCs" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1567" endline="1569" visibility="public"><comment>Clears all recipients assigned in the CC array.  Returns void.
   * @return void</comment></method><method name="ClearCustomHeaders" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1611" endline="1613" visibility="public"><comment>Clears all custom headers.  Returns void.
   * @return void</comment></method><method name="ClearReplyTos" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1583" endline="1585" visibility="public"><comment>Clears all recipients assigned in the ReplyTo array.  Returns void.
   * @return void</comment></method><method name="CreateBody" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="985" endline="1053" visibility="public"><comment>Assembles the message body.  Returns an empty string on failure.
   * @access public
   * @return string</comment></method><method name="CreateHeader" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="873" endline="943" visibility="public"><comment>Assembles message header.
   * @access public
   * @return string</comment></method><method name="EncodeFile" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1229" endline="1248" visibility="public"><params numrequired="1"><param name="path" null="null"/><param name="encoding" null="null" default="'base64'" type="exception"/></params><comment>Encodes attachment in requested format.  Returns an
 empty string on failure.
   * @access public
   * @return string</comment></method><method name="EncodeHeader" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1286" endline="1339" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/><param name="position" null="null" default="'text'"/></params><comment>Encode a header string to best of Q, B, quoted or none.
   * @access public
   * @return string</comment></method><method name="EncodeQ" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1448" endline="1470" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/><param name="position" null="null" default="'text'"/></params><comment>Encode string to q encoding.
   * @access public
   * @return string</comment></method><method name="EncodeQP" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1402" endline="1441" visibility="public"><params numrequired="0"><param name="input" null="null" default="''" type="int"/><param name="line_max" null="null" default="76"/><param name="space_conv" null="null" default="false" type="string"/></params><comment>Encode string to quoted-printable.
  * @access public
  * @param string $string the text to encode
  * @param integer $line_max Number of chars allowed on a line before wrapping
  * @return string</comment></method><method name="EncodeString" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1256" endline="1279" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/><param name="encoding" null="null" default="'base64'" type="exception"/></params><comment>Encodes string to requested format. Returns an
 empty string on failure.
   * @access public
   * @return string</comment></method><method name="EndBoundary" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1083" endline="1085" visibility="public"><params numrequired="1"><param name="boundary" null="null" type="bool"/></params><comment>Returns the end of a message boundary.
   * @access public</comment></method><method name="FixEOL" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1693" endline="1698" visibility="private"><params numrequired="1"><param name="str" null="null" type="string"/></params><comment>Changes every end of line from CR or LF to CRLF.
   * @access private
   * @return string</comment></method><method name="GetBoundary" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1059" endline="1077" visibility="public"><params numrequired="4"><param name="boundary" null="null" type="bool"/><param name="charSet" null="null"/><param name="contentType" null="null"/><param name="encoding" null="null" type="exception"/></params><comment>Returns the start of a message boundary.
   * @access public</comment></method><method name="getFile" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1870" endline="1881" visibility="public"><params numrequired="1"><param name="filename" null="null" type="float"/></params><comment>Read a file from a supplied filename and return it.

   * @access public
   * @param string $filename Parameter File Name</comment></method><method name="GetMailMIME" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="950" endline="978" visibility="public"><comment>Returns the message MIME.
   * @access public
   * @return string</comment></method><method name="HasMultiBytes" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1347" endline="1353" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/></params><comment>Checks if a string contains multibyte characters.
   * @access public
   * @param string $str multi-byte text to wrap encode
   * @return bool</comment></method><method name="HeaderLine" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1112" endline="1114" visibility="public"><params numrequired="2"><param name="name" null="null"/><param name="value" null="null"/></params></method><method name="InlineImageExists" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1539" endline="1549" visibility="public"><comment>Returns true if an inline attachment is present.
   * @access public
   * @return bool</comment></method><method name="IsError" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1684" endline="1686" visibility="public"><comment>Returns true if an error occurred.
   * @access public
   * @return bool</comment></method><method name="IsHTML" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="279" endline="285" visibility="public"><params numrequired="1"><param name="bool" null="null" type="bool"/></params><comment>Sets message type to HTML.
   * @param bool $bool
   * @return void</comment></method><method name="IsMail" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="299" endline="301" visibility="public"><comment>Sets Mailer to send message using PHP mail() function.
   * @return void</comment></method><method name="IsQmail" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="315" endline="318" visibility="public"><comment>Sets Mailer to send message using the qmail MTA.
   * @return void</comment></method><method name="IsSendmail" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="307" endline="309" visibility="public"><comment>Sets Mailer to send message using the $Sendmail program.
   * @return void</comment></method><method name="IsSMTP" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="291" endline="293" visibility="public"><comment>Sets Mailer to send message using SMTP.
   * @return void</comment></method><method name="Lang" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1667" endline="1677" visibility="private"><params numrequired="1"><param name="key" null="null"/></params><comment>Returns a message in the appropriate language.
   * @access private
   * @return string</comment></method><method name="loadTemplate" startline="49" endline="57" visibility="public"><params numrequired="1"><param name="sTemplate" null="null" type="string">The template name.</param><param name="aData" default="array()" type="array" hint="array">Data to be used in the template.</param></params><comment>Load body and headers from the specified template file.
Unknown headers are skipped.</comment></method><method name="MailSend" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="469" endline="510" visibility="public"><params numrequired="2"><param name="header" null="null"/><param name="body" null="null" type="bool"/></params><comment>Sends mail using the PHP mail() function.
   * @access public
   * @return bool</comment></method><method name="MsgHTML" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1714" endline="1744" visibility="public"><params numrequired="1"><param name="message" null="null" type="mixed"/><param name="basedir" null="null" default="''" type="bool"/></params><comment>Evaluates the message and returns modifications for inline images and backgrounds
   * @access public
   * @return $message</comment></method><method name="RFCDate" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1635" endline="1643" type="static" visibility="private"><comment>Returns the proper RFC 822 formatted date.
   * @access private
   * @return string</comment></method><method name="SecureHeader" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1889" endline="1894" visibility="public"><params numrequired="1"><param name="str" null="null" type="string"/></params><comment>Strips newlines to prevent header injection.
   * @access public
   * @param string $str String
   * @return string</comment></method><method name="Send" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="386" endline="430" visibility="public"><comment>Creates message and assigns Mailer. If the message is
 not sent successfully then it returns false.  Use the ErrorInfo
 variable to view description of the error.
   * @return bool</comment></method><method name="SendmailSend" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="437" endline="462" visibility="public"><params numrequired="2"><param name="header" null="null"/><param name="body" null="null" type="bool"/></params><comment>Sends mail using the $Sendmail program.
   * @access public
   * @return bool</comment></method><method name="ServerHostname" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1650" endline="1660" visibility="private"><comment>Returns the server hostname or 'localhost.localdomain' if unknown.
   * @access private
   * @return string</comment></method><method name="set" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1855" endline="1862" visibility="public"><params numrequired="1"><param name="name" null="null"/><param name="value" null="null" default="''"/></params><comment>Set (or reset) Class Objects (variables)

 Usage Example:
 $page-&gt;set('X-Priority', '3');

   * @access public
   * @param string $name Parameter Name
   * @param mixed $value Parameter Value
 NOTE: will not work with arrays, there are no arrays to set/reset</comment></method><method name="SetError" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1625" endline="1628" visibility="private"><params numrequired="1"><param name="msg" null="null" type="mixed"/></params><comment>Adds the error message to the error container.
 Returns void.
   * @access private
   * @return void</comment></method><method name="SetLanguage" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="666" endline="685" visibility="public"><params numrequired="0"><param name="lang_type" null="null" default="'en'"/><param name="lang_path" null="null" default="'language/'"/></params><comment>Sets the language for all class error messages.  Returns false
 if it cannot load the language file.  The default language type
 is English.
   * @param string $lang_type Type of language (e.g. Portuguese: &quot;br&quot;)
   * @param string $lang_path Path to the language file directory
   * @access public
   * @return bool</comment></method><method name="SetMessageType" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1092" endline="1106" visibility="public"><comment>Sets the message type.
   * @access public
   * @return void</comment></method><method name="SetWordWrap" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="851" endline="866" visibility="public"><comment>Set the body wrapping.
   * @access public
   * @return void</comment></method><method name="Sign" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1903" endline="1907" visibility="public"><params numrequired="3"><param name="cert_filename" null="null"/><param name="key_filename" null="null"/><param name="key_pass" null="null"/></params><comment>Set the private key file and password to sign the message.

   * @access public
   * @param string $key_filename Parameter File Name
   * @param string $key_pass Password for private key</comment></method><method name="SmtpClose" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="648" endline="655" visibility="public"><comment>Closes the active SMTP session if one exists.
   * @return void</comment></method><method name="SmtpConnect" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="586" endline="642" visibility="public"><comment>Initiates a connection to an SMTP server.  Returns false if the
 operation failed.
   * @access public
   * @return bool</comment></method><method name="SmtpSend" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="519" endline="578" visibility="public"><params numrequired="2"><param name="header" null="null"/><param name="body" null="null" type="bool"/></params><comment>Sends mail via SMTP using PhpSMTP (Author:
 Chris Ryan).  Returns bool.  Returns false if there is a
 bad MAIL FROM, RCPT, or DATA input.
   * @access public
   * @return bool</comment></method><method name="TextLine" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="1121" endline="1123" visibility="public"><params numrequired="1"><param name="value" null="null"/></params><comment>Returns a formatted mail line.
   * @access public
   * @return string</comment></method><method name="UTF8CharBoundary" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="813" endline="843" visibility="public"><params numrequired="2"><param name="encodedText" null="null" type="exception"/><param name="maxLength" null="null" type="mixed"/></params><comment>Finds last character boundary prior to maxLength in a utf-8
 quoted (printable) encoded string.
 Original written by Colin Brown.
   * @access public
   * @param string $encodedText utf-8 QP text
   * @param int    $maxLength   find last character boundary prior to this length
   * @return int</comment></method><method name="WrapText" filename="wee/vendor/phpmailer/class.phpmailer.php" startline="731" endline="802" visibility="public"><params numrequired="2"><param name="message" null="null" type="mixed"/><param name="length" null="null"/><param name="qp_mode" null="null" default="false"/></params><comment>Wraps message for use with mailers that do not
 automatically perform wrapping and for quoted-printable.
 Original written by philippe.
   * @access public
   * @return string</comment></method></methods><properties><property name="AltBody" visibility="public"><comment>Sets the text-only body of the message.  This automatically sets the
 email to multipart/alternative.  This body can be read by mail
 clients that do not have HTML email capability such as mutt. Clients
 that can read HTML will view the normal Body.
   * @var string</comment></property><property name="Body" visibility="public"><comment>Sets the Body of the message.  This can be either an HTML or text body.
 If HTML then run IsHTML(true).
   * @var string</comment></property><property name="CharSet" visibility="public"><comment>Sets the CharSet of the message.
   * @var string</comment></property><property name="ConfirmReadingTo" visibility="public"><comment>Sets the email address that a reading confirmation will be sent.
   * @var string</comment></property><property name="ContentType" visibility="public"><comment>Sets the Content-type of the message.
   * @var string</comment></property><property name="Encoding" visibility="public"><comment>Sets the Encoding of the message. Options for this are &quot;8bit&quot;,
 &quot;7bit&quot;, &quot;binary&quot;, &quot;base64&quot;, and &quot;quoted-printable&quot;.
   * @var string</comment></property><property name="ErrorInfo" visibility="public"><comment>Holds the most recent mailer error message.
   * @var string</comment></property><property name="From" visibility="public"><comment>Sets the From email address for the message.
   * @var string</comment></property><property name="FromName" visibility="public"><comment>Sets the From name of the message.
   * @var string</comment></property><property name="Helo" visibility="public"><comment>Sets the SMTP HELO of the message (Default is $Hostname).
   * @var string</comment></property><property name="Host" visibility="public"><comment>Sets the SMTP hosts.  All hosts must be separated by a
 semicolon.  You can also specify a different port
 for each host by using this format: [hostname:port]
 (e.g. &quot;smtp1.example.com:25;smtp2.example.com&quot;).
 Hosts will be tried in order.
   * @var string</comment></property><property name="Hostname" visibility="public"><comment>Sets the hostname to use in Message-Id and Received headers
 and as default HELO string. If empty, the value returned
 by SERVER_NAME is used or 'localhost.localdomain'.
   * @var string</comment></property><property name="LE" visibility="public"><comment>Provides the ability to change the line ending
   * @var string</comment></property><property name="Mailer" visibility="public"><comment>Method to send mail: (&quot;mail&quot;, &quot;sendmail&quot;, or &quot;smtp&quot;).
   * @var string</comment></property><property name="MessageID" visibility="public"><comment>Sets the message ID to be used in the Message-Id header.
 If empty, a unique id will be generated.
   * @var string</comment></property><property name="Password" visibility="public"><comment>Sets SMTP password.
   * @var string</comment></property><property name="PluginDir" visibility="public"><comment>Path to PHPMailer plugins.  This is now only useful if the SMTP class
 is in a different directory than the PHP include path.
   * @var string</comment></property><property name="Port" visibility="public"><comment>Sets the default SMTP server port.
   * @var int</comment></property><property name="Priority" visibility="public"><comment>Email priority (1 = High, 3 = Normal, 5 = low).
   * @var int</comment></property><property name="Sender" visibility="public"><comment>Sets the Sender email (Return-Path) of the message.  If not empty,
 will be sent via -f to sendmail or as 'MAIL FROM' in smtp mode.
   * @var string</comment></property><property name="Sendmail" visibility="public"><comment>Sets the path of the sendmail program.
   * @var string</comment></property><property name="SingleTo" visibility="public"><comment>Provides the ability to have the TO field process individual
 emails, instead of sending to entire TO addresses
   * @var bool</comment></property><property name="SMTPAuth" visibility="public"><comment>Sets SMTP authentication. Utilizes the Username and Password variables.
   * @var bool</comment></property><property name="SMTPDebug" visibility="public"><comment>Sets SMTP class debugging on or off.
   * @var bool</comment></property><property name="SMTPKeepAlive" visibility="public"><comment>Prevents the SMTP connection from being closed after each mail
 sending.  If this is set to true then to close the connection
 requires an explicit call to SmtpClose().
   * @var bool</comment></property><property name="SMTPSecure" visibility="public"><comment>Sets connection prefix.
 Options are &quot;&quot;, &quot;ssl&quot; or &quot;tls&quot;
   * @var string</comment></property><property name="Subject" visibility="public"><comment>Sets the Subject of the message.
   * @var string</comment></property><property name="Timeout" visibility="public"><comment>Sets the SMTP server timeout in seconds. This function will not
 work with the win32 version.
   * @var int</comment></property><property name="Username" visibility="public"><comment>Sets SMTP username.
   * @var string</comment></property><property name="Version" visibility="public"><comment>Holds PHPMailer version.
   * @var string</comment></property><property name="WordWrap" visibility="public"><comment>Sets word wrapping on the body of the message to a given number of
 characters.
   * @var int</comment></property></properties><comment>Class extending PHPMailer, used to send emails via SMTP.</comment></class><class name="weeSession" module="wee/http" filename="wee/http/weeSession.class.php" startline="28" endline="214"><implements><implement>ArrayAccess</implement></implements><methods><method name="__construct" startline="51" endline="63" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">A list of parameters to configure the session class.</param></params><sees><see>weeSession::isSessionInvalid</see></sees><comment>Sanitize the session id and start the session if it wasn't already.

If anything looks wrong the session is reinitialized. This can happen because:
	* the session's name sent by the cookie is invalid
	* the session is deemed invalid by the isSessionInvalid method

Two parameters change the behavior of this class:
	* 'check.ip': whether to check for the client's IP on each request
	* 'check.token': whether to check for the session token on each request</comment></method><method name="clear" startline="69" endline="81" visibility="public"><comment>Clear the session.</comment></method><method name="getIP" startline="90" endline="95" visibility="public"><return type="string">The IP for this session.</return><comment>Returns the session's user IP.
If user is behind a proxy, returns the forwarded IP.</comment></method><method name="initSession" startline="104" endline="113" visibility="protected"><comment>Initialize the session.

If the parameter 'check.ip' evaluates to true, store the IP address into the session.
If the parameter 'check.token' evaluates to true, generate a token and store it both into the session and in the client's cookies.</comment></method><method name="isSessionInvalid" startline="129" endline="140" visibility="protected"><return type="bool">True if the session is invalid, false otherwise.</return><comment>Checks if the session is invalid.

The session is invalid if:
* the parameter 'check.ip' evaluates to true and either of
	** the session's IP is empty
	** the session's IP is different from the current user IP
* the parameter 'check.token' evaluates to true and either of
	** the session token is empty
	** the session token is different from the cookie's session token</comment></method><method name="offsetExists" startline="150" endline="153" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" startline="163" endline="168" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="mixed">Value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" startline="178" endline="181" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" startline="190" endline="193" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="setFromArray" startline="204" endline="213" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data to copy.</param></params><throws><throw>InvalidArgumentException	The data is not of a correct type.</throw></throws><comment>Copy data directly from an array.

The data must be either an array, a traversable object or an instance of Mappable.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Session's configuration.</comment></property></properties><comment>Wrapper around $_SESSION for easier session management.</comment></class><class name="weeSessionDbTable" module="wee/http" filename="wee/http/weeSessionDbTable.class.php" startline="29" endline="295" parent="weeSession"><implements><implement>ArrayAccess</implement></implements><methods><method name="__construct" startline="72" endline="97" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">A list of parameters to configure the session class.</param></params><sees><see>weeSession::__construct</see></sees><comment>Initialize the session storage handler.

Along with the parameters defined by weeSession::construct, another
parameter &quot;table&quot; identify which table should be used to store sessions.</comment></method><method name="__destruct" startline="109" endline="112" visibility="public"><comment>Close the session storage handler before destroying the object.

According to the PHP manual:
	As of PHP 5.0.5 the write and close handlers are called after object
	destruction and therefore cannot use objects or throw exceptions.
	The object destructors can however use sessions. It is possible to call
	session_write_close() from the destructor to solve this chicken and egg problem.</comment></method><method name="clear" filename="wee/http/weeSession.class.php" startline="69" endline="81" visibility="public"><comment>Clear the session.</comment></method><method name="getDb" startline="121" endline="128" visibility="public"><return type="weeDatabase">The database associated to this model.</return><throws><throw>IllegalStateException	No database has been associated to this model.</throw></throws><comment>Returns the database associated to this model.</comment></method><method name="getIP" filename="wee/http/weeSession.class.php" startline="90" endline="95" visibility="public"><return type="string">The IP for this session.</return><comment>Returns the session's user IP.
If user is behind a proxy, returns the forwarded IP.</comment></method><method name="initSession" filename="wee/http/weeSession.class.php" startline="104" endline="113" visibility="protected"><comment>Initialize the session.

If the parameter 'check.ip' evaluates to true, store the IP address into the session.
If the parameter 'check.token' evaluates to true, generate a token and store it both into the session and in the client's cookies.</comment></method><method name="isSessionInvalid" filename="wee/http/weeSession.class.php" startline="129" endline="140" visibility="protected"><return type="bool">True if the session is invalid, false otherwise.</return><comment>Checks if the session is invalid.

The session is invalid if:
* the parameter 'check.ip' evaluates to true and either of
	** the session's IP is empty
	** the session's IP is different from the current user IP
* the parameter 'check.token' evaluates to true and either of
	** the session token is empty
	** the session token is different from the cookie's session token</comment></method><method name="offsetExists" filename="wee/http/weeSession.class.php" startline="150" endline="153" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="bool">Whether the offset exists.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns whether offset exists.</comment></method><method name="offsetGet" filename="wee/http/weeSession.class.php" startline="163" endline="168" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><return type="mixed">Value at given offset</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Returns value at given offset.</comment></method><method name="offsetSet" filename="wee/http/weeSession.class.php" startline="178" endline="181" visibility="public"><params numrequired="2"><param name="offset" null="null" type="object">Offset name.</param><param name="value" null="null">New value for this offset.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Sets a new value for the given offset.</comment></method><method name="offsetUnset" filename="wee/http/weeSession.class.php" startline="190" endline="193" visibility="public"><params numrequired="1"><param name="offset" null="null" type="object">Offset name.</param></params><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceArrayAccess.html</see></sees><comment>Unsets offset.</comment></method><method name="setDb" startline="137" endline="141" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database instance to associate to this model.</param></params><return type="$this">Used to chain methods.</return><comment>Associate a database to this model.</comment></method><method name="setFromArray" filename="wee/http/weeSession.class.php" startline="204" endline="213" visibility="public"><params numrequired="1"><param name="aData" null="null" type="array">The data to copy.</param></params><throws><throw>InvalidArgumentException	The data is not of a correct type.</throw></throws><comment>Copy data directly from an array.

The data must be either an array, a traversable object or an instance of Mappable.</comment></method><method name="storageClose" startline="150" endline="153" visibility="public"><return type="bool">Whether the storage was successfully closed.</return><comment>Close the session storage.
Used internally by PHP's session storage handler.</comment></method><method name="storageDestroy" startline="163" endline="181" visibility="public"><params numrequired="1"><param name="sSessionId" null="null" type="string">The identifier of the session to be deleted.</param></params><return type="bool">Whether the session has been deleted.</return><comment>Delete a session from the storage.
Used internally by PHP's session storage handler.</comment></method><method name="storageGarbageCollector" startline="191" endline="205" visibility="public"><params numrequired="1"><param name="iMaxLifeTime" null="null" type="int">The maximum time passed since the last access to the session.</param></params><return type="bool">Whether the garbage collector completed successfully.</return><comment>Run the session garbage collector.
Used internally by PHP's session storage handler.</comment></method><method name="storageOpen" startline="216" endline="222" visibility="public"><params numrequired="2"><param name="sSessionSavePath" null="null" type="string">Path where the session should be stored.</param><param name="sSessionName" null="null" type="string">Name of the session.</param></params><return type="Whether">the storage was open successfully.</return><comment>Open the session storage.
Used internally by PHP's session storage handler.</comment></method><method name="storageRead" startline="232" endline="251" visibility="public"><params numrequired="1"><param name="sSessionId" null="null" type="string">The identifier of the session requested.</param></params><return type="bool">The session's data.</return><comment>Read a session from the storage.
Used internally by PHP's session storage handler.</comment></method><method name="storageWrite" startline="262" endline="294" visibility="public"><params numrequired="2"><param name="sSessionId" null="null" type="string">The identifier of the session to be stored.</param><param name="sSessionData" null="null" type="string">The data of the session.</param></params><return type="mixed">The number of bytes written or false on failure.</return><comment>Store a session.
Used internally by PHP's session storage handler.</comment></method></methods><properties><property name="aParams" visibility="protected"><comment>Session's configuration.</comment></property><property name="bExists" visibility="protected"><comment>Whether the session already exists in the table.

This property is used to determine which of INSERT or UPDATE
statement we need to use when writing the session in the database.
PHP will always try to read the session before writing it back in
the database, allowing us to know whether the row exists.</comment></property><property name="oDatabase" visibility="protected"><comment>The database associated with this session.</comment></property><property name="sName" visibility="protected"><comment>Name of the session. Defaults to PHPSESSID.
Defined internally by PHP's session storage handler.</comment></property><property name="sSavePath" visibility="protected"><comment>Path where the session should be stored.
Defined internally by PHP's session storage handler.</comment></property></properties><comment>Wrapper around $_SESSION for easier session management.
The session data will be stored in a database instead of on the filesystem.</comment></class><class name="weeSet" module="wee/model" filename="wee/model/weeSet.class.php" startline="29" endline="51" parent="weeDataSource" type="abstract"><methods><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="getModelName" startline="44" endline="50" visibility="public"><return type="string">The model class name.</return><comment>Returns the model name associated with this set.</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="sModel" visibility="protected"><comment>Model associated with this set of elements.
This set will always return elements according to this model.</comment></property></properties><comment>Base class for handling a set of elements.
Elements are defined by the model associated with the set.</comment></class><class name="weeSQLiteDatabase" module="wee/db/sqlite" filename="wee/db/sqlite/weeSQLiteDatabase.class.php" startline="28" endline="194" parent="weeDatabase"><methods><method name="__clone" filename="wee/db/weeDatabase.class.php" startline="56" endline="58" type="final" visibility="private"><comment>The database driver objects can't be cloned.</comment></method><method name="__construct" startline="62" endline="82" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array">The parameters of the driver.</param></params><throws><throw>ConfigurationException		The SQLite PHP extension is missing.</throw><throw>InvalidArgumentException	Parameter &quot;file&quot; is missing.</throw><throw>FileNotFoundException		The database file does not exist and the parameter &quot;create&quot; does not evaluate to true.</throw><throw>DatabaseException			Failed to connect to the database.</throw></throws><comment>Initialises a new sqlite database.

This driver accepts the following parameters:
 * create:	Whether to create the database file if it does not exist (defaults to false).
 * file:	The filename of the SQLite database (mandatory).</comment></method><method name="batchQueries" filename="wee/db/weeDatabase.class.php" startline="66" endline="70" visibility="public"><params numrequired="1"><param name="aQueries" null="null" type="array">The array of query strings</param></params><comment>Execute a batch of SQL queries.</comment></method><method name="bindNamedParameters" filename="wee/db/weeDatabase.class.php" startline="80" endline="99" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the array of arguments passed to the query method</param></params><return type="string">The query safely build</return><comment>Common function for building queries that use named parameters placeholders.
Used to replace all the named parameters in the query by the specified arguments, escaped as needed.</comment></method><method name="bindQuestionMarks" filename="wee/db/weeDatabase.class.php" startline="109" endline="124" visibility="protected"><params numrequired="1"><param name="aArguments" null="null" type="array">The query and the arguments passed to the query method</param></params><return type="string">The query safely built</return><comment>Common function for building queries that use question marks placeholders.
Used to replace all the ? in the query by the specified arguments, escaped as needed.</comment></method><method name="doEscape" startline="91" endline="94" visibility="protected"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape.</param></params><return type="string">The escaped value.</return><comment>Does the sqlite-dependent logic of the escape operation.</comment></method><method name="doQuery" startline="104" endline="119" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeSQLiteResult">For queries that return rows, the result object.</return><throws><throw>DatabaseException	SQLite failed to execute the query.</throw></throws><comment>Executes an SQL query.</comment></method><method name="escape" filename="wee/db/weeDatabase.class.php" startline="155" endline="170" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to escape</param></params><return type="string">The escaped value.</return><comment>Escapes the given value for safe concatenation in an SQL query.
You should not build query by concatenation if possible (see query).
You should NEVER use sprintf when building queries.

When the given value is null, the SQL token &quot;null&quot; is returned.</comment></method><method name="escapeIdent" startline="131" endline="134" visibility="public"><params numrequired="1"><param name="sValue" null="null" type="string">The identifier to escape.</param></params><return type="string">The escaped identifier, wrapped around adequate quotes.</return><comment>Escape a given identifier for safe concatenation in an SQL query.

Be careful when using escaped identifiers in the field list of a SELECT query as
they will be used as the keys of the result set.</comment></method><method name="getMetaClass" startline="142" endline="145" visibility="public"><comment>Returns the name of the dbmeta class associated with this driver.</comment></method><method name="getPKId" startline="157" endline="163" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">Unused in this database driver.</param></params><return type="int">The last value generated.</return><throws><throw>IllegalStateException	No sequence value has been generated yet by the database in this session.</throw></throws><comment>Returns the last sequence value generated by the database in this session.

In SQLite, it's the last value generated for an INTEGER PRIMARY KEY column by an INSERT query.</comment></method><method name="is" filename="wee/db/weeDatabase.class.php" startline="214" endline="219" visibility="public"><params numrequired="0"><param name="sDBMS" null="null" default="NULL" type="string">The DBMS' name to compare to.</param></params><return type="mixed">Whether the database is from the given DBMS or the name of the DBMS.</return><comment>Determine the name of the underlying DBMS.

This method can be used in two different ways:
* If no argument is given then the underlying DBMS' name is returned.
* Otherwise a boolean is returned indicating whether the argument is equal to the underlying DBMS' name.</comment></method><method name="meta" filename="wee/db/weeDatabase.class.php" startline="228" endline="239" visibility="public"><return type="weeDbMeta">The meta object.</return><throws><throw>BadMethodCallException	This database driver does not support dbmeta.</throw></throws><comment>Returns the meta object associated with this database.</comment></method><method name="numAffectedRows" startline="178" endline="181" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.

You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.

Please note that SQLite always return 0 for an unconditional DELETE statement (e.g.
DELETE FROM tablename), if you need the number of deleted rows, you should execute
DELETE FROM tablename WHERE 1.</comment></method><method name="prepare" startline="190" endline="193" visibility="public"><params numrequired="1"><param name="sQuery" null="null" type="string">The query string.</param></params><return type="weeSQLiteStatement">The prepared statement.</return><comment>Prepares an SQL query statement.</comment></method><method name="query" filename="wee/db/weeDatabase.class.php" startline="305" endline="316" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><return type="weeDatabaseResult">Only with SELECT queries: an object for results handling</return><comment>Build and execute an SQL query.

If you pass other arguments to it, the arguments will be escaped and inserted into the query.

For example if you have:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=? AND example_id=? LIMIT 1', $sField, $iId);
}}}
It will select the row with the $sField example_name and $iId example_id.

You can also use named parameters. This can make for more readable queries,
but more importantly you won't have to repeat variables when you pass them
after the query string, since they will have a name assigned.

There's two ways to use named parameters. You can assign explicit names, or use the implicit ones.
If you specify names the above query will become like this:
{{{
weeApp()-&gt;db-&gt;query('SELECT * FROM example_table WHERE example_name=:name AND example_id=:id LIMIT 1', array(
	'name'	=&gt; $sField,
	'id'	=&gt; $iId,
));
}}}

If you don't specify names, the array indexes will be used by default. Array indexes starts at 0.
The example then becomes this:
{{{
weeApp()-&gt;db-&gt;query(
	'SELECT * FROM example_table WHERE example_name=:0 AND example_id=:1 LIMIT 1',
	array($sField, $iId)
);
}}}

All data passed to it not required by the query will be ignored. You can thus pass a bigger array
that contains what you need (like a POST array) and everything will be binded automatically and
escaped as needed. Thus, you can choose the simplest method for writing your queries depending on
what form your data is.</comment></method><method name="queryValue" filename="wee/db/weeDatabase.class.php" startline="337" endline="352" visibility="public"><params numrequired="1"><param name="mQueryString" null="null" type="mixed">The query string</param></params><overloads><overload func="query($mQueryString, $mArg1, $mArg2, ...">Example of query call with multiple unnamed parameters</overload><overload func="query($mQueryString, $aNamedParameters">Example of query call with named parameters</overload></overloads><sees><see>query($mQueryString)</see></sees><comment>Build and execute an SQL value query.

This method is a shortcut to the following idiom:
{{{
$a = $this-&gt;query('SELECT count(*) FROM example_table')-&gt;fetch();
return array_shift($a);
}}}

An UnexpectedValueException will be thrown if the query did not return exactly one row or if the row does
not contain exactly one column.</comment></method></methods><properties><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows by the last query.</comment></property><property name="oDb" visibility="protected"><comment>The database object.</comment></property><property name="oMeta" visibility="protected"><comment>The meta object associated with the database</comment></property><property name="sDBMS" visibility="protected"><comment>The name of the underlying DBMS (sqlite2).</comment></property></properties><comment>SQLite 2 database driver.</comment></class><class name="weeSQLiteDbMeta" module="wee/db/meta/sqlite" filename="wee/db/meta/sqlite/weeSQLiteDbMeta.class.php" startline="28" endline="95" parent="weeDbMeta"><implements><implement>weeDbMetaTableProvider</implement></implements><methods><method name="__construct" filename="wee/db/meta/weeDbMeta.class.php" startline="52" endline="59" visibility="public"><params numrequired="1"><param name="oDb" type="object" hint="weeDatabase">The database to query.</param></params><throws><throw>InvalidArgumentException	The underlying DBMS of the given database is not handled by the class.</throw></throws><comment>Initializes a new database meta.</comment></method><method name="db" filename="wee/db/meta/weeDbMeta.class.php" startline="67" endline="70" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="getTableClass" startline="42" endline="45" visibility="public"><return type="string">The name of the table class.</return><comment>Returns the name of the table class.</comment></method><method name="queryTables" startline="87" endline="94" visibility="protected"><return type="weeDatabaseResult">The data of all the tables of the database.</return><comment>Queries all the tables of the database.</comment></method><method name="table" startline="55" endline="63" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="weeSQLiteDbMetaTable">The table.</return><throws><throw>UnexpectedValueException	The table does not exist.</throw></throws><comment>Returns a table of a given name in the database.</comment></method><method name="tableExists" startline="72" endline="79" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">true if the table exists in the database, false otherwise.</return><comment>Returns whether a table of a given name exists in the database.</comment></method><method name="tables" filename="wee/db/meta/weeDbMeta.class.php" startline="86" endline="93" visibility="public"><return type="array(weeDbMetaTable)">The array of tables.</return><comment>Returns all the tables of the database.</comment></method><method name="tablesNames" filename="wee/db/meta/weeDbMeta.class.php" startline="101" endline="108" visibility="public"><return type="array(string)">The names of all the tables.</return><comment>Returns the names of all the tables in the database.</comment></method></methods><properties><property name="mDBMS" visibility="protected"><comment>The DBMS handled by this class (sqlite and sqlite2).</comment></property><property name="oDb" visibility="protected"><comment>The database to query.</comment></property></properties><comment>SQLite driver of the weeDbMeta class.</comment></class><class name="weeSQLiteDbMetaColumn" module="wee/db/meta/sqlite" filename="wee/db/meta/sqlite/weeSQLiteDbMetaColumn.class.php" startline="28" endline="98" parent="weeDbMetaColumn"><methods><method name="__construct" startline="41" endline="44" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeSQLiteDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param><param name="oTable" type="object" hint="weeSQLiteDbMetaTable">The table of the column.</param></params><comment>Initialises a new sqlite column object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeSQLiteDbMetaTable.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="defaultValue" startline="53" endline="59" visibility="public"><return type="string">The default value of the column.</return><throws><throw>IllegalStateException	The column does not have a default value.</throw></throws><comment>Returns the default value of the column.</comment></method><method name="doGetValidator" startline="70" endline="75" visibility="protected"><return type="weeValidator">A validator appropriate for the column or null.</return><sees><see>http://sqlite.org/datatypes.html</see></sees><comment>Does the sqlite-dependent logic of getValidator.

The only handled type is INTEGER PRIMARY KEY.</comment></method><method name="getValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="63" endline="69" visibility="public"><return type="weeValidator">A validator appropriate for the column.</return><throws><throw>UnhandledTypeException	The type of the column is not handled by DbMeta.</throw></throws><comment>Returns a validator for the column.</comment></method><method name="hasDefault" startline="83" endline="86" visibility="public"><return type="bool">Whether the column has a default value.</return><comment>Returns whether the column has a default value.</comment></method><method name="hasValidator" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="85" endline="90" visibility="public"><return type="bool">Whether the column has a validator.</return><comment>Returns whether the column has a validator.</comment></method><method name="isNullable" startline="94" endline="97" visibility="public"><return type="bool">Whether the column can contain null values.</return><comment>Returns whether the column can contain null values.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="num" filename="wee/db/meta/weeDbMetaColumn.class.php" startline="106" endline="109" visibility="public"><return type="int">The number of the column in the table.</return><comment>Returns the number of the column in the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property><property name="oValidator" visibility="protected"><comment>The validator of the column.

Lazily set by hasValidator.</comment></property></properties><comment>SQLite specialisation of weeDbMetaColumn.</comment></class><class name="weeSQLiteDbMetaForeignKey" module="wee/db/meta/sqlite" filename="wee/db/meta/sqlite/weeSQLiteDbMetaForeignKey.class.php" startline="31" endline="70" parent="weeDbMetaForeignKey"><methods><method name="__construct" startline="44" endline="47" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeSQLiteDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param><param name="oTable" type="object" hint="weeSQLiteDbMetaTable">The table of the foreign key.</param></params><comment>Initialises a new sqlite foreign key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeSQLiteDbMetaTable.</comment></method><method name="columnsNames" startline="55" endline="58" visibility="public"><return type="array(string)">The names of the columns of the foreign key.</return><comment>Returns the columns of the foreign key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="referencedColumnsNames" startline="66" endline="69" visibility="public"><return type="array(string)">The names of the referenced columns of the foreign key.</return><comment>Returns the referenced columns of the foreign key.</comment></method><method name="referencedTableName" filename="wee/db/meta/weeDbMetaForeignKey.class.php" startline="52" endline="55" visibility="public"><return type="string">The name of the referenced table of the foreign key.</return><comment>Returns the name of the referenced table of the foreign key.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>SQLite specialisation of weeDbMetaForeignKey.

In SQLite, foreign keys are named by their order of appearance in
the SQL definition of the table.</comment></class><class name="weeSQLiteDbMetaPrimaryKey" module="wee/db/meta/sqlite" filename="wee/db/meta/sqlite/weeSQLiteDbMetaPrimaryKey.class.php" startline="31" endline="70" parent="weeDbMetaPrimaryKey"><methods><method name="__construct" startline="44" endline="47" visibility="public"><params numrequired="3"><param name="oMeta" type="object" hint="weeSQLiteDbMeta">The dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param><param name="oTable" type="object" hint="weeSQLiteDbMetaTable">The table of the primary key.</param></params><comment>Initialises a new sqlite primary key object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeSQLiteDbMetaTable.</comment></method><method name="columnsNames" startline="55" endline="58" visibility="public"><return type="array(string)">The names of the columns of the primary key.</return><comment>Returns the names of the columns of the primary key.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" startline="66" endline="69" visibility="public"><return type="null">Primary keys in SQLite do not have a name.</return><comment>Returns the name of the primary key.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method><method name="table" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="59" endline="62" visibility="public"><return type="weeDbMetaTable">The table of the object.</return><comment>Returns the table of the object.</comment></method><method name="tableName" filename="wee/db/meta/weeDbMetaTableObject.class.php" startline="70" endline="73" visibility="public"><return type="string">The name of the table of the object.</return><comment>Returns the name of the table of the object.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="oTable" visibility="protected"><comment>The table of the object.</comment></property></properties><comment>SQLite specialisation of weeDbMetaPrimaryKey.

In SQLite, primary keys do not have a name so the name method
always returns null.</comment></class><class name="weeSQLiteDbMetaTable" module="wee/db/meta/sqlite" filename="wee/db/meta/sqlite/weeSQLiteDbMetaTable.class.php" startline="28" endline="304" parent="weeDbMetaTable"><implements><implement>weeDbMetaForeignKeyProvider</implement></implements><methods><method name="__construct" startline="70" endline="73" visibility="public"><params numrequired="2"><param name="oMeta" type="object" hint="weeSQLiteDbMeta">The sqlite dbmeta object.</param><param name="aData" type="array" hint="array">The object data.</param></params><comment>Initialises a new sqlite table object.

This class should NEVER be instantiated manually.
Instances of this class should be returned by weeSQLiteDbMeta.</comment></method><method name="column" startline="83" endline="90" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="weeSQLiteDbMetaColumn">The column.</return><throws><throw>UnexpectedValueException	The column does not exist.</throw></throws><comment>Returns a column of the table.</comment></method><method name="columnExists" startline="99" endline="103" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The column name.</param></params><return type="bool">Whether the column exists in the table.</return><comment>Returns whether a given column exists in the table.</comment></method><method name="columns" filename="wee/db/meta/weeDbMetaTable.class.php" startline="70" endline="77" visibility="public"><return type="array(weeDbMetaColumn)">The array of columns.</return><comment>Returns all the columns of the table.</comment></method><method name="columnsNames" filename="wee/db/meta/weeDbMetaTable.class.php" startline="85" endline="92" visibility="public"><return type="array(string)">The names of all the columns.</return><comment>Returns the names of all the columns of the table.</comment></method><method name="db" filename="wee/db/meta/weeDbMetaObject.class.php" startline="65" endline="68" visibility="public"><return type="weeDatabase">The associated database object.</return><comment>Returns the associated database object.</comment></method><method name="foreignKey" startline="113" endline="120" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the foreign key.</param></params><return type="weeSQLiteDbMetaPrimaryKey">The foreign key.</return><throws><throw>UnexpectedValueException	The foreign key does not exist.</throw></throws><comment>Returns a foreign key of a given name.</comment></method><method name="foreignKeyExists" startline="129" endline="133" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the table.</param></params><return type="bool">Whether the foreign key exists.</return><comment>Returns whether a foreign key of a given name exists.</comment></method><method name="foreignKeys" startline="141" endline="148" visibility="public"><return type="array(weeSQLiteDbMetaPrimaryKey)">The array of foreign keys.</return><comment>Returns all the foreign keys.</comment></method><method name="getColumnClass" startline="156" endline="159" visibility="public"><return type="string">The name of the column class.</return><comment>Returns the name of the column class.</comment></method><method name="getForeignKeyClass" startline="167" endline="170" visibility="public"><return type="string">The name of the foreign key class.</return><comment>Returns the name of the foreign key class.</comment></method><method name="getPrimaryKeyClass" startline="178" endline="181" visibility="public"><return type="string">The name of the primary key class.</return><comment>Returns the name of the primary key class.</comment></method><method name="hasPrimaryKey" startline="189" endline="193" visibility="public"><return type="bool">Whether the table has a primary key.</return><comment>Returns whether the table has a primary key.</comment></method><method name="instantiateObject" filename="wee/db/meta/weeDbMetaTable.class.php" startline="111" endline="118" visibility="protected"><params numrequired="2"><param name="sClass" null="null" type="string">The class of the table object.</param><param name="aData" type="array" hint="array">The table object data.</param></params><return type="weeDbMetaTableObject">The table object.</return><throws><throw>InvalidArgumentException	The class is not a subclass of weeDbMetaTableObject.</throw></throws><comment>Instantiates a new table object.</comment></method><method name="meta" filename="wee/db/meta/weeDbMetaObject.class.php" startline="76" endline="79" visibility="public"><return type="weeDbMeta">The dbmeta object.</return><comment>Returns the dbmeta object of this database object.</comment></method><method name="name" filename="wee/db/meta/weeDbMetaObject.class.php" startline="87" endline="90" visibility="public"><return type="string">The name of the database object.</return><comment>Returns the name of the database object.</comment></method><method name="primaryKey" startline="202" endline="212" visibility="public"><return type="weeSQLiteDbMetaPrimaryKey">The primary key of the table.</return><throws><throw>IllegalStateException		The table does not have a primary key.</throw></throws><comment>Returns the primary key of the table.</comment></method><method name="primaryKeyColumnsNames" startline="227" endline="234" visibility="public"><return type="array(string)">The names of the columns of the primary key of the table.</return><throws><throw>IllegalStateException	The table does not have a primary key.</throw></throws><comment>Returns the names of the columns of the primary key of the table.

As the columns taking part in the primary key are known by the table instance,
we provide a shortcut method to access these informations without
creating a new weeSQLiteDbMetaPrimaryKey instance. This shortcut is used
by the weeSQLiteDbMetaColumn::getValidator to check if the column is
&quot;INTEGER PRIMARY KEY&quot;.</comment></method><method name="queryColumns" startline="278" endline="303" visibility="protected"><return type="array">The data of all the columns of the table.</return><comment>Queries all the columns of the table.</comment></method><method name="queryForeignKeys" startline="242" endline="270" visibility="protected"><return type="array">The data of all the foreign keys of the table.</return><comment>Queries all the foreign keys of the table.</comment></method><method name="quotedName" filename="wee/db/meta/weeDbMetaObject.class.php" startline="98" endline="101" visibility="public"><return type="string">The quoted name.</return><comment>Returns the quoted name of the database object.</comment></method></methods><properties><property name="aColumns" visibility="protected"><comment>The columns of the table.

The only way to get the list of the columns of an SQLite
table is through the PRAGMA table_info command, we
cannot get informations about individual columns.</comment></property><property name="aData" visibility="protected"><comment>The database object data.</comment></property><property name="aForeignKeys" visibility="protected"><comment>The foreign keys of the table.

The only way to get the list of the foreign keys of an SQLite
table is through the PRAGMA foreign_key_list command, we
cannot get informations about individual foreign keys.</comment></property><property name="aPrimaryKey" visibility="protected"><comment>The columns of the primary key.

The primary key is fetched from the database when
fetching the list of the columns of the table.</comment></property></properties><comment>SQLite specialisation of weeDbMetaTable.</comment></class><class name="weeSQLiteResult" module="wee/db/sqlite" filename="wee/db/sqlite/weeSQLiteResult.class.php" startline="31" endline="103" parent="weeDatabaseResult"><implements><implement>Countable</implement><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="__clone" filename="wee/db/weeDatabaseResult.class.php" startline="56" endline="58" type="final" visibility="private"><comment>Database result sets cannot be cloned.</comment></method><method name="__construct" startline="45" endline="48" visibility="public"><params numrequired="1"><param name="oResult" type="object" hint="SQLiteResult">The sqlite result object.</param></params><comment>Initialises a new sqlite result set.</comment></method><method name="count" startline="56" endline="59" visibility="public"><return type="int">The number of results.</return><comment>Return the number of results returned by the query.</comment></method><method name="current" filename="wee/db/weeDatabaseResult.class.php" startline="67" endline="75" visibility="public"><return type="mixed">Either an array or an instance of weeDatabaseRow or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the current row.</comment></method><method name="doFetch" startline="67" endline="70" visibility="protected"><return type="mixed">An array containing the data of the next row or false if there is no current row.</return><comment>Fetches the data of the next row of the result set.</comment></method><method name="doRewind" startline="76" endline="79" visibility="protected"><comment>Rewinds the result set to its first row.</comment></method><method name="encodeData" filename="wee/weeDataSource.class.php" startline="45" endline="49" visibility="public"><return type="$this"/><comment>Tells the object to automatically encode the data before returning it.</comment></method><method name="fetch" filename="wee/db/weeDatabaseResult.class.php" startline="104" endline="110" visibility="public"><return type="mixed">An array or an instance of weeDatabaseRow.</return><throws><throw>DatabaseException	The result set does not contain exactly one row.</throw></throws><comment>Fetches the next row.

Used to fetch the only row of the result set.
If the result set is empty or contain more than one row.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.</comment></method><method name="fetchAll" startline="93" endline="102" visibility="public"><return type="array(mixed)">An array of arrays or instances of weeDatabaseRow.</return><comment>Fetches all the rows of the result set.

The return value type can differ depending on the row class.
The row class can be changed using the rowClass method.

This method should not be used when iterating over the rows of the result set
through the Iterator interface.</comment></method><method name="key" filename="wee/db/weeDatabaseResult.class.php" startline="136" endline="139" visibility="public"><return type="mixed">The key of the current row or false if there is no current row.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns the key of the current row.</comment></method><method name="next" filename="wee/db/weeDatabaseResult.class.php" startline="147" endline="151" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next row.</comment></method><method name="processRow" filename="wee/db/weeDatabaseResult.class.php" startline="173" endline="187" visibility="protected"><params numrequired="1"><param name="aRow" null="null" type="array">The data row.</param></params><return type="array">The data row encoded, if applicable.</return><comment>Encodes the row if needed.</comment></method><method name="rewind" filename="wee/db/weeDatabaseResult.class.php" startline="159" endline="164" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewinds the Iterator to the first row.</comment></method><method name="rowClass" filename="wee/db/weeDatabaseResult.class.php" startline="205" endline="211" visibility="public"><params numrequired="1"><param name="sClass" null="null" type="string">The class used to return row's data.</param></params><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The given class does not exist.</throw></throws><comment>Changes the type of the return for fetch and fetchAll methods and the
Iterator interface.

By default they return an array containing the row values,
but a child class of weeDatabaseRow can be specified that will be used
to create objects containing the row values.

This can be used after a query if you want to abstract your result in
an object and add methods for easy manipulation of this result.</comment></method><method name="valid" filename="wee/db/weeDatabaseResult.class.php" startline="219" endline="225" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Returns whether there is a current row after calls to rewind() or next().</comment></method></methods><properties><property name="bMustEncodeData" visibility="protected"><comment>Whether to automatically encode the data before returning it.</comment></property><property name="iCurrentIndex" visibility="protected"><comment>The index of the current fetched row.</comment></property><property name="mCurrentFetch" visibility="protected"><comment>The current fetched row.</comment></property><property name="oResult" visibility="protected"><comment>The sqlite result object.</comment></property><property name="sRowClass" visibility="protected"><comment>The class used to return row's data.
If empty, an array will be returned.</comment></property></properties><comment>Class for SQLite query results handling.

Instances of this class are returned by weeSQLiteDatabase's query method and
should not be instantiated manually.</comment></class><class name="weeSQLiteStatement" module="wee/db/sqlite" filename="wee/db/sqlite/weeSQLiteStatement.class.php" startline="31" endline="99" parent="weeDatabaseDummyStatement"><methods><method name="__clone" filename="wee/db/weeDatabaseStatement.class.php" startline="37" endline="39" type="final" visibility="private"><comment>Prepared statements cannot be cloned.</comment></method><method name="__construct" startline="52" endline="56" visibility="public"><params numrequired="3"><param name="oDb" type="object" hint="weeSQLiteDatabase">The database to use.</param><param name="sQuery" null="null" type="string">The query.</param><param name="oSQLiteDb" type="object" hint="SQLiteDatabase"/></params><comment>Initialises a new sqlite dummy prepared statement with a given query.</comment></method><method name="bind" filename="wee/db/weeDatabaseStatement.class.php" startline="67" endline="82" visibility="public"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind to the statement.</param></params><overloads><overload func="bind($sName, $mValue">Example of query call with one argument instead of an array.</overload></overloads><return type="$this">Used to chain methods.</return><throws><throw>InvalidArgumentException	The bind method has been called with one argument but it's not an array.</throw><throw>InvalidArgumentException	The bind method has been called with two arguments but its first is not a string.</throw><throw>BadMethodCallException		The bind method has been called with more than 2 arguments.</throw></throws><comment>Binds parameters to the statement.

If the query is not using interrogation marks placeholders,
you can call this method with a parameter name and its value.</comment></method><method name="doBind" filename="wee/db/weeDatabaseDummyStatement.class.php" startline="108" endline="111" visibility="protected"><params numrequired="1"><param name="aParameters" null="null" type="array">The parameters to bind.</param></params><comment>Does the database-dependent work to bind the parameters to the statement.</comment></method><method name="doQuery" startline="65" endline="80" visibility="protected"><params numrequired="1"><param name="sQuery" null="null" type="string">The query to execute.</param></params><return type="weeSQLiteResult">A result set for SELECT queries.</return><comment>Does the sqlite-dependent work of the execute method.</comment></method><method name="execute" filename="wee/db/weeDatabaseDummyStatement.class.php" startline="128" endline="141" visibility="public"><return type="mixed">An instance of weeDatabaseResult if the query returned rows or null.</return><comment>Executes the prepared statement.</comment></method><method name="numAffectedRows" startline="95" endline="98" visibility="public"><return type="int">The number of affected rows in the last query.</return><comment>Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.

You can't use this method safely to check if your UPDATE executed successfully,
since the UPDATE statement does not always update rows that are already up-to-date.

Please note that SQLite always return 0 for an unconditional DELETE statement (e.g.
DELETE FROM tablename), if you need the number of deleted rows, you should execute
DELETE FROM tablename WHERE 1.</comment></method></methods><properties><property name="aExtraParts" visibility="protected"><comment>The extra parts of the query.</comment></property><property name="aParameters" visibility="protected"><comment>The parameters to bind to the prepared statement.</comment></property><property name="aParametersMap" visibility="protected"><comment>The parameters map.

This array maps query parts indexes to parameters names.</comment></property><property name="iExtraPartsCount" visibility="protected"><comment>The number of extra parts.</comment></property><property name="iNumAffectedRows" visibility="protected"><comment>The number of affected rows by the last execution of the statement.</comment></property><property name="oDb" visibility="protected"><comment>The database object.</comment></property><property name="oSQLiteDb" visibility="protected"><comment>The SQLite database.</comment></property><property name="sFirstPart" visibility="protected"><comment>The first part of the query.</comment></property></properties><comment>A dummy prepared statement object for the sqlite driver.

Instances of this class are returned by weeSQLiteDatabase's prepare method and
should not be instantiated manually.</comment></class><class name="weeStringValidator" module="wee/validators" filename="wee/validators/weeStringValidator.class.php" startline="38" endline="165" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="63" endline="89" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><throws><throw>DomainException				The `len` argument is invalid.</throw><throw>DomainException				The `min` argument is invalid.</throw><throw>DomainException				The `max` argument is invalid.</throw><throw>InvalidArgumentException	The `min` and `max` arguments do not form a valid length range.</throw><throw>InvalidArgumentException	The `len` and one of the `min` or `max` arguments are both specified.</throw></throws><comment>Initialises a string validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="98" endline="101" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed"/></params><return type="bool">Whether the given input is a valid string or of a compatible type.</return><comment>Returns whether if the given input is a valid string or of a compatible type.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="127" endline="142" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an integer, a float, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="111" endline="115" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="148" endline="164" visibility="protected"><comment>Validates a string.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A string validator.

This validator accepts the following arguments:
 * invalid_error:	The error message used if the input is not of a string compatible type.
 * len:				The length that the string must have.
 * len_error:		The error message used if the string has a length not equal to the `len` argument.
 * max:				The maximal length that the string must have.
 * max_error:		The error message used if the string has a length greater than the `max` argument.
 * min:				The minimal length that the string must have.
 * min_error:		The error message used if the string has a length smaller than the `min` argument.
 * nul_error:		The error message used if the string contains null characters.</comment></class><class name="weeTaconite" module="wee/app" filename="wee/app/weeTaconite.class.php" startline="31" endline="335"><implements><implement>Printable</implement></implements><sees><see>http://www.malsup.com/jquery/taconite/</see></sees><warnings><warning>Incomplete.</warning></warnings><methods><method name="add" startline="45" endline="51" visibility="public"><params numrequired="1"><param name="mTaconite" null="null" type="mixed">The taconite string or object to append.</param></params><comment>Append a taconite string to this object.</comment></method><method name="addTag" startline="62" endline="77" visibility="public"><params numrequired="2"><param name="sTagName" null="null" type="string">The tag name.</param><param name="sSelect" null="null" type="string">The selector.</param><param name="sContents" null="null" default="NULL" type="string">The content of the tag.</param></params><return type="$this">For chained methods.</return><comment>Add a tag to the taconite document.</comment></method><method name="applyTagAfter" startline="86" endline="104" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform an &quot;after&quot; operation.</comment></method><method name="applyTagAppend" startline="113" endline="120" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform an &quot;append&quot; operation.</comment></method><method name="applyTagBefore" startline="129" endline="136" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform a &quot;before&quot; operation.</comment></method><method name="applyTagPrepend" startline="145" endline="163" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform a &quot;prepend&quot; operation.</comment></method><method name="applyTagRemove" startline="172" endline="175" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform a &quot;remove&quot; operation.</comment></method><method name="applyTagReplace" startline="184" endline="188" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform a &quot;replace&quot; operation.</comment></method><method name="applyTagReplaceContent" startline="197" endline="202" visibility="protected"><params numrequired="2"><param name="oAction" type="object" hint="DOMNode">The taconite action.</param><param name="oElement" type="object" hint="DOMNode">The document element.</param></params><comment>Perform a &quot;replaceContent&quot; operation.</comment></method><method name="applyTo" startline="219" endline="278" visibility="public"><params numrequired="1"><param name="sXMLDocument" null="null" type="string">The XML document.</param></params><return type="string">The modified XML document.</return><throws><throw>BadXMLException	The given string is not a well-formed XML document.</throw><throw>BadXMLException	The string returned by weeTaconite::toString is not a well-formed XML document.</throw></throws><comment>Apply taconite operations against an XML document.

Note:	Only works with id attributes, XPath and XML tags!
		So if compatibility with non-ajax browsers is required,
		you should only use these!
		Your XML document has to be validated against a doctype
		to be able to use id attributes.</comment></method><method name="getTags" startline="286" endline="289" visibility="public"><return type="The">taconite string.</return><comment>Return the taconite string (excluding the &lt;taconite/&gt;s tags).</comment></method><method name="render" startline="296" endline="303" visibility="public"><comment>Output the taconite as text/xml.
This function sends the required header automatically.</comment></method><method name="select" startline="314" endline="323" visibility="protected"><params numrequired="3"><param name="sSelect" null="null" type="string">The selector.</param><param name="oDocument" type="object" hint="DOMDocument">The XML document.</param><param name="oXPath" type="object" hint="DOMXPath">The XPATH object for this document.</param></params><return type="DOMNodeList">The selected elements.</return><comment>Select elements in the XML document.</comment></method><method name="toString" startline="331" endline="334" visibility="public"><return type="string">The XML taconite string.</return><comment>Return the XML taconite string.</comment></method></methods><properties><property name="sXML" visibility="protected"><comment>The XML taconite document.</comment></property></properties><comment>Performs operation on an XML document</comment></class><class name="weeTemplate" module="wee/output" filename="wee/output/weeTemplate.class.php" startline="32" endline="194"><implements><implement>Printable</implement></implements><methods><method name="__construct" startline="59" endline="66" visibility="public"><params numrequired="1"><param name="sTemplate" null="null" type="string">The template name.</param><param name="aData" default="array()" type="array" hint="array">Data to be used in the template.</param></params><comment>Configure the filename and the data for this template.</comment></method><method name="addLinkArgs" startline="75" endline="78" visibility="public"><params numrequired="1"><param name="aArgs" null="null" type="array">Parameters to be added.</param></params><comment>Add new values to the parameters to be added to links created
using the method mkLink.</comment></method><method name="flush" startline="91" endline="96" visibility="protected"><sees><see>http://php.net/flush For more information about possible flush problems.</see></sees><comment>Flush the output buffer.

This effectively tries to push all the output so far to the browser.
All output will be sent, even buffered output.

Sometimes the buffer can't be sent directly to the browser, because
of the presence of certain modules or because of an old web server version.</comment></method><method name="mkLink" startline="107" endline="133" visibility="protected"><params numrequired="1"><param name="sLink" null="null" type="string">Base URL, in its non-encoded form.</param><param name="aArgs" null="null" default="array()" type="array">Parameters to be added.</param></params><return type="string">Link newly created with the given parameters added.</return><comment>Create a link using a base url (which may or may not contain parameters)
and the values predefined previously and/or given by the $aArgs arguments.</comment></method><method name="render" startline="139" endline="143" visibility="public"><comment>Output the template.</comment></method><method name="set" startline="157" endline="165" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template.</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable.</param></params><return type="$this"/><comment>Adds a value to the data array.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="template" startline="175" endline="180" visibility="protected"><params numrequired="1"><param name="sTemplate" null="null" type="string">The template name.</param><param name="aData" default="array()" type="array" hint="array">Data to be used in the template.</param></params><comment>Output another template.
Use this to embed a template inside another.</comment></method><method name="toString" startline="188" endline="193" visibility="public"><return type="string">The template.</return><comment>Returns the template as a string.</comment></method></methods><properties><property name="aData" visibility="protected"><comment>Data to be used in the template.</comment></property><property name="aLinkArgs" visibility="protected"><comment>Array containing predefined values to be added to the link parameters.</comment></property><property name="sFilename" visibility="protected"><comment>Filename of the template, including path and extension.</comment></property></properties><comment>Base class for template handling.
Load, configure and display templates.</comment></class><class name="weeTestSuite" module="wee/tests" filename="wee/tests/weeTestSuite.class.php" startline="37" endline="366"><implements><implement>Mappable</implement><implement>Printable</implement></implements><methods><method name="__construct" startline="64" endline="94" visibility="public"><params numrequired="1"><param name="sTestsPath" null="null" type="string">Path to the unit test cases.</param></params><comment>Initialize the test suite.</comment></method><method name="addResult" startline="106" endline="145" visibility="protected"><params numrequired="2"><param name="sFile" null="null" type="string">The filename of the unit test case.</param><param name="mResult" null="null" type="mixed">The result of the unit test case.</param></params><throws><throw>DomainException	$mResult is not a valid result.</throw></throws><comment>Add a result to the result array.

Results must be either &quot;success&quot; or &quot;skip&quot; or an Exception.</comment></method><method name="analyzeCodeCoverage" startline="153" endline="179" visibility="protected"><return type="array">The covered code.</return><comment>Return an analyze of the collected information for code coverage.</comment></method><method name="printCodeCoverage" startline="187" endline="230" visibility="protected"><params numrequired="0"><param name="aCoveredCode" null="null" default="array()" type="array">The code coverage information returned by weeTestSuite::analyzeCodeCoverage.</param></params><comment>Display information about covered code, non-covered code and dead code.</comment></method><method name="printFileCoverage" startline="244" endline="272" visibility="protected"><params numrequired="2"><param name="aLines" null="null" type="array">List of lines with the coverage information associated (covered line, non-covered line or dead line).</param><param name="iDebugOption" null="null" type="int">The option indicates the kind of information to display.</param></params><comment>Display information about which lines were executed or not.

The values for $iDebugOption are:
	*  1: Covered code.
	* -1: Uncovered code.
	* -2: Dead code.</comment></method><method name="run" startline="278" endline="295" visibility="public"><comment>Run the test suite.</comment></method><method name="toArray" startline="304" endline="307" visibility="public"><return type="array">Results array for all the unit test cases.</return><comment>Return the results array of the unit test suite.
It is always available, even when tests have not been run yet.</comment></method><method name="toString" startline="315" endline="365" visibility="public"><return type="string">A report of the unit test suite after its completion.</return><comment>Return the results of the unit test suite.</comment></method></methods><properties><property name="aExtData" visibility="protected"><comment>Extended data generated by the unit test suite.</comment></property><property name="aResults" visibility="protected"><comment>Array containing the results of the unit test suite, after its completion.</comment></property><property name="mLastResult" visibility="protected"><comment>The result of the last test ran.
Used to produce a more readable output by separating tests with different results.</comment></property></properties><comment>Automated CLI unit testing and code coverage analysis tool.

This unit testing tool is designed for use with the Web:Extend's framework only.
It is meant to be very light and embedded with the framework's distribution to
allow anyone to check if it will work correctly on their platform using a simple
&quot;make test&quot;. It is not meant to be used to test applications. There are much
better tools for this purpose, like PHPUnit, available at http://phpunit.de

Unit test cases that return false value will be ignored.
Return false if you need additional files that are not unit test cases.</comment></class><class name="weeTextOutput" module="wee/output" filename="wee/output/weeTextOutput.class.php" startline="28" endline="63" parent="weeOutput"><methods><method name="__construct" filename="wee/output/weeOutput.class.php" startline="41" endline="48" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><comment>Initialize the output driver. Start output buffering if requested.</comment></method><method name="bufferize" filename="wee/output/weeOutput.class.php" startline="56" endline="70" visibility="public"><params numrequired="0"><param name="bCompressOutput" null="null" default="true" type="bool">Whether to compress the output before sending it to the browser (if available).</param></params><comment>Bufferize the output. Enable GZIP compression on demand if available.</comment></method><method name="decode" startline="40" endline="46" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to decode.</param></params><return type="string">The decoded value.</return><throws><throw>InvalidArgumentException	$mValue contain a NUL character.</throw></throws><comment>Decode a given value.

In this output driver, the method always return its argument.</comment></method><method name="encode" startline="59" endline="62" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">Data to encode.</param></params><return type="string">Data encoded.</return><comment>Encode data to be displayed.

Text does not need to be encoded for text output.
However the value given will be stripped of all its
NUL characters, to prevent attacks based on it.</comment></method><method name="encodeArray" filename="wee/output/weeOutput.class.php" startline="100" endline="114" visibility="public"><params numrequired="1"><param name="a" null="null" type="array">Data array to encode.</param></params><return type="array">Data array encoded.</return><comment>Encode an array of data to be displayed.

Mainly used by weeTemplate to encode the data it received.
You should not have to use this method.</comment></method><method name="instance" filename="wee/output/weeOutput.class.php" startline="123" endline="130" type="static" visibility="public"><return type="weeOutput">The selected output instance.</return><comment>Return the currently selected instance.
Throw an exception if no instances are selected.</comment></method><method name="select" filename="wee/output/weeOutput.class.php" startline="139" endline="144" type="static" visibility="public"><params numrequired="1"><param name="oOutput" type="object" hint="weeOutput">New driver to be used.</param></params><return type="weeOutput">The driver being replaced.</return><comment>Select a new output driver and return the previous one.</comment></method></methods><properties><property name="oInstance" visibility="protected" static="static"><comment>Instance of the current output driver.
There can only be one at the same time.</comment></property></properties><comment>Text output driver.</comment></class><class name="weeTimeValidator" module="wee/validators" filename="wee/validators/weeTimeValidator.class.php" startline="33" endline="95" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" filename="wee/validators/weeValidator.class.php" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="50" endline="53" visibility="protected"><params numrequired="1"><param name="sInput" null="null" type="string">The input.</param></params><return type="bool">Whether the given input is a valid time.</return><comment>Returns whether a given input is a valid time.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="65" endline="80" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="90" endline="94" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" filename="wee/validators/weeValidator.class.php" startline="213" endline="217" visibility="protected"><comment>Validates the given value.

The default implementation sets the error to 'invalid' if the input is invalid
	   	accordingly to the isValidInput method.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>A time validator.

The input must be a time in format HH:mm, as in 00:00 for midnight.

This validator accepts the following parameters:
 * invalid_error: The error message used if the input is not a valid time.</comment></class><class name="weeTreeviewUI" module="wee/ui" filename="wee/ui/weeTreeviewUI.class.php" startline="28" endline="160" parent="weeUI"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="addGlobalAction" startline="70" endline="73" visibility="public"><params numrequired="1"><param name="aAction" type="array" hint="array">The global action parameters.</param></params><comment>Add a new global action.

A global action is identified by the following parameters:
	* link: URL to the action's event
	* label: Label describing the action</comment></method><method name="addItemAction" startline="85" endline="88" visibility="public"><params numrequired="1"><param name="aAction" type="array" hint="array">The item action parameters.</param></params><comment>Add a new item action.

An item action is identified by the following parameters:
	* link: URL to the action's event
	* label: Label describing the action</comment></method><method name="defaultEvent" startline="97" endline="131" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information.</param></params><comment>Send the list configuration and data to the template.
Also create a weePaginationUI object for paginating the list.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" filename="wee/ui/weeUI.class.php" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" filename="wee/ui/weeUI.class.php" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" filename="wee/ui/weeUI.class.php" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" filename="wee/ui/weeUI.class.php" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setParams" startline="145" endline="148" visibility="public"><params numrequired="1"><param name="aParams" null="null" type="array">Frame's parameters.</param></params><comment>Define the frame's parameters.

Parameters can include:
	* columns:			Columns to use for the tree. Must have three keys: label, leftid and rightid.
	* countperpage:		Number of items per page.
	* primary:			The key identifying each item uniquely. A key can be either one or more columns stored in an array.
	* total:			Total number of items.</comment></method><method name="setTemplate" filename="wee/ui/weeUI.class.php" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setTree" startline="156" endline="159" visibility="public"><params numrequired="1"><param name="aTree" null="null" type="array">The data to be listed.</param></params><comment>Set the data associated with the list.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="aGlobalActions" visibility="protected"><comment>List of global actions associated with the list.</comment></property><property name="aItemsActions" visibility="protected"><comment>List of actions associated with each items.</comment></property><property name="aParams" visibility="protected"><comment>Frame's parameters.</comment></property><property name="aTree" visibility="protected"><comment>Tree of items to display for this page.</comment></property><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Configurable treeview.</comment></class><class name="weeUI" module="wee/ui" filename="wee/ui/weeUI.class.php" startline="28" endline="106" parent="weeFrame"><consts><const name="EVENT_DISPATCHED" value="1"/><const name="UNAUTHORIZED_ACCESS" value="2"/></consts><implements><implement>weeFailSafeRouting</implement></implements><methods><method name="__construct" filename="wee/app/weeFrame.class.php" startline="98" endline="104" visibility="public"><params numrequired="0"><param name="oController" null="null" default="NULL" type="object">Controller associated with this frame, defaults to weeApp()</param></params><comment>Create the frame and set the controller associated with it.
The controller is used to dispatch events. It is usually a weeApplication object.</comment></method><method name="dispatchEvent" filename="wee/app/weeFrame.class.php" startline="113" endline="135" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Map an event to the respective method of this class.</comment></method><method name="getStatus" filename="wee/app/weeFrame.class.php" startline="145" endline="148" visibility="public"><return type="integer">The status of the frame.</return><sees><see>EVENT_DISPATCHED</see><see>UNAUTHORIZED_ACCESS</see></sees><comment>Return the status of the frame.</comment></method><method name="getTaconite" startline="54" endline="57" visibility="public"><comment>Return the taconite object for this frame.</comment></method><method name="loadTemplate" filename="wee/app/weeFrame.class.php" startline="157" endline="167" visibility="protected"><params numrequired="0"><param name="sTemplate" null="null" default="NULL" type="string">Name of the template to load, overriding the property $sBaseTemplate if not null.</param><param name="sTemplatePrefix" null="null" default="NULL" type="string">Prefix to the template, overriding the property $sBaseTemplatePrefix if not null.</param></params><comment>Load a template for this frame.</comment></method><method name="noTaconite" startline="63" endline="66" visibility="public"><comment>Tells this frame to not use taconite.</comment></method><method name="render" startline="72" endline="82" visibility="public"><comment>Output the template, or the taconite object if it was used.</comment></method><method name="sendEvent" filename="wee/app/weeFrame.class.php" startline="200" endline="215" visibility="public"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><sees><see>weeApplication::dispatchEvent for event details</see></sees><comment>Send an event to its respective frame.
If no context is given, current context is used.

If the sent event is in the same frame, the event is performed directly without sending it to the controller.</comment></method><method name="set" filename="wee/app/weeFrame.class.php" startline="229" endline="235" visibility="public"><params numrequired="1"><param name="mName" null="null" type="mixed">Name of the variable inside the template</param><param name="mValue" null="null" default="NULL" type="mixed">Value of the variable</param></params><sees><see>weeTemplate::set for details</see></sees><comment>Wrapper for weeTemplate::set method.

If first parameter is an array, the array values will be
set with their corresponding keys. If values already exist,
they will be replaced by these from this array.</comment></method><method name="setId" startline="90" endline="93" visibility="public"><params numrequired="1"><param name="sId" null="null" type="string">ID for the frame.</param></params><comment>Set the ID for the frame.</comment></method><method name="setTemplate" startline="101" endline="105" visibility="public"><params numrequired="1"><param name="sFullPathToTemplate" null="null" type="string">Full path to the template, including any prefix.</param></params><comment>Allows you to change the template this UI component will use to render itself.</comment></method><method name="setup" filename="wee/app/weeFrame.class.php" startline="244" endline="246" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Setup the frame.
This method is called before each event method call.</comment></method><method name="translateEventName" filename="wee/app/weeFrame.class.php" startline="255" endline="261" visibility="protected"><params numrequired="1"><param name="sName" null="null" type="string">The event's name.</param></params><return type="string">The method's name for this event.</return><comment>Translate the event's name into its corresponding method.</comment></method><method name="unauthorizedAccess" filename="wee/app/weeFrame.class.php" startline="270" endline="272" visibility="protected"><params numrequired="1"><param name="aEvent" null="null" type="array">Event information</param></params><comment>Method called when the user have not access to the specified frame/event.
The process will stop after this method returns.</comment></method><method name="update" filename="wee/app/weeFrame.class.php" startline="280" endline="286" visibility="public"><params numrequired="2"><param name="sMethod" null="null" type="string"/><param name="sWhere" null="null" type="string"/><param name="sWith" null="null" default="NULL" type="string"/></params><warnings><warning>Not tested yet.</warning></warnings><comment>Update the page using the specified rule.</comment></method></methods><properties><property name="bNoTaconite" visibility="protected"><comment>Whether the frame should render taconite in xmlhttprequest context.</comment></property><property name="iStatus" visibility="protected"><comment>The current status of the frame.</comment></property><property name="oController" visibility="protected"><comment>Controller which sent the event, usually weeApplication.
Also the controller used when an event is sent from this frame to another.</comment></property><property name="oTaconite" visibility="protected"><comment>Taconite object for applying transformations to the document.</comment></property><property name="oTpl" visibility="protected"><comment>Template for the frame.</comment></property><property name="sBaseTemplate" visibility="protected"><comment>Name of the template for the frame.
If not defined its value will be the name of the frame's class.</comment></property><property name="sBaseTemplatePrefix" visibility="protected"><comment>Default prefix for UI components.</comment></property><property name="sContext" visibility="protected"><comment>Context of the event.
Used to determine what we must return to the browser.</comment></property><property name="sId" visibility="protected"><comment>ID for the frame.</comment></property></properties><comment>Base UI frame.</comment></class><class name="weeUnitTestCase" module="wee/tests" filename="wee/tests/weeUnitTestCase.class.php" startline="30" endline="315"><methods><method name="__construct" startline="50" endline="53" visibility="public"><params numrequired="1"><param name="sTestFilename" null="null" type="string">Filename to the unit test file.</param></params><comment>Creates a test case based on the given filename.</comment></method><method name="addExtArray" startline="64" endline="77" visibility="protected"><params numrequired="2"><param name="sName" null="null" type="string">Name for the values to be added.</param><param name="aIteratedData" null="null" type="array">Data to iterate through.</param></params><comment>Append an array of data to the extended data array.

If more than one value is found, values' name are numbered.</comment></method><method name="addExtValue" startline="86" endline="89" visibility="protected"><params numrequired="2"><param name="sName" null="null" type="string">Name for the value to be added.</param><param name="mValue" null="null" type="mixed">Value to be added to the extended data array.</param></params><comment>Append a value to the extended data array.</comment></method><method name="fail" startline="255" endline="258" visibility="protected"><params numrequired="1"><param name="sMessage" null="null" type="string">Error message.</param></params><comment>Fails a test.</comment></method><method name="getExtData" startline="266" endline="269" visibility="public"><return type="array">The extended data generated by the unit test case.</return><comment>Returns the extended data generated by the unit test.</comment></method><method name="hasExtData" startline="278" endline="281" visibility="public"><return type="bool">Whether the test generated extended data.</return><comment>Returns whether the test generated extended data which can be used for debugging
or for printing performance or scalability information.</comment></method><method name="isEqual" startline="100" endline="104" visibility="protected"><params numrequired="3"><param name="mExpected" null="null" type="mixed">The expected value.</param><param name="mActual" null="null" type="mixed">The actual value of the test.</param><param name="sMessage" null="null" type="string">The error message used if the test fails.</param></params><throws><throw>ComparisonTestException	Thrown when the test fails.</throw></throws><comment>Checks whether the actual value of the test is equal to the expected value.</comment></method><method name="isFalse" startline="112" endline="116" visibility="protected"><params numrequired="2"><param name="mVar" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVar is false.</comment></method><method name="isIdentical" startline="127" endline="131" visibility="protected"><params numrequired="3"><param name="mExpected" null="null" type="mixed">The expected value.</param><param name="mActual" null="null" type="mixed">The actual value of the test.</param><param name="sMessage" null="null" type="string">The error message used if the test fails.</param></params><throws><throw>ComparisonTestException	Thrown when the test fails.</throw></throws><comment>Checks whether the actual value of the test is identical to the expected value.</comment></method><method name="isInstanceOf" startline="143" endline="151" visibility="protected"><params numrequired="3"><param name="oObject" null="null" type="object">The object.</param><param name="sClass" null="null" type="string">The class.</param><param name="sMessage" null="null" type="string">The error message used if the test fails.</param></params><throws><throw>DomainException			$oObject is not an object.</throw><throw>ComparisonTestException	Thrown when the test fails.</throw></throws><comment>Checks whether the given object is an instance of a given class.</comment></method><method name="isMatching" startline="159" endline="163" visibility="protected"><params numrequired="3"><param name="sPattern" null="null" type="string"/><param name="sSubject" null="null" type="string"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether pattern $sPattern is found in $sSubject.</comment></method><method name="isNotEqual" startline="171" endline="175" visibility="protected"><params numrequired="3"><param name="mVarLeft" null="null" type="mixed"/><param name="mVarRight" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVarLeft != $mVarRight.</comment></method><method name="isNotIdentical" startline="183" endline="187" visibility="protected"><params numrequired="3"><param name="mVarLeft" null="null" type="mixed"/><param name="mVarRight" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVarLeft !== $mVarRight.</comment></method><method name="isNotInstanceOf" startline="195" endline="199" visibility="protected"><params numrequired="3"><param name="oObject" null="null" type="object"/><param name="sClass" null="null" type="string"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $oObject is NOT an instance of $sClass.</comment></method><method name="isNotMatching" startline="207" endline="211" visibility="protected"><params numrequired="3"><param name="sPattern" null="null" type="string"/><param name="sSubject" null="null" type="string"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether pattern $sPattern is NOT found in $sSubject.</comment></method><method name="isNotNull" startline="219" endline="223" visibility="protected"><params numrequired="2"><param name="mVar" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVar is NOT null.</comment></method><method name="isNull" startline="231" endline="235" visibility="protected"><params numrequired="2"><param name="mVar" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVar is null.</comment></method><method name="isTrue" startline="243" endline="247" visibility="protected"><params numrequired="2"><param name="mVar" null="null" type="mixed"/><param name="sMessage" null="null" type="string">Error message if test returns false.</param></params><comment>Check whether $mVar is true.</comment></method><method name="run" startline="291" endline="305" visibility="public"><return type="bool">True if test completed, false it must be skipped.</return><comment>Runs this unit test case.

If code coverage is enabled, send the code coverage data as extended data.</comment></method><method name="skip" startline="311" endline="314" visibility="protected"><comment>Skip a test.</comment></method></methods><properties><property name="aExtData" visibility="protected"><comment>Extended data generated by the tests.</comment></property><property name="sFilename" visibility="protected"><comment>Filename of the unit test case.</comment></property></properties><comment>Unit test case.

Most of the time it is not needed to use it manually, since weeTestSuite does everything for you.</comment></class><class name="weeUploadedFile" module="wee/http" filename="wee/http/weeUploadedFile.class.php" startline="28" endline="182"><methods><method name="__construct" startline="73" endline="80" visibility="public"><params numrequired="5"><param name="sSrcName" null="null" type="string">The original name of the file on the client machine.</param><param name="sTmpName" null="null" type="string">The temporary filename of the file in which the uploaded file was stored on the server.</param><param name="sMimeType" null="null" type="string">The mime type of the file, if available.</param><param name="iSize" null="null" type="int">The size, in bytes, of the uploaded file.</param><param name="iErrorCode" null="null" type="int">The error code associated with this file upload.</param></params><comment>Initialize the file class.</comment></method><method name="fileExists" startline="91" endline="97" visibility="public"><params numrequired="1"><param name="sDestination" null="null" type="string">The path of the destination file.</param><param name="sNewFilename" null="null" default="NULL" type="string">The destination filename. If null, it is the same filename as the source file.</param></params><return type="bool">True if the file exists, false otherwise.</return><comment>Tests if given destination file exists.
Use it to check before moving a file if you won't ecrase another.</comment></method><method name="getError" startline="106" endline="124" visibility="public"><return type="string">The error message for this file error code.</return><comment>Returns the error string for this file error.
Do not call it if the file is good (isOK returns true).</comment></method><method name="getExt" startline="132" endline="138" visibility="public"><return type="string">The file's extension.</return><comment>Returns the extension of the file.</comment></method><method name="getFilename" startline="146" endline="149" visibility="public"><return type="string">The file's filename.</return><comment>Returns the filename without including the path.</comment></method><method name="isOK" startline="157" endline="160" visibility="public"><return type="bool">True if the file is OK, false otherwise.</return><comment>Tests if the file is correctly uploaded.</comment></method><method name="moveTo" startline="169" endline="181" visibility="public"><params numrequired="1"><param name="sDestination" null="null" type="string">The path of the destination file.</param><param name="sNewFilename" null="null" default="NULL" type="string">The destination filename. If null, it is the same filename as the source file.</param></params><comment>Moves the file to the specified folder, and rename it if needed.</comment></method></methods><properties><property name="iErrorCode" visibility="public"><sees><see>http://fr.php.net/manual/en/features.file-upload.errors.php</see></sees><comment>The error code specified by PHP for this file.</comment></property><property name="iSize" visibility="public"><comment>Size of the file, in bytes, as reported by PHP.</comment></property><property name="sMimeType" visibility="public"><comment>MIME type, if available.
Don't rely on it for determining the MIME type of the file.</comment></property><property name="sSrcName" visibility="public"><comment>Original filename, before it was uploaded.</comment></property><property name="sTmpName" visibility="public"><comment>Temporary filename, after it was uploaded but before being moved.</comment></property></properties><comment>Handle files uploaded using forms.</comment></class><class name="weeUploads" module="wee/http" filename="wee/http/weeUploads.class.php" startline="31" endline="255"><implements><implement>Iterator</implement><implement>Traversable</implement></implements><methods><method name="createFile" startline="65" endline="68" visibility="protected"><params numrequired="1"><param name="a" null="null" type="array">An array containing the file details.</param></params><return type="weeUploadedfile">A new file object containing the details given.</return><comment>Returns a new weeUploadedFile object based on the array given in parameter.</comment></method><method name="createFileFromChild" startline="79" endline="83" visibility="protected"><params numrequired="1"><param name="a" null="null" type="array">An array containing the file details.</param></params><return type="weeUploadedfile">A new file object containing the details given.</return><comment>Returns a new weeUploadedFile object based on the array given in parameter.
This method works on arrays of files of the same name, and returns one of the child.
Used when iterating through all the files or an array of files sharing the same name.</comment></method><method name="current" startline="91" endline="103" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the current element.</comment></method><method name="exists" startline="112" endline="120" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the file.</param></params><return type="bool">True if the file exists, false otherwise.</return><comment>Check if the given file exists.</comment></method><method name="fetch" startline="130" endline="138" visibility="public"><params numrequired="1"><param name="sName" null="null" type="string">The name of the file.</param></params><return type="weeUploadedfile">A new file object for the requested file.</return><comment>Returns the specified file.
Throws an exception if the name given points to an array of files.</comment></method><method name="filter" startline="148" endline="153" visibility="public"><params numrequired="0"><param name="sName" null="null" default="NULL" type="string">The name of the file(s).</param></params><return type="$this"/><comment>Filters through the files uploaded.
Use filter if you want to iterate only through an array of files sharing the same name.</comment></method><method name="isEmpty" startline="161" endline="164" visibility="public"><return type="bool">True if there is no uploaded files, false otherwise.</return><comment>Checks if there is no uploaded files.</comment></method><method name="key" startline="172" endline="176" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Return the key of the current element.</comment></method><method name="next" startline="184" endline="202" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Move forward to next element.</comment></method><method name="rewind" startline="210" endline="223" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Rewind the Iterator to the first element.</comment></method><method name="valid" startline="231" endline="254" visibility="public"><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceIterator.html</see></sees><comment>Check if there is a current element after calls to rewind() or next().</comment></method></methods><properties><property name="bChild" visibility="protected"><comment>True if we are inside an array of files sharing the same name, false otherwise.</comment></property><property name="bFilterValid" visibility="protected"><comment>True if the filter specified by $sFilter is valid, false otherwise.
If it is not valid, it will be ignored.</comment></property><property name="iCurrentChild" visibility="protected"><comment>Index of the child we are on, if applicable.</comment></property><property name="sFilter" visibility="protected"><comment>Name of the file to filter.</comment></property></properties><comment>A better handling of files uploaded using forms.</comment></class><class name="weeURLValidator" module="wee/validators" filename="wee/validators/weeURLValidator.class.php" startline="31" endline="93" parent="weeValidator"><implements><implement>Serializable</implement></implements><methods><method name="__construct" filename="wee/validators/weeValidator.class.php" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" filename="wee/validators/weeValidator.class.php" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" filename="wee/validators/weeValidator.class.php" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" filename="wee/validators/weeValidator.class.php" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="48" endline="51" visibility="protected"><params numrequired="1"><param name="sInput" null="null" type="string">The input.</param></params><return type="bool">Whether the input is a valid URL.</return><comment>Returns whether the given input is a valid URL.</comment></method><method name="serialize" filename="wee/validators/weeValidator.class.php" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" filename="wee/validators/weeValidator.class.php" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="63" endline="78" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><throws><throw>DomainException				$mValue is not of a correct type.</throw></throws><comment>Attachs a value to the validator.

$mValue must be either a string, an instance of Printable or an object castable to string.</comment></method><method name="test" startline="88" endline="92" type="static" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to validate.</param><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><return type="bool">Whether the variable is valid.</return><comment>Convenience function for inline validating of variables.</comment></method><method name="unserialize" filename="wee/validators/weeValidator.class.php" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" filename="wee/validators/weeValidator.class.php" startline="213" endline="217" visibility="protected"><comment>Validates the given value.

The default implementation sets the error to 'invalid' if the input is invalid
	   	accordingly to the isValidInput method.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>An URL validator.

This validator accepts the following arguments:
 * invalid_error: The error message used if the input is not a valid URL.</comment></class><class name="weeValidator" module="wee/validators" filename="wee/validators/weeValidator.class.php" startline="28" endline="218" type="abstract"><implements><implement>Serializable</implement></implements><methods><method name="__construct" startline="74" endline="77" visibility="public"><params numrequired="0"><param name="aArgs" default="array()" type="array" hint="array">The configuration arguments of the validator.</param></params><comment>Initializes a new validator.</comment></method><method name="getArgs" startline="85" endline="88" visibility="public"><return type="array">The arguments which were given to the validator.</return><comment>Returns the arguments of the validator.</comment></method><method name="getError" startline="97" endline="104" visibility="public"><return type="string">The error message.</return><throws><throw>IllegalStateException		The validator does not have an error message because the validation succeeded.</throw></throws><comment>Returns the validation error message.</comment></method><method name="hasError" startline="113" endline="125" visibility="public"><return type="bool">Whether the validation failed.</return><throws><throw>IllegalStateException		No value has been attached to the validator yet.</throw></throws><comment>Returns whether the validation failed.</comment></method><method name="isValidInput" startline="137" endline="137" type="abstract" visibility="protected"><params numrequired="1"><param name="mInput" null="null" type="mixed">The input.</param></params><return type="bool">true if the input is valid, false otherwise.</return><comment>Returns whether the given input is valid for the validator.

Tests performed by this method shall not depend on optional arguments which have been passed
to the validator at construction time.</comment></method><method name="serialize" startline="146" endline="149" visibility="public"><return type="string">The serialized arguments of the validator.</return><sees><see>http://www.php.net/~helly/php/ext/spl/interfaceSerializable.html</see></sees><comment>Serializes the validator.</comment></method><method name="setError" startline="168" endline="176" visibility="protected"><params numrequired="1"><param name="sType" null="null" type="string">The error type.</param></params><throws><throw>DomainException				The error type is invalid.</throw></throws><comment>Formats and saves the error message.

For a given type &quot;x&quot;, this method will first check if the validator has an argument &quot;x_error&quot;.
If not, it will use the default error message provided by the aErrors property.

If the validator does not provide a default error message for the given error type,
a DomainException is thrown.

This method also allows the error messages to contain references to the validator arguments:
If the validator has an argument &quot;x&quot;, any occurrence of &quot;%x%&quot; in the error message will be replaced
by the value of the argument.</comment></method><method name="setValue" startline="185" endline="193" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to attach.</param></params><return type="$this">Used to chain methods.</return><comment>Attachs a value to the validator.</comment></method><method name="unserialize" startline="201" endline="204" visibility="public"><params numrequired="1"><param name="sSerialized" null="null" type="string">The serialized arguments of the validator.</param></params><comment>Unserializes a validator.</comment></method><method name="validate" startline="213" endline="217" visibility="protected"><comment>Validates the given value.

The default implementation sets the error to 'invalid' if the input is invalid
	   	accordingly to the isValidInput method.</comment></method></methods><properties><property name="aArgs" visibility="protected"><comment>The arguments of the validator.</comment></property><property name="aErrors" visibility="protected"><comment>Default error messages of the validator.</comment></property><property name="bHasValue" visibility="protected"><comment>Whether a value has been attached to the validator.</comment></property><property name="bValidated" visibility="protected"><comment>Whether the value has been validated.</comment></property><property name="mValue" visibility="protected"><comment>The value to validate.</comment></property><property name="sError" visibility="protected"><comment>The error message of the validator.</comment></property></properties><comment>Base class for validation mechanisms.</comment></class><class name="weeXHTMLOutput" module="wee/output" filename="wee/output/weeXHTMLOutput.class.php" startline="28" endline="71" parent="weeOutput"><methods><method name="__construct" startline="40" endline="46" visibility="public"><params numrequired="0"><param name="aParams" null="null" default="array()" type="array"/></params><comment>Initialize the output driver. Start output buffering if requested.</comment></method><method name="bufferize" filename="wee/output/weeOutput.class.php" startline="56" endline="70" visibility="public"><params numrequired="0"><param name="bCompressOutput" null="null" default="true" type="bool">Whether to compress the output before sending it to the browser (if available).</param></params><comment>Bufferize the output. Enable GZIP compression on demand if available.</comment></method><method name="decode" startline="55" endline="58" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">The value to decode.</param></params><return type="string">The decoded value.</return><comment>Decode a given value.</comment></method><method name="encode" startline="67" endline="70" visibility="public"><params numrequired="1"><param name="mValue" null="null" type="mixed">Data to encode.</param></params><return type="string">Data encoded.</return><comment>Encode data to be displayed.</comment></method><method name="encodeArray" filename="wee/output/weeOutput.class.php" startline="100" endline="114" visibility="public"><params numrequired="1"><param name="a" null="null" type="array">Data array to encode.</param></params><return type="array">Data array encoded.</return><comment>Encode an array of data to be displayed.

Mainly used by weeTemplate to encode the data it received.
You should not have to use this method.</comment></method><method name="instance" filename="wee/output/weeOutput.class.php" startline="123" endline="130" type="static" visibility="public"><return type="weeOutput">The selected output instance.</return><comment>Return the currently selected instance.
Throw an exception if no instances are selected.</comment></method><method name="select" filename="wee/output/weeOutput.class.php" startline="139" endline="144" type="static" visibility="public"><params numrequired="1"><param name="oOutput" type="object" hint="weeOutput">New driver to be used.</param></params><return type="weeOutput">The driver being replaced.</return><comment>Select a new output driver and return the previous one.</comment></method></methods><properties><property name="oInstance" visibility="protected" static="static"><comment>Instance of the current output driver.
There can only be one at the same time.</comment></property><property name="sEncoding" visibility="protected"><comment>Encoding used by the encode method.</comment></property></properties><comment>XHTML output driver.</comment></class></classes><funcs><func name="_T" module="wee" filename="wee/wee.php" startline="117" endline="128"><overloads><overload func="_T($sText">Translate the given text.</overload><overload func="_T($sText, $sPlural, $iCount">Plural version of text translation.</overload></overloads><return type="string">The translated text.</return><comment>Translate the given string in the current locale using the current domain.
This function do both gettext and ngettext depending on the number of arguments given.</comment></func><func name="_WT" module="wee" filename="wee/wee.php" startline="140" endline="151"><overloads><overload func="_T($sText">Translate the given text.</overload><overload func="_T($sText, $sPlural, $iCount">Plural version of text translation.</overload></overloads><return type="string">The translated text.</return><comment>Translate the given string in the current locale using the framework's domain (wee).
This function do both gettext and ngettext depending on the number of arguments given.
This function is reserved for internal use.</comment></func><func name="array_value" module="wee" filename="wee/wee.php" startline="289" endline="294"><params numrequired="2"><param name="aArray" null="null" type="array">The array.</param><param name="sKey" null="null" type="string">The key to look for in the array.</param><param name="mIfNotSet" null="null" default="NULL" type="mixed">The default value.</param></params><return type="mixed">Array value if it exists, else $mIfNotSet.</return><comment>Return the array value if it exists, else a default value.
Simpler form than using the conditional operators, and returns null by default, which we usually want.</comment></func><func name="burn" module="wee/exceptions" filename="wee/exceptions/weeException.class.php" startline="31" endline="36"><params numrequired="1"><param name="sException" null="null" type="string">The class of the exception to throw.</param><param name="sMessage" null="null" default="NULL" type="string">Message describing the error and how to resolve it.</param></params><comment>Throws an exception of the class specified in argument if exists, else throws DoubleFaultException.</comment></func><func name="rmdir_recursive" module="wee" filename="wee/wee.php" startline="305" endline="320"><params numrequired="1"><param name="sPath" null="null" type="string">Path to the directory to remove.</param><param name="bOnlyContents" null="null" default="false" type="bool">Boolean to check if the directory is to be left in place.</param></params><throws><throw>FileNotFoundException	$sPath is not a directory.</throw><throw>NotPermittedException	$sPath cannot be removed because of insufficient file permissions.</throw></throws><comment>Remove a directory and all its contents.</comment></func><func name="safe_header" module="wee" filename="wee/wee.php" startline="330" endline="340"><params numrequired="1"><param name="sString" null="null" type="string">Header string.</param><param name="bReplace" null="null" default="true" type="bool">Whether to replace any existing header Replace existing header if true.</param></params><comment>Send a header to the browser.
Tentatively prevents HTTP Response Splitting.</comment></func><func name="safe_session_start" module="wee" filename="wee/wee.php" startline="347" endline="355"><comment>Start the session.
The session is reinitialized if the name of the session is invalid.</comment></func><func name="xmlspecialchars" module="wee" filename="wee/wee.php" startline="366" endline="369"><params numrequired="1"><param name="sText" null="null" type="string">The string being converted.</param></params><return type="string">The converted string.</return><comment>Convert special characters to XML entities.

Original author: treyh on PHP comments for htmlspecialchars.</comment></func></funcs></docu>